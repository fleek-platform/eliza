{"version":3,"sources":["../src/config.ts","../src/actions.ts","../src/context.ts","../src/database/CircuitBreaker.ts","../src/logger.ts","../src/parsing.ts","../src/database.ts","../src/settings.ts","../src/types.ts","../src/models.ts","../src/localembeddingManager.ts","../src/embedding.ts","../src/evaluators.ts","../src/generation.ts","../src/goals.ts","../src/memory.ts","../src/messages.ts","../src/posts.ts","../src/providers.ts","../src/relationships.ts","../src/runtime.ts","../src/uuid.ts","../src/knowledge.ts","../src/ragknowledge.ts","../src/environment.ts","../src/cache.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load environment variables from root .env file\ndotenv.config({ path: path.resolve(__dirname, \"../../../.env\") });\n","import { names, uniqueNamesGenerator } from \"unique-names-generator\";\nimport type { Action, ActionExample } from \"./types.ts\";\n\n/**\n * Composes a set of example conversations based on provided actions and a specified count.\n * It randomly selects examples from the provided actions and formats them with generated names.\n * @param actionsData - An array of `Action` objects from which to draw examples.\n * @param count - The number of examples to generate.\n * @returns A string containing formatted examples of conversations.\n */\nexport const composeActionExamples = (actionsData: Action[], count: number) => {\n    const data: ActionExample[][][] = actionsData.map((action: Action) => [\n        ...action.examples,\n    ]);\n\n    const actionExamples: ActionExample[][] = [];\n    let length = data.length;\n    for (let i = 0; i < count && length; i++) {\n        const actionId = i % length;\n        const examples = data[actionId];\n        if (examples.length) {\n            const rand = ~~(Math.random() * examples.length);\n            actionExamples[i] = examples.splice(rand, 1)[0];\n        } else {\n            i--;\n        }\n\n        if (examples.length == 0) {\n            data.splice(actionId, 1);\n            length--;\n        }\n    }\n\n    const formattedExamples = actionExamples.map((example) => {\n        const exampleNames = Array.from({ length: 5 }, () =>\n            uniqueNamesGenerator({ dictionaries: [names] })\n        );\n\n        return `\\n${example\n            .map((message) => {\n                let messageString = `${message.user}: ${message.content.text}${message.content.action ? ` (${message.content.action})` : \"\"}`;\n                for (let i = 0; i < exampleNames.length; i++) {\n                    messageString = messageString.replaceAll(\n                        `{{user${i + 1}}}`,\n                        exampleNames[i]\n                    );\n                }\n                return messageString;\n            })\n            .join(\"\\n\")}`;\n    });\n\n    return formattedExamples.join(\"\\n\");\n};\n\n/**\n * Formats the names of the provided actions into a comma-separated string.\n * @param actions - An array of `Action` objects from which to extract names.\n * @returns A comma-separated string of action names.\n */\nexport function formatActionNames(actions: Action[]) {\n    return actions\n        .sort(() => 0.5 - Math.random())\n        .map((action: Action) => `${action.name}`)\n        .join(\", \");\n}\n\n/**\n * Formats the provided actions into a detailed string listing each action's name and description, separated by commas and newlines.\n * @param actions - An array of `Action` objects to format.\n * @returns A detailed string of actions, including names and descriptions.\n */\nexport function formatActions(actions: Action[]) {\n    return actions\n        .sort(() => 0.5 - Math.random())\n        .map((action: Action) => `${action.name}: ${action.description}`)\n        .join(\",\\n\");\n}\n","import handlebars from \"handlebars\";\nimport type { State, TemplateType } from \"./types.ts\";\nimport { names, uniqueNamesGenerator } from \"unique-names-generator\";\n\n/**\n * Composes a context string by replacing placeholders in a template with corresponding values from the state.\n *\n * This function takes a template string with placeholders in the format `{{placeholder}}` and a state object.\n * It replaces each placeholder with the value from the state object that matches the placeholder's name.\n * If a matching key is not found in the state object for a given placeholder, the placeholder is replaced with an empty string.\n *\n * By default, this function uses a simple string replacement approach. However, when `templatingEngine` is set to `'handlebars'`, it uses Handlebars templating engine instead, compiling the template into a reusable function and evaluating it with the provided state object.\n *\n * @param {Object} params - The parameters for composing the context.\n * @param {State} params.state - The state object containing values to replace the placeholders in the template.\n * @param {TemplateType} params.template - The template string or function containing placeholders to be replaced with state values.\n * @param {\"handlebars\" | undefined} [params.templatingEngine] - The templating engine to use for compiling and evaluating the template (optional, default: `undefined`).\n * @returns {string} The composed context string with placeholders replaced by corresponding state values.\n *\n * @example\n * // Given a state object and a template\n * const state = { userName: \"Alice\", userAge: 30 };\n * const template = \"Hello, {{userName}}! You are {{userAge}} years old\";\n *\n * // Composing the context with simple string replacement will result in:\n * // \"Hello, Alice! You are 30 years old.\"\n * const contextSimple = composeContext({ state, template });\n *\n * // Using composeContext with a template function for dynamic template\n * const template = ({ state }) => {\n * const tone = Math.random() > 0.5 ? \"kind\" : \"rude\";\n *   return `Hello, {{userName}}! You are {{userAge}} years old. Be ${tone}`;\n * };\n * const contextSimple = composeContext({ state, template });\n */\n\nexport const composeContext = ({\n    state,\n    template,\n    templatingEngine,\n}: {\n    state: State;\n    template: TemplateType;\n    templatingEngine?: \"handlebars\";\n}) => {\n    const templateStr =\n        typeof template === \"function\" ? template({ state }) : template;\n\n    if (templatingEngine === \"handlebars\") {\n        const templateFunction = handlebars.compile(templateStr);\n        return templateFunction(state);\n    }\n\n    // @ts-expect-error match isn't working as expected\n    const out = templateStr.replace(/{{\\w+}}/g, (match) => {\n        const key = match.replace(/{{|}}/g, \"\");\n        return state[key] ?? \"\";\n    });\n    return out;\n};\n\n/**\n * Adds a header to a body of text.\n *\n * This function takes a header string and a body string and returns a new string with the header prepended to the body.\n * If the body string is empty, the header is returned as is.\n *\n * @param {string} header - The header to add to the body.\n * @param {string} body - The body to which to add the header.\n * @returns {string} The body with the header prepended.\n *\n * @example\n * // Given a header and a body\n * const header = \"Header\";\n * const body = \"Body\";\n *\n * // Adding the header to the body will result in:\n * // \"Header\\nBody\"\n * const text = addHeader(header, body);\n */\nexport const addHeader = (header: string, body: string) => {\n    return body.length > 0 ? `${header ? header + \"\\n\" : header}${body}\\n` : \"\";\n};\n\n/**\n * Generates a string with random user names populated in a template.\n *\n * This function generates a specified number of random user names and populates placeholders\n * in the provided template with these names. Placeholders in the template should follow the format `{{userX}}`\n * where `X` is the position of the user (e.g., `{{user1}}`, `{{user2}}`).\n *\n * @param {string} params.template - The template string containing placeholders for random user names.\n * @param {number} params.length - The number of random user names to generate.\n * @returns {string} The template string with placeholders replaced by random user names.\n *\n * @example\n * // Given a template and a length\n * const template = \"Hello, {{user1}}! Meet {{user2}} and {{user3}}.\";\n * const length = 3;\n *\n * // Composing the random user string will result in:\n * // \"Hello, John! Meet Alice and Bob.\"\n * const result = composeRandomUser({ template, length });\n */\nexport const composeRandomUser = (template: string, length: number) => {\n    const exampleNames = Array.from({ length }, () =>\n        uniqueNamesGenerator({ dictionaries: [names] })\n    );\n    let result = template;\n    for (let i = 0; i < exampleNames.length; i++) {\n        result = result.replaceAll(`{{user${i + 1}}}`, exampleNames[i]);\n    }\n\n    return result;\n};\n","export type CircuitBreakerState = \"CLOSED\" | \"OPEN\" | \"HALF_OPEN\";\n\nexport class CircuitBreaker {\n    private state: CircuitBreakerState = \"CLOSED\";\n    private failureCount = 0;\n    private lastFailureTime?: number;\n    private halfOpenSuccesses = 0;\n\n    private readonly failureThreshold: number;\n    private readonly resetTimeout: number;\n    private readonly halfOpenMaxAttempts: number;\n\n    constructor(\n        private readonly config: {\n            failureThreshold?: number;\n            resetTimeout?: number;\n            halfOpenMaxAttempts?: number;\n        } = {}\n    ) {\n        this.failureThreshold = config.failureThreshold ?? 5;\n        this.resetTimeout = config.resetTimeout ?? 60000;\n        this.halfOpenMaxAttempts = config.halfOpenMaxAttempts ?? 3;\n    }\n\n    async execute<T>(operation: () => Promise<T>): Promise<T> {\n        if (this.state === \"OPEN\") {\n            if (Date.now() - (this.lastFailureTime || 0) > this.resetTimeout) {\n                this.state = \"HALF_OPEN\";\n                this.halfOpenSuccesses = 0;\n            } else {\n                throw new Error(\"Circuit breaker is OPEN\");\n            }\n        }\n\n        try {\n            const result = await operation();\n\n            if (this.state === \"HALF_OPEN\") {\n                this.halfOpenSuccesses++;\n                if (this.halfOpenSuccesses >= this.halfOpenMaxAttempts) {\n                    this.reset();\n                }\n            }\n\n            return result;\n        } catch (error) {\n            this.handleFailure();\n            throw error;\n        }\n    }\n\n    private handleFailure(): void {\n        this.failureCount++;\n        this.lastFailureTime = Date.now();\n\n        if (\n            this.state !== \"OPEN\" &&\n            this.failureCount >= this.failureThreshold\n        ) {\n            this.state = \"OPEN\";\n        }\n    }\n\n    private reset(): void {\n        this.state = \"CLOSED\";\n        this.failureCount = 0;\n        this.lastFailureTime = undefined;\n    }\n\n    getState(): \"CLOSED\" | \"OPEN\" | \"HALF_OPEN\" {\n        return this.state;\n    }\n}\n","import pino, { type LogFn } from \"pino\";\nimport pretty from \"pino-pretty\";\n\nimport { parseBooleanFromText } from \"./parsing.ts\";\n\n\nconst customLevels: Record<string, number> = {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    log: 29,\n    progress: 28,\n    success: 27,\n    debug: 20,\n    trace: 10,\n};\n\nconst raw = parseBooleanFromText(process?.env?.LOG_JSON_FORMAT) || false;\n\nconst createStream = () => {\n    if (raw) {\n        return undefined;\n    }\n    return pretty({\n        colorize: true,\n        translateTime: \"yyyy-mm-dd HH:MM:ss\",\n        ignore: \"pid,hostname\",\n    });\n};\n\nconst defaultLevel = process?.env?.DEFAULT_LOG_LEVEL || \"info\";\n\nconst options = {\n    level: defaultLevel,\n    customLevels,\n    hooks: {\n        logMethod(\n            inputArgs: [string | Record<string, unknown>, ...unknown[]],\n            method: LogFn\n        ): void {\n            const [arg1, ...rest] = inputArgs;\n\n            if (typeof arg1 === \"object\") {\n                const messageParts = rest.map((arg) =>\n                    typeof arg === \"string\" ? arg : JSON.stringify(arg)\n                );\n                const message = messageParts.join(\" \");\n                method.apply(this, [arg1, message]);\n            } else {\n                const context = {};\n                const messageParts = [arg1, ...rest].map((arg) =>\n                    typeof arg === \"string\" ? arg : arg\n                );\n                const message = messageParts\n                    .filter((part) => typeof part === \"string\")\n                    .join(\" \");\n                const jsonParts = messageParts.filter(\n                    (part) => typeof part === \"object\"\n                );\n\n                Object.assign(context, ...jsonParts);\n\n                method.apply(this, [context, message]);\n            }\n        },\n    },\n};\n\nexport const elizaLogger = pino(options, createStream());\n\nexport default elizaLogger;\n","import type { ActionResponse } from \"./types.ts\";\nconst jsonBlockPattern = /```json\\n([\\s\\S]*?)\\n```/;\n\nexport const messageCompletionFooter = `\\nResponse format should be formatted in a valid JSON block like this:\n\\`\\`\\`json\n{ \"user\": \"{{agentName}}\", \"text\": \"<string>\", \"action\": \"<string>\" }\n\\`\\`\\`\n\nThe “action” field should be one of the options in [Available Actions] and the \"text\" field should be the response you want to send.\n`;\n\nexport const shouldRespondFooter = `The available options are [RESPOND], [IGNORE], or [STOP]. Choose the most appropriate option.\nIf {{agentName}} is talking too much, you can choose [IGNORE]\n\nYour response must include one of the options.`;\n\nexport const parseShouldRespondFromText = (\n    text: string\n): \"RESPOND\" | \"IGNORE\" | \"STOP\" | null => {\n    const match = text\n        .split(\"\\n\")[0]\n        .trim()\n        .replace(\"[\", \"\")\n        .toUpperCase()\n        .replace(\"]\", \"\")\n        .match(/^(RESPOND|IGNORE|STOP)$/i);\n    return match\n        ? (match[0].toUpperCase() as \"RESPOND\" | \"IGNORE\" | \"STOP\")\n        : text.includes(\"RESPOND\")\n        ? \"RESPOND\"\n        : text.includes(\"IGNORE\")\n        ? \"IGNORE\"\n        : text.includes(\"STOP\")\n        ? \"STOP\"\n        : null;\n};\n\nexport const booleanFooter = `Respond with only a YES or a NO.`;\n\n/**\n * Parses a string to determine its boolean equivalent.\n *\n * Recognized affirmative values: \"YES\", \"Y\", \"TRUE\", \"T\", \"1\", \"ON\", \"ENABLE\".\n * Recognized negative values: \"NO\", \"N\", \"FALSE\", \"F\", \"0\", \"OFF\", \"DISABLE\".\n *\n * @param {string} text - The input text to parse.\n * @returns {boolean|null} - Returns `true` for affirmative inputs, `false` for negative inputs, and `null` for unrecognized inputs or null/undefined.\n */\nexport const parseBooleanFromText = (text: string) => {\n    if (!text) return null; // Handle null or undefined input\n\n    const affirmative = [\"YES\", \"Y\", \"TRUE\", \"T\", \"1\", \"ON\", \"ENABLE\"];\n    const negative = [\"NO\", \"N\", \"FALSE\", \"F\", \"0\", \"OFF\", \"DISABLE\"];\n\n    const normalizedText = text.trim().toUpperCase();\n\n    if (affirmative.includes(normalizedText)) {\n        return true;\n    } else if (negative.includes(normalizedText)) {\n        return false;\n    }\n\n    return null; // Return null for unrecognized inputs\n};\n\nexport const stringArrayFooter = `Respond with a JSON array containing the values in a valid JSON block formatted for markdown with this structure:\n\\`\\`\\`json\n[\n  'value',\n  'value'\n]\n\\`\\`\\`\n\nYour response must include the valid JSON block.`;\n\n/**\n * Parses a JSON array from a given text. The function looks for a JSON block wrapped in triple backticks\n * with `json` language identifier, and if not found, it searches for an array pattern within the text.\n * It then attempts to parse the JSON string into a JavaScript object. If parsing is successful and the result\n * is an array, it returns the array; otherwise, it returns null.\n *\n * @param text - The input text from which to extract and parse the JSON array.\n * @returns An array parsed from the JSON string if successful; otherwise, null.\n */\nexport function parseJsonArrayFromText(text: string) {\n    let jsonData = null;\n\n    // First try to parse with the original JSON format\n    const jsonBlockMatch = text.match(jsonBlockPattern);\n\n    if (jsonBlockMatch) {\n        try {\n            // Only replace quotes that are actually being used for string delimitation\n            const normalizedJson = jsonBlockMatch[1].replace(\n                /(?<!\\\\)'([^']*)'(?=\\s*[,}\\]])/g,\n                '\"$1\"'\n            );\n            jsonData = JSON.parse(normalizedJson);\n        } catch (e) {\n            console.error(\"Error parsing JSON:\", e);\n            console.error(\"Failed parsing text:\", jsonBlockMatch[1]);\n        }\n    }\n\n    // If that fails, try to find an array pattern\n    if (!jsonData) {\n        const arrayPattern = /\\[\\s*(['\"])(.*?)\\1\\s*\\]/;\n        const arrayMatch = text.match(arrayPattern);\n\n        if (arrayMatch) {\n            try {\n                // Only replace quotes that are actually being used for string delimitation\n                const normalizedJson = arrayMatch[0].replace(\n                    /(?<!\\\\)'([^']*)'(?=\\s*[,}\\]])/g,\n                    '\"$1\"'\n                );\n                jsonData = JSON.parse(normalizedJson);\n            } catch (e) {\n                console.error(\"Error parsing JSON:\", e);\n                console.error(\"Failed parsing text:\", arrayMatch[0]);\n            }\n        }\n    }\n\n    if (Array.isArray(jsonData)) {\n        return jsonData;\n    }\n\n    return null;\n}\n\n/**\n * Parses a JSON object from a given text. The function looks for a JSON block wrapped in triple backticks\n * with `json` language identifier, and if not found, it searches for an object pattern within the text.\n * It then attempts to parse the JSON string into a JavaScript object. If parsing is successful and the result\n * is an object (but not an array), it returns the object; otherwise, it tries to parse an array if the result\n * is an array, or returns null if parsing is unsuccessful or the result is neither an object nor an array.\n *\n * @param text - The input text from which to extract and parse the JSON object.\n * @returns An object parsed from the JSON string if successful; otherwise, null or the result of parsing an array.\n */\nexport function parseJSONObjectFromText(\n    text: string\n): Record<string, any> | null {\n    let jsonData = null;\n    const jsonBlockMatch = text.match(jsonBlockPattern);\n\n    if (jsonBlockMatch) {\n        text = cleanJsonResponse(text);\n        const parsingText = normalizeJsonString(text);\n        try {\n            jsonData = JSON.parse(parsingText);\n        } catch (e) {\n            console.error(\"Error parsing JSON:\", e);\n            console.error(\"Text is not JSON\", text);\n            return extractAttributes(text);\n        }\n    } else {\n        const objectPattern = /{[\\s\\S]*?}?/;\n        const objectMatch = text.match(objectPattern);\n\n        if (objectMatch) {\n            text = cleanJsonResponse(text);\n            const parsingText = normalizeJsonString(text);\n            try {\n                jsonData = JSON.parse(parsingText);\n            } catch (e) {\n                console.error(\"Error parsing JSON:\", e);\n                console.error(\"Text is not JSON\", text);\n                return extractAttributes(text);\n            }\n        }\n    }\n\n    if (\n        typeof jsonData === \"object\" &&\n        jsonData !== null &&\n        !Array.isArray(jsonData)\n    ) {\n        return jsonData;\n    } else if (typeof jsonData === \"object\" && Array.isArray(jsonData)) {\n        return parseJsonArrayFromText(text);\n    } else {\n        return null;\n    }\n}\n\n/**\n * Extracts specific attributes (e.g., user, text, action) from a JSON-like string using regex.\n * @param response - The cleaned string response to extract attributes from.\n * @param attributesToExtract - An array of attribute names to extract.\n * @returns An object containing the extracted attributes.\n */\nexport function extractAttributes(\n    response: string,\n    attributesToExtract?: string[]\n): { [key: string]: string | undefined } {\n    response = response.trim();\n    const attributes: { [key: string]: string | undefined } = {};\n\n    if (!attributesToExtract || attributesToExtract.length === 0) {\n        // Extract all attributes if no specific attributes are provided\n        const matches = response.matchAll(/\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"?/g);\n        for (const match of matches) {\n            attributes[match[1]] = match[2];\n        }\n    } else {\n        // Extract only specified attributes\n        attributesToExtract.forEach((attribute) => {\n            const match = response.match(\n                new RegExp(`\"${attribute}\"\\\\s*:\\\\s*\"([^\"]*)\"?`, \"i\")\n            );\n            if (match) {\n                attributes[attribute] = match[1];\n            }\n        });\n    }\n\n    return Object.entries(attributes).length > 0 ? attributes : null;\n}\n\n/**\n * Normalizes a JSON-like string by correcting formatting issues:\n * - Removes extra spaces after '{' and before '}'.\n * - Wraps unquoted values in double quotes.\n * - Converts single-quoted values to double-quoted.\n * - Ensures consistency in key-value formatting.\n * - Normalizes mixed adjacent quote pairs.\n *\n * This is useful for cleaning up improperly formatted JSON strings\n * before parsing them into valid JSON.\n *\n * @param str - The JSON-like string to normalize.\n * @returns A properly formatted JSON string.\n */\n\nexport const normalizeJsonString = (str: string) => {\n    // Remove extra spaces after '{' and before '}'\n    str = str.replace(/\\{\\s+/, '{').replace(/\\s+\\}/, '}').trim();\n\n    // \"key\": unquotedValue → \"key\": \"unquotedValue\"\n    str = str.replace(\n      /(\"[\\w\\d_-]+\")\\s*: \\s*(?!\"|\\[)([\\s\\S]+?)(?=(,\\s*\"|\\}$))/g,\n      '$1: \"$2\"',\n    );\n\n    // \"key\": 'value' → \"key\": \"value\"\n    str = str.replace(\n      /\"([^\"]+)\"\\s*:\\s*'([^']*)'/g,\n      (_, key, value) => `\"${key}\": \"${value}\"`,\n    );\n\n    // \"key\": someWord → \"key\": \"someWord\"\n    str = str.replace(/(\"[\\w\\d_-]+\")\\s*:\\s*([A-Za-z_]+)(?![\"\\w])/g, '$1: \"$2\"');\n\n    // Replace adjacent quote pairs with a single double quote\n    str = str.replace(/(?:\"')|(?:'\")/g, '\"');\n    return str;\n};\n\n/**\n * Cleans a JSON-like response string by removing unnecessary markers, line breaks, and extra whitespace.\n * This is useful for handling improperly formatted JSON responses from external sources.\n *\n * @param response - The raw JSON-like string response to clean.\n * @returns The cleaned string, ready for parsing or further processing.\n */\n\nexport function cleanJsonResponse(response: string): string {\n    return response\n        .replace(/```json\\s*/g, \"\") // Remove ```json\n        .replace(/```\\s*/g, \"\") // Remove any remaining ```\n        .replace(/(\\r\\n|\\n|\\r)/g, \"\") // Remove line breaks\n        .trim();\n}\n\nexport const postActionResponseFooter = `Choose any combination of [LIKE], [RETWEET], [QUOTE], and [REPLY] that are appropriate. Each action must be on its own line. Your response must only include the chosen actions.`;\n\nexport const parseActionResponseFromText = (\n    text: string\n): { actions: ActionResponse } => {\n    const actions: ActionResponse = {\n        like: false,\n        retweet: false,\n        quote: false,\n        reply: false,\n    };\n\n    // Regex patterns\n    const likePattern = /\\[LIKE\\]/i;\n    const retweetPattern = /\\[RETWEET\\]/i;\n    const quotePattern = /\\[QUOTE\\]/i;\n    const replyPattern = /\\[REPLY\\]/i;\n\n    // Check with regex\n    actions.like = likePattern.test(text);\n    actions.retweet = retweetPattern.test(text);\n    actions.quote = quotePattern.test(text);\n    actions.reply = replyPattern.test(text);\n\n    // Also do line by line parsing as backup\n    const lines = text.split(\"\\n\");\n    for (const line of lines) {\n        const trimmed = line.trim();\n        if (trimmed === \"[LIKE]\") actions.like = true;\n        if (trimmed === \"[RETWEET]\") actions.retweet = true;\n        if (trimmed === \"[QUOTE]\") actions.quote = true;\n        if (trimmed === \"[REPLY]\") actions.reply = true;\n    }\n\n    return { actions };\n};\n\n/**\n * Truncate text to fit within the character limit, ensuring it ends at a complete sentence.\n */\nexport function truncateToCompleteSentence(\n    text: string,\n    maxLength: number\n): string {\n    if (text.length <= maxLength) {\n        return text;\n    }\n\n    // Attempt to truncate at the last period within the limit\n    const lastPeriodIndex = text.lastIndexOf(\".\", maxLength - 1);\n    if (lastPeriodIndex !== -1) {\n        const truncatedAtPeriod = text.slice(0, lastPeriodIndex + 1).trim();\n        if (truncatedAtPeriod.length > 0) {\n            return truncatedAtPeriod;\n        }\n    }\n\n    // If no period, truncate to the nearest whitespace within the limit\n    const lastSpaceIndex = text.lastIndexOf(\" \", maxLength - 1);\n    if (lastSpaceIndex !== -1) {\n        const truncatedAtSpace = text.slice(0, lastSpaceIndex).trim();\n        if (truncatedAtSpace.length > 0) {\n            return truncatedAtSpace + \"...\";\n        }\n    }\n\n    // Fallback: Hard truncate and add ellipsis\n    const hardTruncated = text.slice(0, maxLength - 3).trim();\n    return hardTruncated + \"...\";\n}\n","import type {\n    Account,\n    Actor,\n    GoalStatus,\n    Goal,\n    Memory,\n    Relationship,\n    UUID,\n    RAGKnowledgeItem,\n    Participant,\n    IDatabaseAdapter,\n} from \"./types.ts\";\nimport { CircuitBreaker } from \"./database/CircuitBreaker\";\nimport { elizaLogger } from \"./logger\";\n\n/**\n * An abstract class representing a database adapter for managing various entities\n * like accounts, memories, actors, goals, and rooms.\n */\nexport abstract class DatabaseAdapter<DB = any> implements IDatabaseAdapter {\n    /**\n     * The database instance.\n     */\n    db: DB;\n\n    /**\n     * Circuit breaker instance used to handle fault tolerance and prevent cascading failures.\n     * Implements the Circuit Breaker pattern to temporarily disable operations when a failure threshold is reached.\n     *\n     * The circuit breaker has three states:\n     * - CLOSED: Normal operation, requests pass through\n     * - OPEN: Failure threshold exceeded, requests are blocked\n     * - HALF_OPEN: Testing if service has recovered\n     *\n     * @protected\n     */\n    protected circuitBreaker: CircuitBreaker;\n\n    /**\n     * Creates a new DatabaseAdapter instance with optional circuit breaker configuration.\n     *\n     * @param circuitBreakerConfig - Configuration options for the circuit breaker\n     * @param circuitBreakerConfig.failureThreshold - Number of failures before circuit opens (defaults to 5)\n     * @param circuitBreakerConfig.resetTimeout - Time in ms before attempting to close circuit (defaults to 60000)\n     * @param circuitBreakerConfig.halfOpenMaxAttempts - Number of successful attempts needed to close circuit (defaults to 3)\n     */\n    constructor(circuitBreakerConfig?: {\n        failureThreshold?: number;\n        resetTimeout?: number;\n        halfOpenMaxAttempts?: number;\n    }) {\n        this.circuitBreaker = new CircuitBreaker(circuitBreakerConfig);\n    }\n\n    /**\n     * Optional initialization method for the database adapter.\n     * @returns A Promise that resolves when initialization is complete.\n     */\n    abstract init(): Promise<void>;\n\n    /**\n     * Optional close method for the database adapter.\n     * @returns A Promise that resolves when closing is complete.\n     */\n    abstract close(): Promise<void>;\n\n    /**\n     * Retrieves an account by its ID.\n     * @param userId The UUID of the user account to retrieve.\n     * @returns A Promise that resolves to the Account object or null if not found.\n     */\n    abstract getAccountById(userId: UUID): Promise<Account | null>;\n\n    /**\n     * Creates a new account in the database.\n     * @param account The account object to create.\n     * @returns A Promise that resolves when the account creation is complete.\n     */\n    abstract createAccount(account: Account): Promise<boolean>;\n\n    /**\n     * Retrieves memories based on the specified parameters.\n     * @param params An object containing parameters for the memory retrieval.\n     * @returns A Promise that resolves to an array of Memory objects.\n     */\n    abstract getMemories(params: {\n        agentId: UUID;\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n        tableName: string;\n    }): Promise<Memory[]>;\n\n    abstract getMemoriesByRoomIds(params: {\n        agentId: UUID;\n        roomIds: UUID[];\n        tableName: string;\n        limit?: number;\n    }): Promise<Memory[]>;\n\n    abstract getMemoryById(id: UUID): Promise<Memory | null>;\n\n    /**\n     * Retrieves multiple memories by their IDs\n     * @param memoryIds Array of UUIDs of the memories to retrieve\n     * @param tableName Optional table name to filter memories by type\n     * @returns Promise resolving to array of Memory objects\n     */\n    abstract getMemoriesByIds(\n        memoryIds: UUID[],\n        tableName?: string\n    ): Promise<Memory[]>;\n\n    /**\n     * Retrieves cached embeddings based on the specified query parameters.\n     * @param params An object containing parameters for the embedding retrieval.\n     * @returns A Promise that resolves to an array of objects containing embeddings and levenshtein scores.\n     */\n    abstract getCachedEmbeddings({\n        query_table_name,\n        query_threshold,\n        query_input,\n        query_field_name,\n        query_field_sub_name,\n        query_match_count,\n    }: {\n        query_table_name: string;\n        query_threshold: number;\n        query_input: string;\n        query_field_name: string;\n        query_field_sub_name: string;\n        query_match_count: number;\n    }): Promise<\n        {\n            embedding: number[];\n            levenshtein_score: number;\n        }[]\n    >;\n\n    /**\n     * Logs an event or action with the specified details.\n     * @param params An object containing parameters for the log entry.\n     * @returns A Promise that resolves when the log entry has been saved.\n     */\n    abstract log(params: {\n        body: { [key: string]: unknown };\n        userId: UUID;\n        roomId: UUID;\n        type: string;\n    }): Promise<void>;\n\n    /**\n     * Retrieves details of actors in a given room.\n     * @param params An object containing the roomId to search for actors.\n     * @returns A Promise that resolves to an array of Actor objects.\n     */\n    abstract getActorDetails(params: { roomId: UUID }): Promise<Actor[]>;\n\n    /**\n     * Searches for memories based on embeddings and other specified parameters.\n     * @param params An object containing parameters for the memory search.\n     * @returns A Promise that resolves to an array of Memory objects.\n     */\n    abstract searchMemories(params: {\n        tableName: string;\n        agentId: UUID;\n        roomId: UUID;\n        embedding: number[];\n        match_threshold: number;\n        match_count: number;\n        unique: boolean;\n    }): Promise<Memory[]>;\n\n    /**\n     * Updates the status of a specific goal.\n     * @param params An object containing the goalId and the new status.\n     * @returns A Promise that resolves when the goal status has been updated.\n     */\n    abstract updateGoalStatus(params: {\n        goalId: UUID;\n        status: GoalStatus;\n    }): Promise<void>;\n\n    /**\n     * Searches for memories by embedding and other specified parameters.\n     * @param embedding The embedding vector to search with.\n     * @param params Additional parameters for the search.\n     * @returns A Promise that resolves to an array of Memory objects.\n     */\n    abstract searchMemoriesByEmbedding(\n        embedding: number[],\n        params: {\n            match_threshold?: number;\n            count?: number;\n            roomId?: UUID;\n            agentId?: UUID;\n            unique?: boolean;\n            tableName: string;\n        }\n    ): Promise<Memory[]>;\n\n    /**\n     * Creates a new memory in the database.\n     * @param memory The memory object to create.\n     * @param tableName The table where the memory should be stored.\n     * @param unique Indicates if the memory should be unique.\n     * @returns A Promise that resolves when the memory has been created.\n     */\n    abstract createMemory(\n        memory: Memory,\n        tableName: string,\n        unique?: boolean\n    ): Promise<void>;\n\n    /**\n     * Removes a specific memory from the database.\n     * @param memoryId The UUID of the memory to remove.\n     * @param tableName The table from which the memory should be removed.\n     * @returns A Promise that resolves when the memory has been removed.\n     */\n    abstract removeMemory(memoryId: UUID, tableName: string): Promise<void>;\n\n    /**\n     * Removes all memories associated with a specific room.\n     * @param roomId The UUID of the room whose memories should be removed.\n     * @param tableName The table from which the memories should be removed.\n     * @returns A Promise that resolves when all memories have been removed.\n     */\n    abstract removeAllMemories(roomId: UUID, tableName: string): Promise<void>;\n\n    /**\n     * Counts the number of memories in a specific room.\n     * @param roomId The UUID of the room for which to count memories.\n     * @param unique Specifies whether to count only unique memories.\n     * @param tableName Optional table name to count memories from.\n     * @returns A Promise that resolves to the number of memories.\n     */\n    abstract countMemories(\n        roomId: UUID,\n        unique?: boolean,\n        tableName?: string\n    ): Promise<number>;\n\n    /**\n     * Retrieves goals based on specified parameters.\n     * @param params An object containing parameters for goal retrieval.\n     * @returns A Promise that resolves to an array of Goal objects.\n     */\n    abstract getGoals(params: {\n        agentId: UUID;\n        roomId: UUID;\n        userId?: UUID | null;\n        onlyInProgress?: boolean;\n        count?: number;\n    }): Promise<Goal[]>;\n\n    /**\n     * Updates a specific goal in the database.\n     * @param goal The goal object with updated properties.\n     * @returns A Promise that resolves when the goal has been updated.\n     */\n    abstract updateGoal(goal: Goal): Promise<void>;\n\n    /**\n     * Creates a new goal in the database.\n     * @param goal The goal object to create.\n     * @returns A Promise that resolves when the goal has been created.\n     */\n    abstract createGoal(goal: Goal): Promise<void>;\n\n    /**\n     * Removes a specific goal from the database.\n     * @param goalId The UUID of the goal to remove.\n     * @returns A Promise that resolves when the goal has been removed.\n     */\n    abstract removeGoal(goalId: UUID): Promise<void>;\n\n    /**\n     * Removes all goals associated with a specific room.\n     * @param roomId The UUID of the room whose goals should be removed.\n     * @returns A Promise that resolves when all goals have been removed.\n     */\n    abstract removeAllGoals(roomId: UUID): Promise<void>;\n\n    /**\n     * Retrieves the room ID for a given room, if it exists.\n     * @param roomId The UUID of the room to retrieve.\n     * @returns A Promise that resolves to the room ID or null if not found.\n     */\n    abstract getRoom(roomId: UUID): Promise<UUID | null>;\n\n    /**\n     * Creates a new room with an optional specified ID.\n     * @param roomId Optional UUID to assign to the new room.\n     * @returns A Promise that resolves to the UUID of the created room.\n     */\n    abstract createRoom(roomId?: UUID): Promise<UUID>;\n\n    /**\n     * Removes a specific room from the database.\n     * @param roomId The UUID of the room to remove.\n     * @returns A Promise that resolves when the room has been removed.\n     */\n    abstract removeRoom(roomId: UUID): Promise<void>;\n\n    /**\n     * Retrieves room IDs for which a specific user is a participant.\n     * @param userId The UUID of the user.\n     * @returns A Promise that resolves to an array of room IDs.\n     */\n    abstract getRoomsForParticipant(userId: UUID): Promise<UUID[]>;\n\n    /**\n     * Retrieves room IDs for which specific users are participants.\n     * @param userIds An array of UUIDs of the users.\n     * @returns A Promise that resolves to an array of room IDs.\n     */\n    abstract getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]>;\n\n    /**\n     * Adds a user as a participant to a specific room.\n     * @param userId The UUID of the user to add as a participant.\n     * @param roomId The UUID of the room to which the user will be added.\n     * @returns A Promise that resolves to a boolean indicating success or failure.\n     */\n    abstract addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n\n    /**\n     * Removes a user as a participant from a specific room.\n     * @param userId The UUID of the user to remove as a participant.\n     * @param roomId The UUID of the room from which the user will be removed.\n     * @returns A Promise that resolves to a boolean indicating success or failure.\n     */\n    abstract removeParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n\n    /**\n     * Retrieves participants associated with a specific account.\n     * @param userId The UUID of the account.\n     * @returns A Promise that resolves to an array of Participant objects.\n     */\n    abstract getParticipantsForAccount(userId: UUID): Promise<Participant[]>;\n\n    /**\n     * Retrieves participants associated with a specific account.\n     * @param userId The UUID of the account.\n     * @returns A Promise that resolves to an array of Participant objects.\n     */\n    abstract getParticipantsForAccount(userId: UUID): Promise<Participant[]>;\n\n    /**\n     * Retrieves participants for a specific room.\n     * @param roomId The UUID of the room for which to retrieve participants.\n     * @returns A Promise that resolves to an array of UUIDs representing the participants.\n     */\n    abstract getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n\n    abstract getParticipantUserState(\n        roomId: UUID,\n        userId: UUID\n    ): Promise<\"FOLLOWED\" | \"MUTED\" | null>;\n    abstract setParticipantUserState(\n        roomId: UUID,\n        userId: UUID,\n        state: \"FOLLOWED\" | \"MUTED\" | null\n    ): Promise<void>;\n\n    /**\n     * Creates a new relationship between two users.\n     * @param params An object containing the UUIDs of the two users (userA and userB).\n     * @returns A Promise that resolves to a boolean indicating success or failure of the creation.\n     */\n    abstract createRelationship(params: {\n        userA: UUID;\n        userB: UUID;\n    }): Promise<boolean>;\n\n    /**\n     * Retrieves a relationship between two users if it exists.\n     * @param params An object containing the UUIDs of the two users (userA and userB).\n     * @returns A Promise that resolves to the Relationship object or null if not found.\n     */\n    abstract getRelationship(params: {\n        userA: UUID;\n        userB: UUID;\n    }): Promise<Relationship | null>;\n\n    /**\n     * Retrieves all relationships for a specific user.\n     * @param params An object containing the UUID of the user.\n     * @returns A Promise that resolves to an array of Relationship objects.\n     */\n    abstract getRelationships(params: {\n        userId: UUID;\n    }): Promise<Relationship[]>;\n\n    /**\n     * Retrieves knowledge items based on specified parameters.\n     * @param params Object containing search parameters\n     * @returns Promise resolving to array of knowledge items\n     */\n    abstract getKnowledge(params: {\n        id?: UUID;\n        agentId: UUID;\n        limit?: number;\n        query?: string;\n        conversationContext?: string;\n    }): Promise<RAGKnowledgeItem[]>;\n\n    abstract searchKnowledge(params: {\n        agentId: UUID;\n        embedding: Float32Array;\n        match_threshold: number;\n        match_count: number;\n        searchText?: string;\n    }): Promise<RAGKnowledgeItem[]>;\n\n    /**\n     * Creates a new knowledge item in the database.\n     * @param knowledge The knowledge item to create\n     * @returns Promise resolving when creation is complete\n     */\n    abstract createKnowledge(knowledge: RAGKnowledgeItem): Promise<void>;\n\n    /**\n     * Removes a knowledge item and its associated chunks from the database.\n     * @param id The ID of the knowledge item to remove\n     * @returns Promise resolving when removal is complete\n     */\n    abstract removeKnowledge(id: UUID): Promise<void>;\n\n    /**\n     * Removes an agents full knowledge database and its associated chunks from the database.\n     * @param agentId The Agent ID of the knowledge items to remove\n     * @returns Promise resolving when removal is complete\n     */\n    abstract clearKnowledge(agentId: UUID, shared?: boolean): Promise<void>;\n\n    /**\n     * Executes an operation with circuit breaker protection.\n     * @param operation A function that returns a Promise to be executed with circuit breaker protection\n     * @param context A string describing the context/operation being performed for logging purposes\n     * @returns A Promise that resolves to the result of the operation\n     * @throws Will throw an error if the circuit breaker is open or if the operation fails\n     * @protected\n     */\n    protected async withCircuitBreaker<T>(\n        operation: () => Promise<T>,\n        context: string\n    ): Promise<T> {\n        try {\n            return await this.circuitBreaker.execute(operation);\n        } catch (error) {\n            elizaLogger.error(`Circuit breaker error in ${context}:`, {\n                error: error instanceof Error ? error.message : String(error),\n                state: this.circuitBreaker.getState(),\n            });\n            throw error;\n        }\n    }\n}\n","import { config } from \"dotenv\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport elizaLogger from \"./logger.ts\";\n\nelizaLogger.info(\"Loading embedding settings:\", {\n    USE_OPENAI_EMBEDDING: process.env.USE_OPENAI_EMBEDDING,\n    USE_OLLAMA_EMBEDDING: process.env.USE_OLLAMA_EMBEDDING,\n    OLLAMA_EMBEDDING_MODEL:\n        process.env.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\",\n});\n\n// Add this logging block\nelizaLogger.debug(\"Loading character settings:\", {\n    CHARACTER_PATH: process.env.CHARACTER_PATH,\n    ARGV: process.argv,\n    CHARACTER_ARG: process.argv.find((arg) => arg.startsWith(\"--character=\")),\n    CWD: process.cwd(),\n});\n\ninterface Settings {\n    [key: string]: string | undefined;\n}\n\ninterface NamespacedSettings {\n    [namespace: string]: Settings;\n}\n\nlet environmentSettings: Settings = {};\n\n/**\n * Determines if code is running in a browser environment\n * @returns {boolean} True if in browser environment\n */\nconst isBrowser = (): boolean => {\n    return (\n        typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n    );\n};\n\n/**\n * Recursively searches for a .env file starting from the current directory\n * and moving up through parent directories (Node.js only)\n * @param {string} [startDir=process.cwd()] - Starting directory for the search\n * @returns {string|null} Path to the nearest .env file or null if not found\n */\nexport function findNearestEnvFile(startDir = process.cwd()) {\n    if (isBrowser()) return null;\n\n    let currentDir = startDir;\n\n    // Continue searching until we reach the root directory\n    while (currentDir !== path.parse(currentDir).root) {\n        const envPath = path.join(currentDir, \".env\");\n\n        if (fs.existsSync(envPath)) {\n            return envPath;\n        }\n\n        // Move up to parent directory\n        currentDir = path.dirname(currentDir);\n    }\n\n    // Check root directory as well\n    const rootEnvPath = path.join(path.parse(currentDir).root, \".env\");\n    return fs.existsSync(rootEnvPath) ? rootEnvPath : null;\n}\n\n/**\n * Configures environment settings for browser usage\n * @param {Settings} settings - Object containing environment variables\n */\nexport function configureSettings(settings: Settings) {\n    environmentSettings = { ...settings };\n}\n\n/**\n * Loads environment variables from the nearest .env file in Node.js\n * or returns configured settings in browser\n * @returns {Settings} Environment variables object\n * @throws {Error} If no .env file is found in Node.js environment\n */\nexport function loadEnvConfig(): Settings {\n    // For browser environments, return the configured settings\n    if (isBrowser()) {\n        return environmentSettings;\n    }\n\n    // Node.js environment: load from .env file\n    const envPath = findNearestEnvFile();\n\n    // attempt to Load the .env file into process.env\n    const result = config(envPath ? { path: envPath } : {});\n\n    if (!result.error) {\n        elizaLogger.log(`Loaded .env file from: ${envPath}`);\n    }\n\n    // Parse namespaced settings\n    const namespacedSettings = parseNamespacedSettings(process.env as Settings);\n\n    // Attach to process.env for backward compatibility\n    Object.entries(namespacedSettings).forEach(([namespace, settings]) => {\n        process.env[`__namespaced_${namespace}`] = JSON.stringify(settings);\n    });\n\n    return process.env as Settings;\n}\n\n/**\n * Gets a specific environment variable\n * @param {string} key - The environment variable key\n * @param {string} [defaultValue] - Optional default value if key doesn't exist\n * @returns {string|undefined} The environment variable value or default value\n */\nexport function getEnvVariable(\n    key: string,\n    defaultValue?: string\n): string | undefined {\n    if (isBrowser()) {\n        return environmentSettings[key] || defaultValue;\n    }\n    return process.env[key] || defaultValue;\n}\n\n/**\n * Checks if a specific environment variable exists\n * @param {string} key - The environment variable key\n * @returns {boolean} True if the environment variable exists\n */\nexport function hasEnvVariable(key: string): boolean {\n    if (isBrowser()) {\n        return key in environmentSettings;\n    }\n    return key in process.env;\n}\n\n// Initialize settings based on environment\nexport const settings = isBrowser() ? environmentSettings : loadEnvConfig();\n\nelizaLogger.info(\"Parsed settings:\", {\n    USE_OPENAI_EMBEDDING: settings.USE_OPENAI_EMBEDDING,\n    USE_OPENAI_EMBEDDING_TYPE: typeof settings.USE_OPENAI_EMBEDDING,\n    USE_OLLAMA_EMBEDDING: settings.USE_OLLAMA_EMBEDDING,\n    USE_OLLAMA_EMBEDDING_TYPE: typeof settings.USE_OLLAMA_EMBEDDING,\n    OLLAMA_EMBEDDING_MODEL:\n        settings.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\",\n});\n\nexport default settings;\n\n// Add this function to parse namespaced settings\nfunction parseNamespacedSettings(env: Settings): NamespacedSettings {\n    const namespaced: NamespacedSettings = {};\n\n    for (const [key, value] of Object.entries(env)) {\n        if (!value) continue;\n\n        const [namespace, ...rest] = key.split(\".\");\n        if (!namespace || rest.length === 0) continue;\n\n        const settingKey = rest.join(\".\");\n        namespaced[namespace] = namespaced[namespace] || {};\n        namespaced[namespace][settingKey] = value;\n    }\n\n    return namespaced;\n}\n","import type { Readable } from \"stream\";\n\n/**\n * Represents a UUID string in the format \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n */\nexport type UUID = `${string}-${string}-${string}-${string}-${string}`;\n\n/**\n * Represents the content of a message or communication\n */\nexport interface Content {\n    /** The main text content */\n    text: string;\n\n    /** Optional action associated with the message */\n    action?: string;\n\n    /** Optional source/origin of the content */\n    source?: string;\n\n    /** URL of the original message/post (e.g. tweet URL, Discord message link) */\n    url?: string;\n\n    /** UUID of parent message if this is a reply/thread */\n    inReplyTo?: UUID;\n\n    /** Array of media attachments */\n    attachments?: Media[];\n\n    /** Additional dynamic properties */\n    [key: string]: unknown;\n}\n\n/**\n * Example content with associated user for demonstration purposes\n */\nexport interface ActionExample {\n    /** User associated with the example */\n    user: string;\n\n    /** Content of the example */\n    content: Content;\n}\n\n/**\n * Example conversation content with user ID\n */\nexport interface ConversationExample {\n    /** UUID of user in conversation */\n    userId: UUID;\n\n    /** Content of the conversation */\n    content: Content;\n}\n\n/**\n * Represents an actor/participant in a conversation\n */\nexport interface Actor {\n    /** Display name */\n    name: string;\n\n    /** Username/handle */\n    username: string;\n\n    /** Additional profile details */\n    details: {\n        /** Short profile tagline */\n        tagline: string;\n\n        /** Longer profile summary */\n        summary: string;\n\n        /** Favorite quote */\n        quote: string;\n    };\n\n    /** Unique identifier */\n    id: UUID;\n}\n\n/**\n * Represents a single objective within a goal\n */\nexport interface Objective {\n    /** Optional unique identifier */\n    id?: string;\n\n    /** Description of what needs to be achieved */\n    description: string;\n\n    /** Whether objective is completed */\n    completed: boolean;\n}\n\n/**\n * Status enum for goals\n */\nexport enum GoalStatus {\n    DONE = \"DONE\",\n    FAILED = \"FAILED\",\n    IN_PROGRESS = \"IN_PROGRESS\",\n}\n\n/**\n * Represents a high-level goal composed of objectives\n */\nexport interface Goal {\n    /** Optional unique identifier */\n    id?: UUID;\n\n    /** Room ID where goal exists */\n    roomId: UUID;\n\n    /** User ID of goal owner */\n    userId: UUID;\n\n    /** Name/title of the goal */\n    name: string;\n\n    /** Current status */\n    status: GoalStatus;\n\n    /** Component objectives */\n    objectives: Objective[];\n}\n\n/**\n * Model size/type classification\n */\nexport enum ModelClass {\n    SMALL = \"small\",\n    MEDIUM = \"medium\",\n    LARGE = \"large\",\n    EMBEDDING = \"embedding\",\n    IMAGE = \"image\",\n}\n\n/**\n * Model settings\n */\nexport type ModelSettings = {\n    /** Model name */\n    name: string;\n\n    /** Maximum input tokens */\n    maxInputTokens: number;\n\n    /** Maximum output tokens */\n    maxOutputTokens: number;\n\n    /** Optional frequency penalty */\n    frequency_penalty?: number;\n\n    /** Optional presence penalty */\n    presence_penalty?: number;\n\n    /** Optional repetition penalty */\n    repetition_penalty?: number;\n\n    /** Stop sequences */\n    stop: string[];\n\n    /** Temperature setting */\n    temperature: number;\n\n    /** Optional telemetry configuration (experimental) */\n    experimental_telemetry?: TelemetrySettings;\n};\n\n/** Image model settings */\nexport type ImageModelSettings = {\n    name: string;\n    steps?: number;\n};\n\n/** Embedding model settings */\nexport type EmbeddingModelSettings = {\n    name: string;\n    dimensions?: number;\n};\n\n/**\n * Configuration for an AI model\n */\nexport type Model = {\n    /** Optional API endpoint */\n    endpoint?: string;\n\n    /** Model names by size class */\n    model: {\n        [ModelClass.SMALL]?: ModelSettings;\n        [ModelClass.MEDIUM]?: ModelSettings;\n        [ModelClass.LARGE]?: ModelSettings;\n        [ModelClass.EMBEDDING]?: EmbeddingModelSettings;\n        [ModelClass.IMAGE]?: ImageModelSettings;\n    };\n};\n\n/**\n * Model configurations by provider\n */\nexport type Models = {\n    [ModelProviderName.OPENAI]: Model;\n    [ModelProviderName.ETERNALAI]: Model;\n    [ModelProviderName.ANTHROPIC]: Model;\n    [ModelProviderName.GROK]: Model;\n    [ModelProviderName.GROQ]: Model;\n    [ModelProviderName.LLAMACLOUD]: Model;\n    [ModelProviderName.TOGETHER]: Model;\n    [ModelProviderName.LLAMALOCAL]: Model;\n    [ModelProviderName.LMSTUDIO]: Model;\n    [ModelProviderName.GOOGLE]: Model;\n    [ModelProviderName.MISTRAL]: Model;\n    [ModelProviderName.CLAUDE_VERTEX]: Model;\n    [ModelProviderName.REDPILL]: Model;\n    [ModelProviderName.OPENROUTER]: Model;\n    [ModelProviderName.OLLAMA]: Model;\n    [ModelProviderName.HEURIST]: Model;\n    [ModelProviderName.GALADRIEL]: Model;\n    [ModelProviderName.FAL]: Model;\n    [ModelProviderName.GAIANET]: Model;\n    [ModelProviderName.ALI_BAILIAN]: Model;\n    [ModelProviderName.VOLENGINE]: Model;\n    [ModelProviderName.NANOGPT]: Model;\n    [ModelProviderName.HYPERBOLIC]: Model;\n    [ModelProviderName.VENICE]: Model;\n    [ModelProviderName.NVIDIA]: Model;\n    [ModelProviderName.NINETEEN_AI]: Model;\n    [ModelProviderName.AKASH_CHAT_API]: Model;\n    [ModelProviderName.LIVEPEER]: Model;\n    [ModelProviderName.DEEPSEEK]: Model;\n    [ModelProviderName.INFERA]: Model;\n    [ModelProviderName.BEDROCK]: Model;\n    [ModelProviderName.ATOMA]: Model;\n    [ModelProviderName.SECRETAI]: Model;\n    [ModelProviderName.NEARAI]: Model;\n};\n\n/**\n * Available model providers\n */\nexport enum ModelProviderName {\n    OPENAI = \"openai\",\n    ETERNALAI = \"eternalai\",\n    ANTHROPIC = \"anthropic\",\n    GROK = \"grok\",\n    GROQ = \"groq\",\n    LLAMACLOUD = \"llama_cloud\",\n    TOGETHER = \"together\",\n    LLAMALOCAL = \"llama_local\",\n    LMSTUDIO = \"lmstudio\",\n    GOOGLE = \"google\",\n    MISTRAL = \"mistral\",\n    CLAUDE_VERTEX = \"claude_vertex\",\n    REDPILL = \"redpill\",\n    OPENROUTER = \"openrouter\",\n    OLLAMA = \"ollama\",\n    HEURIST = \"heurist\",\n    GALADRIEL = \"galadriel\",\n    FAL = \"falai\",\n    GAIANET = \"gaianet\",\n    ALI_BAILIAN = \"ali_bailian\",\n    VOLENGINE = \"volengine\",\n    NANOGPT = \"nanogpt\",\n    HYPERBOLIC = \"hyperbolic\",\n    VENICE = \"venice\",\n    NVIDIA = \"nvidia\",\n    NINETEEN_AI = \"nineteen_ai\",\n    AKASH_CHAT_API = \"akash_chat_api\",\n    LIVEPEER = \"livepeer\",\n    LETZAI = \"letzai\",\n    DEEPSEEK = \"deepseek\",\n    INFERA = \"infera\",\n    BEDROCK = \"bedrock\",\n    ATOMA = \"atoma\",\n    SECRETAI = \"secret_ai\",\n    NEARAI = \"nearai\",\n}\n\n/**\n * Represents the current state/context of a conversation\n */\nexport interface State {\n    /** ID of user who sent current message */\n    userId?: UUID;\n\n    /** ID of agent in conversation */\n    agentId?: UUID;\n\n    /** Agent's biography */\n    bio: string;\n\n    /** Agent's background lore */\n    lore: string;\n\n    /** Message handling directions */\n    messageDirections: string;\n\n    /** Post handling directions */\n    postDirections: string;\n\n    /** Current room/conversation ID */\n    roomId: UUID;\n\n    /** Optional agent name */\n    agentName?: string;\n\n    /** Optional message sender name */\n    senderName?: string;\n\n    /** String representation of conversation actors */\n    actors: string;\n\n    /** Optional array of actor objects */\n    actorsData?: Actor[];\n\n    /** Optional string representation of goals */\n    goals?: string;\n\n    /** Optional array of goal objects */\n    goalsData?: Goal[];\n\n    /** Recent message history as string */\n    recentMessages: string;\n\n    /** Recent message objects */\n    recentMessagesData: Memory[];\n\n    /** Optional valid action names */\n    actionNames?: string;\n\n    /** Optional action descriptions */\n    actions?: string;\n\n    /** Optional action objects */\n    actionsData?: Action[];\n\n    /** Optional action examples */\n    actionExamples?: string;\n\n    /** Optional provider descriptions */\n    providers?: string;\n\n    /** Optional response content */\n    responseData?: Content;\n\n    /** Optional recent interaction objects */\n    recentInteractionsData?: Memory[];\n\n    /** Optional recent interactions string */\n    recentInteractions?: string;\n\n    /** Optional formatted conversation */\n    formattedConversation?: string;\n\n    /** Optional formatted knowledge */\n    knowledge?: string;\n    /** Optional knowledge data */\n    knowledgeData?: KnowledgeItem[];\n    /** Optional knowledge data */\n    ragKnowledgeData?: RAGKnowledgeItem[];\n\n    /** Additional dynamic properties */\n    [key: string]: unknown;\n}\n\n/**\n * Represents a stored memory/message\n */\nexport interface Memory {\n    /** Optional unique identifier */\n    id?: UUID;\n\n    /** Associated user ID */\n    userId: UUID;\n\n    /** Associated agent ID */\n    agentId: UUID;\n\n    /** Optional creation timestamp */\n    createdAt?: number;\n\n    /** Memory content */\n    content: Content;\n\n    /** Optional embedding vector */\n    embedding?: number[];\n\n    /** Associated room ID */\n    roomId: UUID;\n\n    /** Whether memory is unique */\n    unique?: boolean;\n\n    /** Embedding similarity score */\n    similarity?: number;\n}\n\n/**\n * Example message for demonstration\n */\nexport interface MessageExample {\n    /** Associated user */\n    user: string;\n\n    /** Message content */\n    content: Content;\n}\n\n/**\n * Handler function type for processing messages\n */\nexport type Handler = (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    options?: { [key: string]: unknown },\n    callback?: HandlerCallback,\n) => Promise<unknown>;\n\n/**\n * Callback function type for handlers\n */\nexport type HandlerCallback = (\n    response: Content,\n    files?: any,\n) => Promise<Memory[]>;\n\n/**\n * Validator function type for actions/evaluators\n */\nexport type Validator = (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n) => Promise<boolean>;\n\n/**\n * Represents an action the agent can perform\n */\nexport interface Action {\n    /** Similar action descriptions */\n    similes: string[];\n\n    /** Detailed description */\n    description: string;\n\n    /** Example usages */\n    examples: ActionExample[][];\n\n    /** Handler function */\n    handler: Handler;\n\n    /** Action name */\n    name: string;\n\n    /** Validation function */\n    validate: Validator;\n\n    /** Whether to suppress the initial message when this action is used */\n    suppressInitialMessage?: boolean;\n}\n\n/**\n * Example for evaluating agent behavior\n */\nexport interface EvaluationExample {\n    /** Evaluation context */\n    context: string;\n\n    /** Example messages */\n    messages: Array<ActionExample>;\n\n    /** Expected outcome */\n    outcome: string;\n}\n\n/**\n * Evaluator for assessing agent responses\n */\nexport interface Evaluator {\n    /** Whether to always run */\n    alwaysRun?: boolean;\n\n    /** Detailed description */\n    description: string;\n\n    /** Similar evaluator descriptions */\n    similes: string[];\n\n    /** Example evaluations */\n    examples: EvaluationExample[];\n\n    /** Handler function */\n    handler: Handler;\n\n    /** Evaluator name */\n    name: string;\n\n    /** Validation function */\n    validate: Validator;\n}\n\n/**\n * Provider for external data/services\n */\nexport interface Provider {\n    /** Data retrieval function */\n    get: (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State,\n    ) => Promise<any>;\n}\n\n/**\n * Represents a relationship between users\n */\nexport interface Relationship {\n    /** Unique identifier */\n    id: UUID;\n\n    /** First user ID */\n    userA: UUID;\n\n    /** Second user ID */\n    userB: UUID;\n\n    /** Primary user ID */\n    userId: UUID;\n\n    /** Associated room ID */\n    roomId: UUID;\n\n    /** Relationship status */\n    status: string;\n\n    /** Optional creation timestamp */\n    createdAt?: string;\n}\n\n/**\n * Represents a user account\n */\nexport interface Account {\n    /** Unique identifier */\n    id: UUID;\n\n    /** Display name */\n    name: string;\n\n    /** Username */\n    username: string;\n\n    /** Optional additional details */\n    details?: { [key: string]: any };\n\n    /** Optional email */\n    email?: string;\n\n    /** Optional avatar URL */\n    avatarUrl?: string;\n}\n\n/**\n * Room participant with account details\n */\nexport interface Participant {\n    /** Unique identifier */\n    id: UUID;\n\n    /** Associated account */\n    account: Account;\n}\n\n/**\n * Represents a conversation room\n */\nexport interface Room {\n    /** Unique identifier */\n    id: UUID;\n\n    /** Room participants */\n    participants: Participant[];\n}\n\n/**\n * Represents a media attachment\n */\nexport type Media = {\n    /** Unique identifier */\n    id: string;\n\n    /** Media URL */\n    url: string;\n\n    /** Media title */\n    title: string;\n\n    /** Media source */\n    source: string;\n\n    /** Media description */\n    description: string;\n\n    /** Text content */\n    text: string;\n\n    /** Content type */\n    contentType?: string;\n};\n\n/**\n * Client instance\n */\nexport type ClientInstance = {\n    /** Client name */\n    // name: string;\n\n    /** Stop client connection */\n    stop: (runtime: IAgentRuntime) => Promise<unknown>;\n};\n\n/**\n * Client interface for platform connections\n */\nexport type Client = {\n    /** Client name */\n    name: string;\n\n    /** Client configuration */\n    config?: { [key: string]: any };\n\n    /** Start client connection */\n    start: (runtime: IAgentRuntime) => Promise<ClientInstance>;\n};\n\n/**\n * Database adapter initialization\n */\nexport type Adapter = {\n    /** Initialize the adapter */\n    init: (runtime: IAgentRuntime) => IDatabaseAdapter & IDatabaseCacheAdapter;\n};\n\n/**\n * Plugin for extending agent functionality\n */\nexport type Plugin = {\n    /** Plugin name */\n    name: string;\n\n    /** Plugin npm name */\n    npmName?: string;\n\n    /** Plugin configuration */\n    config?: { [key: string]: any };\n\n    /** Plugin description */\n    description: string;\n\n    /** Optional actions */\n    actions?: Action[];\n\n    /** Optional providers */\n    providers?: Provider[];\n\n    /** Optional evaluators */\n    evaluators?: Evaluator[];\n\n    /** Optional services */\n    services?: Service[];\n\n    /** Optional clients */\n    clients?: Client[];\n\n    /** Optional adapters */\n    adapters?: Adapter[];\n\n    /** Optional post charactor processor handler */\n    handlePostCharacterLoaded?: (char: Character) => Promise<Character>;\n};\n\nexport interface IAgentConfig {\n    [key: string]: string;\n}\n\nexport type TelemetrySettings = {\n    /**\n     * Enable or disable telemetry. Disabled by default while experimental.\n     */\n    isEnabled?: boolean;\n    /**\n     * Enable or disable input recording. Enabled by default.\n     *\n     * You might want to disable input recording to avoid recording sensitive\n     * information, to reduce data transfers, or to increase performance.\n     */\n    recordInputs?: boolean;\n    /**\n     * Enable or disable output recording. Enabled by default.\n     *\n     * You might want to disable output recording to avoid recording sensitive\n     * information, to reduce data transfers, or to increase performance.\n     */\n    recordOutputs?: boolean;\n    /**\n     * Identifier for this function. Used to group telemetry data by function.\n     */\n    functionId?: string;\n};\n\nexport interface ModelConfiguration {\n    temperature?: number;\n    maxOutputTokens?: number;\n    frequency_penalty?: number;\n    presence_penalty?: number;\n    maxInputTokens?: number;\n    experimental_telemetry?: TelemetrySettings;\n}\n\nexport type TemplateType = string | ((options: { state: State }) => string);\n\n/**\n * Configuration for an agent character\n */\nexport type Character = {\n    /** Optional unique identifier */\n    id?: UUID;\n\n    /** Character name */\n    name: string;\n\n    /** Optional username */\n    username?: string;\n\n    /** Optional email */\n    email?: string;\n\n    /** Optional system prompt */\n    system?: string;\n\n    /** Model provider to use */\n    modelProvider: ModelProviderName;\n\n    /** Image model provider to use, if different from modelProvider */\n    imageModelProvider?: ModelProviderName;\n\n    /** Image Vision model provider to use, if different from modelProvider */\n    imageVisionModelProvider?: ModelProviderName;\n\n    /** Optional model endpoint override */\n    modelEndpointOverride?: string;\n\n    /** Optional prompt templates */\n    templates?: {\n        goalsTemplate?: TemplateType;\n        factsTemplate?: TemplateType;\n        messageHandlerTemplate?: TemplateType;\n        shouldRespondTemplate?: TemplateType;\n        continueMessageHandlerTemplate?: TemplateType;\n        evaluationTemplate?: TemplateType;\n        twitterSearchTemplate?: TemplateType;\n        twitterActionTemplate?: TemplateType;\n        twitterPostTemplate?: TemplateType;\n        twitterMessageHandlerTemplate?: TemplateType;\n        twitterShouldRespondTemplate?: TemplateType;\n        twitterVoiceHandlerTemplate?: TemplateType;\n        instagramPostTemplate?: TemplateType;\n        instagramMessageHandlerTemplate?: TemplateType;\n        instagramShouldRespondTemplate?: TemplateType;\n        farcasterPostTemplate?: TemplateType;\n        lensPostTemplate?: TemplateType;\n        farcasterMessageHandlerTemplate?: TemplateType;\n        lensMessageHandlerTemplate?: TemplateType;\n        farcasterShouldRespondTemplate?: TemplateType;\n        lensShouldRespondTemplate?: TemplateType;\n        telegramMessageHandlerTemplate?: TemplateType;\n        telegramShouldRespondTemplate?: TemplateType;\n        telegramAutoPostTemplate?: string;\n        telegramPinnedMessageTemplate?: string;\n        discordAutoPostTemplate?: string;\n        discordAnnouncementHypeTemplate?: string;\n        discordVoiceHandlerTemplate?: TemplateType;\n        discordShouldRespondTemplate?: TemplateType;\n        discordMessageHandlerTemplate?: TemplateType;\n        slackMessageHandlerTemplate?: TemplateType;\n        slackShouldRespondTemplate?: TemplateType;\n        jeeterPostTemplate?: string;\n        jeeterSearchTemplate?: string;\n        jeeterInteractionTemplate?: string;\n        jeeterMessageHandlerTemplate?: string;\n        jeeterShouldRespondTemplate?: string;\n        devaPostTemplate?: string;\n    };\n\n    /** Character biography */\n    bio: string | string[];\n\n    /** Character background lore */\n    lore: string[];\n\n    /** Example messages */\n    messageExamples: MessageExample[][];\n\n    /** Example posts */\n    postExamples: string[];\n\n    /** Known topics */\n    topics: string[];\n\n    /** Character traits */\n    adjectives: string[];\n\n    /** Optional knowledge base */\n    knowledge?: (string | { path: string; shared?: boolean } | { directory: string; shared?: boolean })[];\n\n    /** Available plugins */\n    plugins: Plugin[];\n\n    /** Character Processor Plugins */\n    postProcessors?: Pick<Plugin, 'name' | 'description' | 'handlePostCharacterLoaded'>[];\n\n    /** Optional configuration */\n    settings?: {\n        secrets?: { [key: string]: string };\n        intiface?: boolean;\n        imageSettings?: {\n            steps?: number;\n            width?: number;\n            height?: number;\n            cfgScale?: number;\n            negativePrompt?: string;\n            numIterations?: number;\n            guidanceScale?: number;\n            seed?: number;\n            modelId?: string;\n            jobId?: string;\n            count?: number;\n            stylePreset?: string;\n            hideWatermark?: boolean;\n            safeMode?: boolean;\n        };\n        voice?: {\n            model?: string; // For VITS\n            url?: string; // Legacy VITS support\n            elevenlabs?: {\n                // New structured ElevenLabs config\n                voiceId: string;\n                model?: string;\n                stability?: string;\n                similarityBoost?: string;\n                style?: string;\n                useSpeakerBoost?: string;\n            };\n        };\n        model?: string;\n        modelConfig?: ModelConfiguration;\n        embeddingModel?: string;\n        chains?: {\n            evm?: any[];\n            solana?: any[];\n            [key: string]: any[];\n        };\n        transcription?: TranscriptionProvider;\n        ragKnowledge?: boolean;\n    };\n\n    /** Optional client-specific config */\n    clientConfig?: {\n        discord?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n            shouldRespondOnlyToMentions?: boolean;\n            messageSimilarityThreshold?: number;\n            isPartOfTeam?: boolean;\n            teamAgentIds?: string[];\n            teamLeaderId?: string;\n            teamMemberInterestKeywords?: string[];\n            allowedChannelIds?: string[];\n            autoPost?: {\n                enabled?: boolean;\n                monitorTime?: number;\n                inactivityThreshold?: number;\n                mainChannelId?: string;\n                announcementChannelIds?: string[];\n                minTimeBetweenPosts?: number;\n            };\n        };\n        telegram?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n            shouldRespondOnlyToMentions?: boolean;\n            shouldOnlyJoinInAllowedGroups?: boolean;\n            allowedGroupIds?: string[];\n            messageSimilarityThreshold?: number;\n            isPartOfTeam?: boolean;\n            teamAgentIds?: string[];\n            teamLeaderId?: string;\n            teamMemberInterestKeywords?: string[];\n            autoPost?: {\n                enabled?: boolean;\n                monitorTime?: number;\n                inactivityThreshold?: number;\n                mainChannelId?: string;\n                pinnedMessagesGroups?: string[];\n                minTimeBetweenPosts?: number;\n            };\n        };\n        slack?: {\n            shouldIgnoreBotMessages?: boolean;\n            shouldIgnoreDirectMessages?: boolean;\n        };\n        gitbook?: {\n            keywords?: {\n                projectTerms?: string[];\n                generalQueries?: string[];\n            };\n            documentTriggers?: string[];\n        };\n    };\n\n    /** Writing style guides */\n    style: {\n        all: string[];\n        chat: string[];\n        post: string[];\n    };\n\n    /** Optional Twitter profile */\n    twitterProfile?: {\n        id: string;\n        username: string;\n        screenName: string;\n        bio: string;\n        nicknames?: string[];\n    };\n\n    /** Optional Instagram profile */\n    instagramProfile?: {\n        id: string;\n        username: string;\n        bio: string;\n        nicknames?: string[];\n    };\n\n    /** Optional SimsAI profile */\n    simsaiProfile?: {\n        id: string;\n        username: string;\n        screenName: string;\n        bio: string;\n    };\n\n    /** Optional NFT prompt */\n    nft?: {\n        prompt: string;\n    };\n\n    /**Optinal Parent characters to inherit information from */\n    extends?: string[];\n\n    twitterSpaces?: TwitterSpaceDecisionOptions;\n};\n\nexport interface TwitterSpaceDecisionOptions {\n    maxSpeakers?: number;\n    topics?: string[];\n    typicalDurationMinutes?: number;\n    idleKickTimeoutMs?: number;\n    minIntervalBetweenSpacesMinutes?: number;\n    businessHoursOnly?: boolean;\n    randomChance?: number;\n    enableIdleMonitor?: boolean;\n    enableSttTts?: boolean;\n    enableRecording?: boolean;\n    voiceId?: string;\n    sttLanguage?: string;\n    speakerMaxDurationMs?: number;\n}\n\n/**\n * Interface for database operations\n */\nexport interface IDatabaseAdapter {\n    /** Database instance */\n    db: any;\n\n    /** Optional initialization */\n    init(): Promise<void>;\n\n    /** Close database connection */\n    close(): Promise<void>;\n\n    /** Get account by ID */\n    getAccountById(userId: UUID): Promise<Account | null>;\n\n    /** Create new account */\n    createAccount(account: Account): Promise<boolean>;\n\n    /** Get memories matching criteria */\n    getMemories(params: {\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n        tableName: string;\n        agentId: UUID;\n        start?: number;\n        end?: number;\n    }): Promise<Memory[]>;\n\n    getMemoryById(id: UUID): Promise<Memory | null>;\n\n    getMemoriesByIds(ids: UUID[], tableName?: string): Promise<Memory[]>;\n\n    getMemoriesByRoomIds(params: {\n        tableName: string;\n        agentId: UUID;\n        roomIds: UUID[];\n        limit?: number;\n    }): Promise<Memory[]>;\n\n    getCachedEmbeddings(params: {\n        query_table_name: string;\n        query_threshold: number;\n        query_input: string;\n        query_field_name: string;\n        query_field_sub_name: string;\n        query_match_count: number;\n    }): Promise<{ embedding: number[]; levenshtein_score: number }[]>;\n\n    log(params: {\n        body: { [key: string]: unknown };\n        userId: UUID;\n        roomId: UUID;\n        type: string;\n    }): Promise<void>;\n\n    getActorDetails(params: { roomId: UUID }): Promise<Actor[]>;\n\n    searchMemories(params: {\n        tableName: string;\n        agentId: UUID;\n        roomId: UUID;\n        embedding: number[];\n        match_threshold: number;\n        match_count: number;\n        unique: boolean;\n    }): Promise<Memory[]>;\n\n    updateGoalStatus(params: {\n        goalId: UUID;\n        status: GoalStatus;\n    }): Promise<void>;\n\n    searchMemoriesByEmbedding(\n        embedding: number[],\n        params: {\n            match_threshold?: number;\n            count?: number;\n            roomId?: UUID;\n            agentId?: UUID;\n            unique?: boolean;\n            tableName: string;\n        },\n    ): Promise<Memory[]>;\n\n    createMemory(\n        memory: Memory,\n        tableName: string,\n        unique?: boolean,\n    ): Promise<void>;\n\n    removeMemory(memoryId: UUID, tableName: string): Promise<void>;\n\n    removeAllMemories(roomId: UUID, tableName: string): Promise<void>;\n\n    countMemories(\n        roomId: UUID,\n        unique?: boolean,\n        tableName?: string,\n    ): Promise<number>;\n\n    getGoals(params: {\n        agentId: UUID;\n        roomId: UUID;\n        userId?: UUID | null;\n        onlyInProgress?: boolean;\n        count?: number;\n    }): Promise<Goal[]>;\n\n    updateGoal(goal: Goal): Promise<void>;\n\n    createGoal(goal: Goal): Promise<void>;\n\n    removeGoal(goalId: UUID): Promise<void>;\n\n    removeAllGoals(roomId: UUID): Promise<void>;\n\n    getRoom(roomId: UUID): Promise<UUID | null>;\n\n    createRoom(roomId?: UUID): Promise<UUID>;\n\n    removeRoom(roomId: UUID): Promise<void>;\n\n    getRoomsForParticipant(userId: UUID): Promise<UUID[]>;\n\n    getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]>;\n\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n\n    removeParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n\n    getParticipantsForAccount(userId: UUID): Promise<Participant[]>;\n\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n\n    getParticipantUserState(\n        roomId: UUID,\n        userId: UUID,\n    ): Promise<\"FOLLOWED\" | \"MUTED\" | null>;\n\n    setParticipantUserState(\n        roomId: UUID,\n        userId: UUID,\n        state: \"FOLLOWED\" | \"MUTED\" | null,\n    ): Promise<void>;\n\n    createRelationship(params: { userA: UUID; userB: UUID }): Promise<boolean>;\n\n    getRelationship(params: {\n        userA: UUID;\n        userB: UUID;\n    }): Promise<Relationship | null>;\n\n    getRelationships(params: { userId: UUID }): Promise<Relationship[]>;\n\n    getKnowledge(params: {\n        id?: UUID;\n        agentId: UUID;\n        limit?: number;\n        query?: string;\n        conversationContext?: string;\n    }): Promise<RAGKnowledgeItem[]>;\n\n    searchKnowledge(params: {\n        agentId: UUID;\n        embedding: Float32Array;\n        match_threshold: number;\n        match_count: number;\n        searchText?: string;\n    }): Promise<RAGKnowledgeItem[]>;\n\n    createKnowledge(knowledge: RAGKnowledgeItem): Promise<void>;\n    removeKnowledge(id: UUID): Promise<void>;\n    clearKnowledge(agentId: UUID, shared?: boolean): Promise<void>;\n}\n\nexport interface IDatabaseCacheAdapter {\n    getCache(params: {\n        agentId: UUID;\n        key: string;\n    }): Promise<string | undefined>;\n\n    setCache(params: {\n        agentId: UUID;\n        key: string;\n        value: string;\n    }): Promise<boolean>;\n\n    deleteCache(params: { agentId: UUID; key: string }): Promise<boolean>;\n}\n\nexport interface IMemoryManager {\n    runtime: IAgentRuntime;\n    tableName: string;\n    constructor: Function;\n\n    addEmbeddingToMemory(memory: Memory): Promise<Memory>;\n\n    getMemories(opts: {\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n        start?: number;\n        end?: number;\n    }): Promise<Memory[]>;\n\n    getCachedEmbeddings(\n        content: string,\n    ): Promise<{ embedding: number[]; levenshtein_score: number }[]>;\n\n    getMemoryById(id: UUID): Promise<Memory | null>;\n    getMemoriesByRoomIds(params: {\n        roomIds: UUID[];\n        limit?: number;\n    }): Promise<Memory[]>;\n    searchMemoriesByEmbedding(\n        embedding: number[],\n        opts: {\n            match_threshold?: number;\n            count?: number;\n            roomId: UUID;\n            unique?: boolean;\n        },\n    ): Promise<Memory[]>;\n\n    createMemory(memory: Memory, unique?: boolean): Promise<void>;\n\n    removeMemory(memoryId: UUID): Promise<void>;\n\n    removeAllMemories(roomId: UUID): Promise<void>;\n\n    countMemories(roomId: UUID, unique?: boolean): Promise<number>;\n}\n\nexport interface IRAGKnowledgeManager {\n    runtime: IAgentRuntime;\n    tableName: string;\n\n    getKnowledge(params: {\n        query?: string;\n        id?: UUID;\n        limit?: number;\n        conversationContext?: string;\n        agentId?: UUID;\n    }): Promise<RAGKnowledgeItem[]>;\n    createKnowledge(item: RAGKnowledgeItem): Promise<void>;\n    removeKnowledge(id: UUID): Promise<void>;\n    searchKnowledge(params: {\n        agentId: UUID;\n        embedding: Float32Array | number[];\n        match_threshold?: number;\n        match_count?: number;\n        searchText?: string;\n    }): Promise<RAGKnowledgeItem[]>;\n    clearKnowledge(shared?: boolean): Promise<void>;\n    processFile(file: {\n        path: string;\n        content: string;\n        type: \"pdf\" | \"md\" | \"txt\";\n        isShared: boolean;\n    }): Promise<void>;\n    cleanupDeletedKnowledgeFiles(): Promise<void>;\n    generateScopedId(path: string, isShared: boolean): UUID;\n}\n\nexport type CacheOptions = {\n    expires?: number;\n};\n\nexport enum CacheStore {\n    REDIS = \"redis\",\n    DATABASE = \"database\",\n    FILESYSTEM = \"filesystem\",\n}\n\nexport interface ICacheManager {\n    get<T = unknown>(key: string): Promise<T | undefined>;\n    set<T>(key: string, value: T, options?: CacheOptions): Promise<void>;\n    delete(key: string): Promise<void>;\n}\n\nexport abstract class Service {\n    private static instance: Service | null = null;\n\n    static get serviceType(): ServiceType {\n        throw new Error(\"Service must implement static serviceType getter\");\n    }\n\n    public static getInstance<T extends Service>(): T {\n        if (!Service.instance) {\n            Service.instance = new (this as any)();\n        }\n        return Service.instance as T;\n    }\n\n    get serviceType(): ServiceType {\n        return (this.constructor as typeof Service).serviceType;\n    }\n\n    // Add abstract initialize method that must be implemented by derived classes\n    abstract initialize(runtime: IAgentRuntime): Promise<void>;\n}\n\nexport interface IAgentRuntime {\n    // Properties\n    agentId: UUID;\n    serverUrl: string;\n    databaseAdapter: IDatabaseAdapter;\n    token: string | null;\n    modelProvider: ModelProviderName;\n    imageModelProvider: ModelProviderName;\n    imageVisionModelProvider: ModelProviderName;\n    character: Character;\n    providers: Provider[];\n    actions: Action[];\n    evaluators: Evaluator[];\n    plugins: Plugin[];\n\n    fetch?: typeof fetch | null;\n\n    messageManager: IMemoryManager;\n    descriptionManager: IMemoryManager;\n    documentsManager: IMemoryManager;\n    knowledgeManager: IMemoryManager;\n    ragKnowledgeManager: IRAGKnowledgeManager;\n    loreManager: IMemoryManager;\n\n    cacheManager: ICacheManager;\n\n    services: Map<ServiceType, Service>;\n    clients: ClientInstance[];\n\n    // verifiableInferenceAdapter?: IVerifiableInferenceAdapter | null;\n\n    initialize(): Promise<void>;\n\n    registerMemoryManager(manager: IMemoryManager): void;\n\n    getMemoryManager(name: string): IMemoryManager | null;\n\n    getService<T extends Service>(service: ServiceType): T | null;\n\n    registerService(service: Service): void;\n\n    getSetting(key: string): string | null;\n\n    // Methods\n    getConversationLength(): number;\n\n    processActions(\n        message: Memory,\n        responses: Memory[],\n        state?: State,\n        callback?: HandlerCallback,\n    ): Promise<void>;\n\n    evaluate(\n        message: Memory,\n        state?: State,\n        didRespond?: boolean,\n        callback?: HandlerCallback,\n    ): Promise<string[] | null>;\n\n    ensureParticipantExists(userId: UUID, roomId: UUID): Promise<void>;\n\n    ensureUserExists(\n        userId: UUID,\n        userName: string | null,\n        name: string | null,\n        source: string | null,\n    ): Promise<void>;\n\n    registerAction(action: Action): void;\n\n    ensureConnection(\n        userId: UUID,\n        roomId: UUID,\n        userName?: string,\n        userScreenName?: string,\n        source?: string,\n    ): Promise<void>;\n\n    ensureParticipantInRoom(userId: UUID, roomId: UUID): Promise<void>;\n\n    ensureRoomExists(roomId: UUID): Promise<void>;\n\n    composeState(\n        message: Memory,\n        additionalKeys?: { [key: string]: unknown },\n    ): Promise<State>;\n\n    updateRecentMessageState(state: State): Promise<State>;\n}\n\nexport interface IImageDescriptionService extends Service {\n    describeImage(\n        imageUrl: string,\n    ): Promise<{ title: string; description: string }>;\n}\n\nexport interface ITranscriptionService extends Service {\n    transcribeAttachment(audioBuffer: ArrayBuffer): Promise<string | null>;\n    transcribeAttachmentLocally(\n        audioBuffer: ArrayBuffer,\n    ): Promise<string | null>;\n    transcribe(audioBuffer: ArrayBuffer): Promise<string | null>;\n    transcribeLocally(audioBuffer: ArrayBuffer): Promise<string | null>;\n}\n\nexport interface IVideoService extends Service {\n    isVideoUrl(url: string): boolean;\n    fetchVideoInfo(url: string): Promise<Media>;\n    downloadVideo(videoInfo: Media): Promise<string>;\n    processVideo(url: string, runtime: IAgentRuntime): Promise<Media>;\n}\n\nexport interface ITextGenerationService extends Service {\n    initializeModel(): Promise<void>;\n    queueMessageCompletion(\n        context: string,\n        temperature: number,\n        stop: string[],\n        frequency_penalty: number,\n        presence_penalty: number,\n        max_tokens: number,\n    ): Promise<any>;\n    queueTextCompletion(\n        context: string,\n        temperature: number,\n        stop: string[],\n        frequency_penalty: number,\n        presence_penalty: number,\n        max_tokens: number,\n    ): Promise<string>;\n    getEmbeddingResponse(input: string): Promise<number[] | undefined>;\n}\n\nexport interface IBrowserService extends Service {\n    closeBrowser(): Promise<void>;\n    getPageContent(\n        url: string,\n        runtime: IAgentRuntime,\n    ): Promise<{ title: string; description: string; bodyContent: string }>;\n}\n\nexport interface ISpeechService extends Service {\n    getInstance(): ISpeechService;\n    generate(runtime: IAgentRuntime, text: string): Promise<Readable>;\n}\n\nexport interface IPdfService extends Service {\n    getInstance(): IPdfService;\n    convertPdfToText(pdfBuffer: Buffer): Promise<string>;\n}\n\nexport interface IAwsS3Service extends Service {\n    uploadFile(\n        imagePath: string,\n        subDirectory: string,\n        useSignedUrl: boolean,\n        expiresIn: number,\n    ): Promise<{\n        success: boolean;\n        url?: string;\n        error?: string;\n    }>;\n    generateSignedUrl(fileName: string, expiresIn: number): Promise<string>;\n}\n\nexport interface UploadIrysResult {\n    success: boolean;\n    url?: string;\n    error?: string;\n    data?: any;\n}\n\nexport interface DataIrysFetchedFromGQL {\n    success: boolean;\n    data: any;\n    error?: string;\n}\n\nexport interface GraphQLTag {\n    name: string;\n    values: any[];\n}\n\nexport enum IrysMessageType {\n    REQUEST = \"REQUEST\",\n    DATA_STORAGE = \"DATA_STORAGE\",\n    REQUEST_RESPONSE = \"REQUEST_RESPONSE\",\n}\n\nexport enum IrysDataType {\n    FILE = \"FILE\",\n    IMAGE = \"IMAGE\",\n    OTHER = \"OTHER\",\n}\n\nexport interface IrysTimestamp {\n    from: number;\n    to: number;\n}\n\nexport interface IIrysService extends Service {\n    getDataFromAnAgent(\n        agentsWalletPublicKeys: string[],\n        tags: GraphQLTag[],\n        timestamp: IrysTimestamp,\n    ): Promise<DataIrysFetchedFromGQL>;\n    workerUploadDataOnIrys(\n        data: any,\n        dataType: IrysDataType,\n        messageType: IrysMessageType,\n        serviceCategory: string[],\n        protocol: string[],\n        validationThreshold: number[],\n        minimumProviders: number[],\n        testProvider: boolean[],\n        reputation: number[],\n    ): Promise<UploadIrysResult>;\n    providerUploadDataOnIrys(\n        data: any,\n        dataType: IrysDataType,\n        serviceCategory: string[],\n        protocol: string[],\n    ): Promise<UploadIrysResult>;\n}\n\nexport interface ITeeLogService extends Service {\n    getInstance(): ITeeLogService;\n    log(\n        agentId: string,\n        roomId: string,\n        userId: string,\n        type: string,\n        content: string,\n    ): Promise<boolean>;\n}\n\nexport enum ServiceType {\n    IMAGE_DESCRIPTION = \"image_description\",\n    TRANSCRIPTION = \"transcription\",\n    VIDEO = \"video\",\n    TEXT_GENERATION = \"text_generation\",\n    BROWSER = \"browser\",\n    SPEECH_GENERATION = \"speech_generation\",\n    PDF = \"pdf\",\n    INTIFACE = \"intiface\",\n    AWS_S3 = \"aws_s3\",\n    BUTTPLUG = \"buttplug\",\n    SLACK = \"slack\",\n    VERIFIABLE_LOGGING = \"verifiable_logging\",\n    IRYS = \"irys\",\n    TEE_LOG = \"tee_log\",\n    GOPLUS_SECURITY = \"goplus_security\",\n    WEB_SEARCH = \"web_search\",\n    EMAIL_AUTOMATION = \"email_automation\",\n    NKN_CLIENT_SERVICE = \"nkn_client_service\",\n}\n\nexport enum LoggingLevel {\n    DEBUG = \"debug\",\n    VERBOSE = \"verbose\",\n    NONE = \"none\",\n}\n\nexport type KnowledgeItem = {\n    id: UUID;\n    content: Content;\n};\n\nexport interface RAGKnowledgeItem {\n    id: UUID;\n    agentId: UUID;\n    content: {\n        text: string;\n        metadata?: {\n            isMain?: boolean;\n            isChunk?: boolean;\n            originalId?: UUID;\n            chunkIndex?: number;\n            source?: string;\n            type?: string;\n            isShared?: boolean;\n            [key: string]: unknown;\n        };\n    };\n    embedding?: Float32Array;\n    createdAt?: number;\n    similarity?: number;\n    score?: number;\n}\n\nexport interface ActionResponse {\n    like: boolean;\n    retweet: boolean;\n    quote?: boolean;\n    reply?: boolean;\n}\n\nexport interface ISlackService extends Service {\n    client: any;\n}\n\nexport enum TokenizerType {\n    Auto = \"auto\",\n    TikToken = \"tiktoken\",\n}\n\nexport enum TranscriptionProvider {\n    OpenAI = \"openai\",\n    Deepgram = \"deepgram\",\n    Local = \"local\",\n}\n\nexport enum ActionTimelineType {\n    ForYou = \"foryou\",\n    Following = \"following\",\n}\nexport enum KnowledgeScope {\n    SHARED = \"shared\",\n    PRIVATE = \"private\",\n}\n\nexport enum CacheKeyPrefix {\n    KNOWLEDGE = \"knowledge\",\n}\n\nexport interface DirectoryItem {\n    directory: string;\n    shared?: boolean;\n}\n\nexport interface ChunkRow {\n    id: string;\n    // Add other properties if needed\n}\n","import settings from \"./settings.ts\";\nimport {\n    type EmbeddingModelSettings,\n    type ImageModelSettings,\n    ModelClass,\n    ModelProviderName,\n    type Models,\n    type ModelSettings,\n} from \"./types.ts\";\n\nexport const models: Models = {\n    [ModelProviderName.OPENAI]: {\n        endpoint: settings.OPENAI_API_URL || \"https://api.openai.com/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_OPENAI_MODEL || \"gpt-4o-mini\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_OPENAI_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_OPENAI_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.EMBEDDING]: {\n                name:\n                    settings.EMBEDDING_OPENAI_MODEL || \"text-embedding-3-small\",\n                dimensions: 1536,\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.IMAGE_OPENAI_MODEL || \"dall-e-3\",\n            },\n        },\n    },\n    [ModelProviderName.ETERNALAI]: {\n        endpoint: settings.ETERNALAI_URL,\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.ETERNALAI_MODEL ||\n                    \"neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.ETERNALAI_MODEL ||\n                    \"neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.ETERNALAI_MODEL ||\n                    \"neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n        },\n    },\n    [ModelProviderName.ANTHROPIC]: {\n        endpoint: settings.ANTHROPIC_API_URL || \"https://api.anthropic.com/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_ANTHROPIC_MODEL || \"claude-3-haiku-20240307\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 4096,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_ANTHROPIC_MODEL ||\n                    \"claude-3-5-sonnet-20241022\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 4096,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_ANTHROPIC_MODEL ||\n                    \"claude-3-5-sonnet-20241022\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 4096,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.CLAUDE_VERTEX]: {\n        endpoint: settings.ANTHROPIC_API_URL || \"https://api.anthropic.com/v1\", // TODO: check\n        model: {\n            [ModelClass.SMALL]: {\n                name: \"claude-3-5-sonnet-20241022\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: \"claude-3-5-sonnet-20241022\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: \"claude-3-opus-20240229\",\n                stop: [],\n                maxInputTokens: 200000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.GROK]: {\n        endpoint: \"https://api.x.ai/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_GROK_MODEL || \"grok-2-1212\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_GROK_MODEL || \"grok-2-1212\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_GROK_MODEL || \"grok-2-1212\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: settings.EMBEDDING_GROK_MODEL || \"grok-2-1212\", // not sure about this one\n            },\n        },\n    },\n    [ModelProviderName.GROQ]: {\n        endpoint: \"https://api.groq.com/openai/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_GROQ_MODEL || \"llama-3.1-8b-instant\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8000,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_GROQ_MODEL || \"llama-3.3-70b-versatile\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8000,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_GROQ_MODEL || \"llama-3.2-90b-vision-preview\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8000,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: settings.EMBEDDING_GROQ_MODEL || \"llama-3.1-8b-instant\",\n            },\n        },\n    },\n    [ModelProviderName.LLAMACLOUD]: {\n        endpoint: \"https://api.llamacloud.com/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: \"meta-llama/Llama-3.2-3B-Instruct-Turbo\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: \"meta-llama-3.1-8b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: \"meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: \"togethercomputer/m2-bert-80M-32k-retrieval\",\n            },\n            [ModelClass.IMAGE]: {\n                name: \"black-forest-labs/FLUX.1-schnell\",\n                steps: 4,\n            },\n        },\n    },\n    [ModelProviderName.TOGETHER]: {\n        endpoint: \"https://api.together.ai/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: \"meta-llama/Llama-3.2-3B-Instruct-Turbo\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: \"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: \"meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: \"togethercomputer/m2-bert-80M-32k-retrieval\",\n            },\n            [ModelClass.IMAGE]: {\n                name: \"black-forest-labs/FLUX.1-schnell\",\n                steps: 4,\n            },\n        },\n    },\n    [ModelProviderName.LLAMALOCAL]: {\n        model: {\n            [ModelClass.SMALL]: {\n                name: \"NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true\",\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: \"NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true\", // TODO: ?download=true\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: \"NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true\", // \"RichardErkhov/NousResearch_-_Meta-Llama-3.1-70B-gguf\", // TODO:\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: \"togethercomputer/m2-bert-80M-32k-retrieval\",\n            },\n        },\n    },\n    [ModelProviderName.LMSTUDIO]: {\n        endpoint: settings.LMSTUDIO_SERVER_URL || \"http://localhost:1234/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_LMSTUDIO_MODEL || settings.LMSTUDIO_MODEL || \"hermes-3-llama-3.1-8b\",\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_LMSTUDIO_MODEL || settings.LMSTUDIO_MODEL || \"hermes-3-llama-3.1-8b\",\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_LMSTUDIO_MODEL || settings.LMSTUDIO_MODEL || \"hermes-3-llama-3.1-8b\",\n                stop: [\"<|eot_id|>\", \"<|eom_id|>\"],\n                maxInputTokens: 32768,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.GOOGLE]: {\n        endpoint: \"https://generativelanguage.googleapis.com\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_GOOGLE_MODEL ||\n                    settings.GOOGLE_MODEL ||\n                    \"gemini-2.0-flash-exp\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_GOOGLE_MODEL ||\n                    settings.GOOGLE_MODEL ||\n                    \"gemini-2.0-flash-exp\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_GOOGLE_MODEL ||\n                    settings.GOOGLE_MODEL ||\n                    \"gemini-2.0-flash-exp\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name:\n                    settings.EMBEDDING_GOOGLE_MODEL ||\n                    settings.GOOGLE_MODEL ||\n                    \"text-embedding-004\",\n            },\n        },\n    },\n    [ModelProviderName.MISTRAL]: {\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_MISTRAL_MODEL ||\n                    settings.MISTRAL_MODEL ||\n                    \"mistral-small-latest\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_MISTRAL_MODEL ||\n                    settings.MISTRAL_MODEL ||\n                    \"mistral-large-latest\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_MISTRAL_MODEL ||\n                    settings.MISTRAL_MODEL ||\n                    \"mistral-large-latest\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.REDPILL]: {\n        endpoint: \"https://api.red-pill.ai/v1\",\n        // Available models: https://docs.red-pill.ai/get-started/supported-models\n        // To test other models, change the models below\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_REDPILL_MODEL ||\n                    settings.REDPILL_MODEL ||\n                    \"gpt-4o-mini\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_REDPILL_MODEL ||\n                    settings.REDPILL_MODEL ||\n                    \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_REDPILL_MODEL ||\n                    settings.REDPILL_MODEL ||\n                    \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n\n            [ModelClass.EMBEDDING]: {\n                name: \"text-embedding-3-small\",\n            },\n        },\n    },\n    [ModelProviderName.OPENROUTER]: {\n        endpoint: \"https://openrouter.ai/api/v1\",\n        // Available models: https://openrouter.ai/models\n        // To test other models, change the models below\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_OPENROUTER_MODEL ||\n                    settings.OPENROUTER_MODEL ||\n                    \"nousresearch/hermes-3-llama-3.1-405b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_OPENROUTER_MODEL ||\n                    settings.OPENROUTER_MODEL ||\n                    \"nousresearch/hermes-3-llama-3.1-405b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_OPENROUTER_MODEL ||\n                    settings.OPENROUTER_MODEL ||\n                    \"nousresearch/hermes-3-llama-3.1-405b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: \"text-embedding-3-small\",\n            },\n        },\n    },\n    [ModelProviderName.OLLAMA]: {\n        endpoint: settings.OLLAMA_SERVER_URL || \"http://localhost:11434\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_OLLAMA_MODEL ||\n                    settings.OLLAMA_MODEL ||\n                    \"llama3.2\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_OLLAMA_MODEL ||\n                    settings.OLLAMA_MODEL ||\n                    \"hermes3\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_OLLAMA_MODEL ||\n                    settings.OLLAMA_MODEL ||\n                    \"hermes3:70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.7,\n            },\n\n            [ModelClass.EMBEDDING]: {\n                name: settings.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\",\n                dimensions: 1024,\n            },\n        },\n    },\n    [ModelProviderName.HEURIST]: {\n        endpoint: \"https://llm-gateway.heurist.xyz\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_HEURIST_MODEL ||\n                    \"meta-llama/llama-3-70b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_HEURIST_MODEL ||\n                    \"meta-llama/llama-3-70b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_HEURIST_MODEL ||\n                    \"meta-llama/llama-3.3-70b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.HEURIST_IMAGE_MODEL || \"FLUX.1-dev\",\n                steps: 20,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: \"BAAI/bge-large-en-v1.5\",\n                dimensions: 1024,\n            },\n        },\n    },\n    [ModelProviderName.GALADRIEL]: {\n        endpoint: \"https://api.galadriel.com/v1/verified\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_GALADRIEL_MODEL || \"gpt-4o-mini\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_GALADRIEL_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_GALADRIEL_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n        },\n    },\n    [ModelProviderName.FAL]: {\n        endpoint: \"https://api.fal.ai/v1\",\n        model: {\n            [ModelClass.IMAGE]: { name: \"fal-ai/flux-lora\", steps: 28 },\n        },\n    },\n    [ModelProviderName.GAIANET]: {\n        endpoint: settings.GAIANET_SERVER_URL,\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.GAIANET_MODEL ||\n                    settings.SMALL_GAIANET_MODEL ||\n                    \"llama3b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.GAIANET_MODEL ||\n                    settings.MEDIUM_GAIANET_MODEL ||\n                    \"llama\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.GAIANET_MODEL ||\n                    settings.LARGE_GAIANET_MODEL ||\n                    \"qwen72b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                repetition_penalty: 0.4,\n                temperature: 0.7,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: settings.GAIANET_EMBEDDING_MODEL || \"nomic-embed\",\n                dimensions: 768,\n            },\n        },\n    },\n    [ModelProviderName.ALI_BAILIAN]: {\n        endpoint: \"https://dashscope.aliyuncs.com/compatible-mode/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: \"qwen-turbo\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: \"qwen-plus\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: \"qwen-max\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.IMAGE]: {\n                name: \"wanx-v1\",\n            },\n        },\n    },\n    [ModelProviderName.VOLENGINE]: {\n        endpoint:\n            settings.VOLENGINE_API_URL ||\n            \"https://open.volcengineapi.com/api/v3/\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_VOLENGINE_MODEL ||\n                    settings.VOLENGINE_MODEL ||\n                    \"doubao-lite-128k\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_VOLENGINE_MODEL ||\n                    settings.VOLENGINE_MODEL ||\n                    \"doubao-pro-128k\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_VOLENGINE_MODEL ||\n                    settings.VOLENGINE_MODEL ||\n                    \"doubao-pro-256k\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.4,\n                presence_penalty: 0.4,\n                temperature: 0.6,\n            },\n            [ModelClass.EMBEDDING]: {\n                name: settings.VOLENGINE_EMBEDDING_MODEL || \"doubao-embedding\",\n            },\n        },\n    },\n    [ModelProviderName.NANOGPT]: {\n        endpoint: \"https://nano-gpt.com/api/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_NANOGPT_MODEL || \"gpt-4o-mini\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_NANOGPT_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_NANOGPT_MODEL || \"gpt-4o\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n            },\n        },\n    },\n    [ModelProviderName.HYPERBOLIC]: {\n        endpoint: \"https://api.hyperbolic.xyz/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_HYPERBOLIC_MODEL ||\n                    settings.HYPERBOLIC_MODEL ||\n                    \"meta-llama/Llama-3.2-3B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_HYPERBOLIC_MODEL ||\n                    settings.HYPERBOLIC_MODEL ||\n                    \"meta-llama/Meta-Llama-3.1-70B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_HYPERBOLIC_MODEL ||\n                    settings.HYPERBOLIC_MODEL ||\n                    \"meta-llama/Meta-Llama-3.1-405-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.IMAGE_HYPERBOLIC_MODEL || \"FLUX.1-dev\",\n            },\n        },\n    },\n    [ModelProviderName.VENICE]: {\n        endpoint: \"https://api.venice.ai/api/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_VENICE_MODEL || \"llama-3.3-70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_VENICE_MODEL || \"llama-3.3-70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_VENICE_MODEL || \"llama-3.1-405b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.IMAGE_VENICE_MODEL || \"fluently-xl\",\n            },\n        },\n    },\n    [ModelProviderName.NVIDIA]: {\n        endpoint: \"https://integrate.api.nvidia.com/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_NVIDIA_MODEL || \"meta/llama-3.2-3b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_NVIDIA_MODEL || \"meta/llama-3.3-70b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_NVIDIA_MODEL || \"meta/llama-3.1-405b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n        },\n    },\n    [ModelProviderName.NINETEEN_AI]: {\n        endpoint: \"https://api.nineteen.ai/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_NINETEEN_AI_MODEL ||\n                    \"unsloth/Llama-3.2-3B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_NINETEEN_AI_MODEL ||\n                    \"unsloth/Meta-Llama-3.1-8B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_NINETEEN_AI_MODEL ||\n                    \"hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.IMAGE]: {\n                name:\n                    settings.IMAGE_NINETEEN_AI_MODEL ||\n                    \"dataautogpt3/ProteusV0.4-Lightning\",\n            },\n        },\n    },\n    [ModelProviderName.AKASH_CHAT_API]: {\n        endpoint: \"https://chatapi.akash.network/api/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_AKASH_CHAT_API_MODEL ||\n                    \"Meta-Llama-3-2-3B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_AKASH_CHAT_API_MODEL ||\n                    \"Meta-Llama-3-3-70B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_AKASH_CHAT_API_MODEL ||\n                    \"Meta-Llama-3-1-405B-Instruct-FP8\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n        },\n    },\n    [ModelProviderName.LIVEPEER]: {\n        endpoint: settings.LIVEPEER_GATEWAY_URL || \"http://gateway.test-gateway\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_LIVEPEER_MODEL ||\n                    \"meta-llama/Meta-Llama-3.1-8B-Instruct\",\n                stop: [],\n                maxInputTokens: 8000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_LIVEPEER_MODEL ||\n                    \"meta-llama/Meta-Llama-3.1-8B-Instruct\",\n                stop: [],\n                maxInputTokens: 8000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_LIVEPEER_MODEL ||\n                    \"meta-llama/Meta-Llama-3.1-8B-Instruct\",\n                stop: [],\n                maxInputTokens: 8000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n            [ModelClass.IMAGE]: {\n                name:\n                    settings.IMAGE_LIVEPEER_MODEL || \"ByteDance/SDXL-Lightning\",\n            },\n        },\n    },\n    [ModelProviderName.INFERA]: {\n        endpoint: \"https://api.infera.org\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_INFERA_MODEL || \"llama3.2:3b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_INFERA_MODEL || \"mistral-nemo:latest\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_INFERA_MODEL || \"mistral-small:latest\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0,\n            },\n        },\n    },\n    [ModelProviderName.DEEPSEEK]: {\n        endpoint: settings.DEEPSEEK_API_URL || \"https://api.deepseek.com\",\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_DEEPSEEK_MODEL || \"deepseek-chat\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_DEEPSEEK_MODEL || \"deepseek-chat\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_DEEPSEEK_MODEL || \"deepseek-chat\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.BEDROCK]: {\n        model: {\n            [ModelClass.SMALL]: {\n                name: settings.SMALL_BEDROCK_MODEL || \"amazon.nova-micro-v1:0\",\n                maxInputTokens: 128000,\n                maxOutputTokens: 5120,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n                stop: [],\n            },\n            [ModelClass.MEDIUM]: {\n                name: settings.MEDIUM_BEDROCK_MODEL || \"amazon.nova-lite-v1:0\",\n                maxInputTokens: 128000,\n                maxOutputTokens: 5120,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n                stop: [],\n            },\n            [ModelClass.LARGE]: {\n                name: settings.LARGE_BEDROCK_MODEL || \"amazon.nova-pro-v1:0\",\n                maxInputTokens: 128000,\n                maxOutputTokens: 5120,\n                frequency_penalty: 0.0,\n                presence_penalty: 0.0,\n                temperature: 0.6,\n                stop: [],\n            },\n            [ModelClass.EMBEDDING]: {\n                name:\n                    settings.EMBEDDING_BEDROCK_MODEL ||\n                    \"amazon.titan-embed-text-v1\",\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.IMAGE_BEDROCK_MODEL || \"amazon.nova-canvas-v1:0\",\n            },\n        },\n    },\n    [ModelProviderName.ATOMA]: {\n        endpoint: settings.ATOMA_API_URL || \"https://api.atoma.network/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_ATOMA_MODEL ||\n                    \"meta-llama/Llama-3.3-70B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_ATOMA_MODEL ||\n                    \"meta-llama/Llama-3.3-70B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_ATOMA_MODEL ||\n                    \"meta-llama/Llama-3.3-70B-Instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.SECRETAI]: {\n        endpoint: settings.SECRET_AI_URL || \"https://ai1.scrtlabs.com:21434\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_SECRET_AI_MODEL ||\n                    \"deepseek-r1:70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_SECRET_AI_MODEL ||\n                    \"deepseek-r1:70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_SECRET_AI_MODEL ||\n                    \"deepseek-r1:70b\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.7,\n            },\n        },\n    },\n    [ModelProviderName.NEARAI]: {\n        endpoint: settings.NEARAI_API_URL || \"https://api.near.ai/v1\",\n        model: {\n            [ModelClass.SMALL]: {\n                name:\n                    settings.SMALL_NEARAI_MODEL ||\n                    settings.NEARAI_MODEL ||\n                    \"fireworks::accounts/fireworks/models/llama-v3p2-3b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.MEDIUM]: {\n                name:\n                    settings.MEDIUM_NEARAI_MODEL ||\n                    settings.NEARAI_MODEL ||\n                    \"fireworks::accounts/fireworks/models/llama-v3p1-70b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.LARGE]: {\n                name:\n                    settings.LARGE_NEARAI_MODEL ||\n                    settings.NEARAI_MODEL ||\n                    \"fireworks::accounts/fireworks/models/llama-v3p1-405b-instruct\",\n                stop: [],\n                maxInputTokens: 128000,\n                maxOutputTokens: 8192,\n                temperature: 0.6,\n            },\n            [ModelClass.IMAGE]: {\n                name: settings.IMAGE_NEARAI_MODEL || \"fireworks::accounts/fireworks/models/playground-v2-5-1024px-aesthetic\",\n            },\n        },\n    },\n};\n\nexport function getModelSettings(\n    provider: ModelProviderName,\n    type: ModelClass\n): ModelSettings | undefined {\n    return models[provider]?.model[type] as ModelSettings | undefined;\n}\n\nexport function getImageModelSettings(\n    provider: ModelProviderName\n): ImageModelSettings | undefined {\n    return models[provider]?.model[ModelClass.IMAGE] as\n        | ImageModelSettings\n        | undefined;\n}\n\nexport function getEmbeddingModelSettings(\n    provider: ModelProviderName\n): EmbeddingModelSettings | undefined {\n    return models[provider]?.model[ModelClass.EMBEDDING] as\n        | EmbeddingModelSettings\n        | undefined;\n}\n\nexport function getEndpoint(provider: ModelProviderName) {\n    return models[provider].endpoint;\n}\n","import path from \"node:path\";\nimport { fileURLToPath } from \"url\";\nimport { FlagEmbedding, EmbeddingModel } from \"fastembed\";\nimport elizaLogger from \"./logger\";\n\nclass LocalEmbeddingModelManager {\n    private static instance: LocalEmbeddingModelManager | null;\n    private model: FlagEmbedding | null = null;\n    private initPromise: Promise<void> | null = null;\n    private initializationLock = false;\n\n    private constructor() {}\n\n    public static getInstance(): LocalEmbeddingModelManager {\n        if (!LocalEmbeddingModelManager.instance) {\n            LocalEmbeddingModelManager.instance =\n                new LocalEmbeddingModelManager();\n        }\n        return LocalEmbeddingModelManager.instance;\n    }\n\n    private async getRootPath(): Promise<string> {\n        const __filename = fileURLToPath(import.meta.url);\n        const __dirname = path.dirname(__filename);\n        const rootPath = path.resolve(__dirname, \"..\");\n        return rootPath.includes(\"/eliza/\")\n            ? rootPath.split(\"/eliza/\")[0] + \"/eliza/\"\n            : path.resolve(__dirname, \"..\");\n    }\n\n    public async initialize(): Promise<void> {\n        // If already initialized, return immediately\n        if (this.model) {\n            return;\n        }\n\n        // If initialization is in progress, wait for it\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Use a lock to prevent multiple simultaneous initializations\n        if (this.initializationLock) {\n            // Wait for current initialization to complete\n            while (this.initializationLock) {\n                await new Promise((resolve) => setTimeout(resolve, 100));\n            }\n            return;\n        }\n\n        this.initializationLock = true;\n\n        try {\n            this.initPromise = this.initializeModel();\n            await this.initPromise;\n        } finally {\n            this.initializationLock = false;\n            this.initPromise = null;\n        }\n    }\n\n    private async initializeModel(): Promise<void> {\n        const isNode =\n            typeof process !== \"undefined\" &&\n            process.versions != null &&\n            process.versions.node != null;\n\n        if (!isNode) {\n            throw new Error(\"Local embedding not supported in browser\");\n        }\n\n        try {\n            const fs = await import(\"fs\");\n            const cacheDir = (await this.getRootPath()) + \"/cache/\";\n\n            if (!fs.existsSync(cacheDir)) {\n                fs.mkdirSync(cacheDir, { recursive: true });\n            }\n\n            elizaLogger.debug(\"Initializing BGE embedding model...\");\n\n            this.model = await FlagEmbedding.init({\n                cacheDir: cacheDir,\n                model: EmbeddingModel.BGESmallENV15,\n                maxLength: 512,\n            });\n\n            elizaLogger.debug(\"BGE model initialized successfully\");\n        } catch (error) {\n            elizaLogger.error(\"Failed to initialize BGE model:\", error);\n            throw error;\n        }\n    }\n\n    public async generateEmbedding(input: string): Promise<number[]> {\n        if (!this.model) {\n            await this.initialize();\n        }\n\n        if (!this.model) {\n            throw new Error(\"Failed to initialize model\");\n        }\n\n        try {\n            // Let fastembed handle tokenization internally\n            const embedding = await this.model.queryEmbed(input);\n            // Debug the raw embedding - uncomment if debugging embeddings\n            // elizaLogger.debug(\"Raw embedding from BGE:\", {\n            //     type: typeof embedding,\n            //     isArray: Array.isArray(embedding),\n            //     dimensions: Array.isArray(embedding)\n            //         ? embedding.length\n            //         : \"not an array\",\n            //     sample: Array.isArray(embedding)\n            //         ? embedding.slice(0, 5)\n            //         : embedding,\n            // });\n            return this.processEmbedding(embedding);\n        } catch (error) {\n            elizaLogger.error(\"Embedding generation failed:\", error);\n            throw error;\n        }\n    }\n\n    private processEmbedding(embedding: number[]): number[] {\n        let finalEmbedding: number[];\n\n        if (\n            ArrayBuffer.isView(embedding) &&\n            embedding.constructor === Float32Array\n        ) {\n            finalEmbedding = Array.from(embedding);\n        } else if (\n            Array.isArray(embedding) &&\n            ArrayBuffer.isView(embedding[0]) &&\n            embedding[0].constructor === Float32Array\n        ) {\n            finalEmbedding = Array.from(embedding[0]);\n        } else if (Array.isArray(embedding)) {\n            finalEmbedding = embedding;\n        } else {\n            throw new Error(`Unexpected embedding format: ${typeof embedding}`);\n        }\n\n        finalEmbedding = finalEmbedding.map((n) => Number(n));\n\n        if (!Array.isArray(finalEmbedding) || finalEmbedding[0] === undefined) {\n            throw new Error(\n                \"Invalid embedding format: must be an array starting with a number\"\n            );\n        }\n\n        if (finalEmbedding.length !== 384) {\n            elizaLogger.warn(\n                `Unexpected embedding dimension: ${finalEmbedding.length}`\n            );\n        }\n\n        return finalEmbedding;\n    }\n\n    public async reset(): Promise<void> {\n        if (this.model) {\n            // Add any cleanup logic here if needed\n            this.model = null;\n        }\n        this.initPromise = null;\n        this.initializationLock = false;\n    }\n\n    // For testing purposes\n    public static resetInstance(): void {\n        if (LocalEmbeddingModelManager.instance) {\n            LocalEmbeddingModelManager.instance.reset();\n            LocalEmbeddingModelManager.instance = null;\n        }\n    }\n}\n\nexport default LocalEmbeddingModelManager;\n","import { getEmbeddingModelSettings, getEndpoint } from \"./models.ts\";\nimport { type IAgentRuntime, ModelProviderName } from \"./types.ts\";\nimport settings from \"./settings.ts\";\nimport elizaLogger from \"./logger.ts\";\nimport LocalEmbeddingModelManager from \"./localembeddingManager.ts\";\n\ninterface EmbeddingOptions {\n    model: string;\n    endpoint: string;\n    apiKey?: string;\n    length?: number;\n    isOllama?: boolean;\n    dimensions?: number;\n    provider?: string;\n}\n\nexport const EmbeddingProvider = {\n    OpenAI: \"OpenAI\",\n    Ollama: \"Ollama\",\n    GaiaNet: \"GaiaNet\",\n    Heurist: \"Heurist\",\n    BGE: \"BGE\",\n} as const;\n\nexport type EmbeddingProviderType =\n    (typeof EmbeddingProvider)[keyof typeof EmbeddingProvider];\n\nexport type EmbeddingConfig = {\n    readonly dimensions: number;\n    readonly model: string;\n    readonly provider: EmbeddingProviderType;\n};\n\nexport const getEmbeddingConfig = (): EmbeddingConfig => ({\n    dimensions:\n        settings.USE_OPENAI_EMBEDDING?.toLowerCase() === \"true\"\n            ? getEmbeddingModelSettings(ModelProviderName.OPENAI).dimensions\n            : settings.USE_OLLAMA_EMBEDDING?.toLowerCase() === \"true\"\n              ? getEmbeddingModelSettings(ModelProviderName.OLLAMA).dimensions\n              : settings.USE_GAIANET_EMBEDDING?.toLowerCase() === \"true\"\n                ? getEmbeddingModelSettings(ModelProviderName.GAIANET)\n                      .dimensions\n                : settings.USE_HEURIST_EMBEDDING?.toLowerCase() === \"true\"\n                  ? getEmbeddingModelSettings(ModelProviderName.HEURIST)\n                        .dimensions\n                  : 384, // BGE\n    model:\n        settings.USE_OPENAI_EMBEDDING?.toLowerCase() === \"true\"\n            ? getEmbeddingModelSettings(ModelProviderName.OPENAI).name\n            : settings.USE_OLLAMA_EMBEDDING?.toLowerCase() === \"true\"\n              ? getEmbeddingModelSettings(ModelProviderName.OLLAMA).name\n              : settings.USE_GAIANET_EMBEDDING?.toLowerCase() === \"true\"\n                ? getEmbeddingModelSettings(ModelProviderName.GAIANET).name\n                : settings.USE_HEURIST_EMBEDDING?.toLowerCase() === \"true\"\n                  ? getEmbeddingModelSettings(ModelProviderName.HEURIST).name\n                  : \"BGE-small-en-v1.5\",\n    provider:\n        settings.USE_OPENAI_EMBEDDING?.toLowerCase() === \"true\"\n            ? \"OpenAI\"\n            : settings.USE_OLLAMA_EMBEDDING?.toLowerCase() === \"true\"\n              ? \"Ollama\"\n              : settings.USE_GAIANET_EMBEDDING?.toLowerCase() === \"true\"\n                ? \"GaiaNet\"\n                : settings.USE_HEURIST_EMBEDDING?.toLowerCase() === \"true\"\n                  ? \"Heurist\"\n                  : \"BGE\",\n});\n\nasync function getRemoteEmbedding(\n    input: string,\n    options: EmbeddingOptions\n): Promise<number[]> {\n    // Ensure endpoint ends with /v1 for OpenAI\n    const baseEndpoint = options.endpoint.endsWith(\"/v1\")\n        ? options.endpoint\n        : `${options.endpoint}${options.isOllama ? \"/v1\" : \"\"}`;\n\n    // Construct full URL\n    const fullUrl = `${baseEndpoint}/embeddings`;\n\n    const requestOptions = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...(options.apiKey\n                ? {\n                      Authorization: `Bearer ${options.apiKey}`,\n                  }\n                : {}),\n        },\n        body: JSON.stringify({\n            input,\n            model: options.model,\n            dimensions:\n                options.dimensions ||\n                options.length ||\n                getEmbeddingConfig().dimensions, // Prefer dimensions, fallback to length\n        }),\n    };\n\n    try {\n        const response = await fetch(fullUrl, requestOptions);\n\n        if (!response.ok) {\n            elizaLogger.error(\"API Response:\", await response.text()); // Debug log\n            throw new Error(\n                `Embedding API Error: ${response.status} ${response.statusText}`\n            );\n        }\n\n        interface EmbeddingResponse {\n            data: Array<{ embedding: number[] }>;\n        }\n\n        const data: EmbeddingResponse = await response.json();\n        return data?.data?.[0].embedding;\n    } catch (e) {\n        elizaLogger.error(\"Full error details:\", e);\n        throw e;\n    }\n}\n\nexport function getEmbeddingType(runtime: IAgentRuntime): \"local\" | \"remote\" {\n    const isNode =\n        typeof process !== \"undefined\" &&\n        process.versions != null &&\n        process.versions.node != null;\n\n    // Use local embedding if:\n    // - Running in Node.js\n    // - Not using OpenAI provider\n    // - Not forcing OpenAI embeddings\n    const isLocal =\n        isNode &&\n        runtime.character.modelProvider !== ModelProviderName.OPENAI &&\n        runtime.character.modelProvider !== ModelProviderName.GAIANET &&\n        runtime.character.modelProvider !== ModelProviderName.HEURIST &&\n        !settings.USE_OPENAI_EMBEDDING;\n\n    return isLocal ? \"local\" : \"remote\";\n}\n\nexport function getEmbeddingZeroVector(): number[] {\n    let embeddingDimension = 384; // Default BGE dimension\n\n    if (settings.USE_OPENAI_EMBEDDING?.toLowerCase() === \"true\") {\n        embeddingDimension = getEmbeddingModelSettings(\n            ModelProviderName.OPENAI\n        ).dimensions; // OpenAI dimension\n    } else if (settings.USE_OLLAMA_EMBEDDING?.toLowerCase() === \"true\") {\n        embeddingDimension = getEmbeddingModelSettings(\n            ModelProviderName.OLLAMA\n        ).dimensions; // Ollama mxbai-embed-large dimension\n    } else if (settings.USE_GAIANET_EMBEDDING?.toLowerCase() === \"true\") {\n        embeddingDimension = getEmbeddingModelSettings(\n            ModelProviderName.GAIANET\n        ).dimensions; // GaiaNet dimension\n    } else if (settings.USE_HEURIST_EMBEDDING?.toLowerCase() === \"true\") {\n        embeddingDimension = getEmbeddingModelSettings(\n            ModelProviderName.HEURIST\n        ).dimensions; // Heurist dimension\n    }\n\n    return Array(embeddingDimension).fill(0);\n}\n\n/**\n * Gets embeddings from a remote API endpoint.  Falls back to local BGE/384\n *\n * @param {string} input - The text to generate embeddings for\n * @param {EmbeddingOptions} options - Configuration options including:\n *   - model: The model name to use\n *   - endpoint: Base API endpoint URL\n *   - apiKey: Optional API key for authentication\n *   - isOllama: Whether this is an Ollama endpoint\n *   - dimensions: Desired embedding dimensions\n * @param {IAgentRuntime} runtime - The agent runtime context\n * @returns {Promise<number[]>} Array of embedding values\n * @throws {Error} If the API request fails\n */\n\nexport async function embed(runtime: IAgentRuntime, input: string) {\n    elizaLogger.debug(\"Embedding request:\", {\n        modelProvider: runtime.character.modelProvider,\n        useOpenAI: process.env.USE_OPENAI_EMBEDDING,\n        input: input?.slice(0, 50) + \"...\",\n        inputType: typeof input,\n        inputLength: input?.length,\n        isString: typeof input === \"string\",\n        isEmpty: !input,\n    });\n\n    // Validate input\n    if (!input || typeof input !== \"string\" || input.trim().length === 0) {\n        elizaLogger.warn(\"Invalid embedding input:\", {\n            input,\n            type: typeof input,\n            length: input?.length,\n        });\n        return []; // Return empty embedding array\n    }\n\n    // Check cache first\n    const cachedEmbedding = await retrieveCachedEmbedding(runtime, input);\n    if (cachedEmbedding) return cachedEmbedding;\n\n    const config = getEmbeddingConfig();\n    const isNode = typeof process !== \"undefined\" && process.versions?.node;\n\n    // Determine which embedding path to use\n    if (config.provider === EmbeddingProvider.OpenAI) {\n        return await getRemoteEmbedding(input, {\n            model: config.model,\n            endpoint: settings.OPENAI_API_URL || \"https://api.openai.com/v1\",\n            apiKey: settings.OPENAI_API_KEY,\n            dimensions: config.dimensions,\n        });\n    }\n\n    if (config.provider === EmbeddingProvider.Ollama) {\n        return await getRemoteEmbedding(input, {\n            model: config.model,\n            endpoint:\n                runtime.character.modelEndpointOverride ||\n                getEndpoint(ModelProviderName.OLLAMA),\n            isOllama: true,\n            dimensions: config.dimensions,\n        });\n    }\n\n    if (config.provider == EmbeddingProvider.GaiaNet) {\n        return await getRemoteEmbedding(input, {\n            model: config.model,\n            endpoint:\n                runtime.character.modelEndpointOverride ||\n                getEndpoint(ModelProviderName.GAIANET) ||\n                settings.SMALL_GAIANET_SERVER_URL ||\n                settings.MEDIUM_GAIANET_SERVER_URL ||\n                settings.LARGE_GAIANET_SERVER_URL,\n            apiKey: settings.GAIANET_API_KEY || runtime.token,\n            dimensions: config.dimensions,\n        });\n    }\n\n    if (config.provider === EmbeddingProvider.Heurist) {\n        return await getRemoteEmbedding(input, {\n            model: config.model,\n            endpoint: getEndpoint(ModelProviderName.HEURIST),\n            apiKey: runtime.token,\n            dimensions: config.dimensions,\n        });\n    }\n\n    // BGE - try local first if in Node\n    if (isNode) {\n        try {\n            return await getLocalEmbedding(input);\n        } catch (error) {\n            elizaLogger.warn(\n                \"Local embedding failed, falling back to remote\",\n                error\n            );\n        }\n    }\n\n    // Fallback to remote override\n    return await getRemoteEmbedding(input, {\n        model: config.model,\n        endpoint:\n            runtime.character.modelEndpointOverride ||\n            getEndpoint(runtime.character.modelProvider),\n        apiKey: runtime.token,\n        dimensions: config.dimensions,\n    });\n\n    async function getLocalEmbedding(input: string): Promise<number[]> {\n        elizaLogger.debug(\"DEBUG - Inside getLocalEmbedding function\");\n\n        try {\n            const embeddingManager = LocalEmbeddingModelManager.getInstance();\n            return await embeddingManager.generateEmbedding(input);\n        } catch (error) {\n            elizaLogger.error(\"Local embedding failed:\", error);\n            throw error;\n        }\n    }\n\n    async function retrieveCachedEmbedding(\n        runtime: IAgentRuntime,\n        input: string\n    ) {\n        if (!input) {\n            elizaLogger.log(\"No input to retrieve cached embedding for\");\n            return null;\n        }\n\n        const similaritySearchResult =\n            await runtime.messageManager.getCachedEmbeddings(input);\n        if (similaritySearchResult.length > 0) {\n            return similaritySearchResult[0].embedding;\n        }\n        return null;\n    }\n}\n","import { names, uniqueNamesGenerator } from \"unique-names-generator\";\nimport type { ActionExample, Evaluator } from \"./types.ts\";\nimport { stringArrayFooter } from \"./parsing.ts\";\n\n/**\n * Template used for the evaluation generateText.\n */\nexport const evaluationTemplate =\n    `TASK: Based on the conversation and conditions, determine which evaluation functions are appropriate to call.\nExamples:\n{{evaluatorExamples}}\n\nINSTRUCTIONS: You are helping me to decide which appropriate functions to call based on the conversation between {{senderName}} and {{agentName}}.\n\n{{recentMessages}}\n\nEvaluator Functions:\n{{evaluators}}\n\nTASK: Based on the most recent conversation, determine which evaluators functions are appropriate to call to call.\nInclude the name of evaluators that are relevant and should be called in the array\nAvailable evaluator names to include are {{evaluatorNames}}\n` + stringArrayFooter;\n\n/**\n * Formats the names of evaluators into a comma-separated list, each enclosed in single quotes.\n * @param evaluators - An array of evaluator objects.\n * @returns A string that concatenates the names of all evaluators, each enclosed in single quotes and separated by commas.\n */\nexport function formatEvaluatorNames(evaluators: Evaluator[]) {\n    return evaluators\n        .map((evaluator: Evaluator) => `'${evaluator.name}'`)\n        .join(\",\\n\");\n}\n\n/**\n * Formats evaluator details into a string, including both the name and description of each evaluator.\n * @param evaluators - An array of evaluator objects.\n * @returns A string that concatenates the name and description of each evaluator, separated by a colon and a newline character.\n */\nexport function formatEvaluators(evaluators: Evaluator[]) {\n    return evaluators\n        .map(\n            (evaluator: Evaluator) =>\n                `'${evaluator.name}: ${evaluator.description}'`\n        )\n        .join(\",\\n\");\n}\n\n/**\n * Formats evaluator examples into a readable string, replacing placeholders with generated names.\n * @param evaluators - An array of evaluator objects, each containing examples to format.\n * @returns A string that presents each evaluator example in a structured format, including context, messages, and outcomes, with placeholders replaced by generated names.\n */\nexport function formatEvaluatorExamples(evaluators: Evaluator[]) {\n    return evaluators\n        .map((evaluator) => {\n            return evaluator.examples\n                .map((example) => {\n                    const exampleNames = Array.from({ length: 5 }, () =>\n                        uniqueNamesGenerator({ dictionaries: [names] })\n                    );\n\n                    let formattedContext = example.context;\n                    let formattedOutcome = example.outcome;\n\n                    exampleNames.forEach((name, index) => {\n                        const placeholder = `{{user${index + 1}}}`;\n                        formattedContext = formattedContext.replaceAll(\n                            placeholder,\n                            name\n                        );\n                        formattedOutcome = formattedOutcome.replaceAll(\n                            placeholder,\n                            name\n                        );\n                    });\n\n                    const formattedMessages = example.messages\n                        .map((message: ActionExample) => {\n                            let messageString = `${message.user}: ${message.content.text}`;\n                            exampleNames.forEach((name, index) => {\n                                const placeholder = `{{user${index + 1}}}`;\n                                messageString = messageString.replaceAll(\n                                    placeholder,\n                                    name\n                                );\n                            });\n                            return (\n                                messageString +\n                                (message.content.action\n                                    ? ` (${message.content.action})`\n                                    : \"\")\n                            );\n                        })\n                        .join(\"\\n\");\n\n                    return `Context:\\n${formattedContext}\\n\\nMessages:\\n${formattedMessages}\\n\\nOutcome:\\n${formattedOutcome}`;\n                })\n                .join(\"\\n\\n\");\n        })\n        .join(\"\\n\\n\");\n}\n\n/**\n * Generates a string summarizing the descriptions of each evaluator example.\n * @param evaluators - An array of evaluator objects, each containing examples.\n * @returns A string that summarizes the descriptions for each evaluator example, formatted with the evaluator name, example number, and description.\n */\nexport function formatEvaluatorExampleDescriptions(evaluators: Evaluator[]) {\n    return evaluators\n        .map((evaluator) =>\n            evaluator.examples\n                .map(\n                    (_example, index) =>\n                        `${evaluator.name} Example ${index + 1}: ${evaluator.description}`\n                )\n                .join(\"\\n\")\n        )\n        .join(\"\\n\\n\");\n}\n","import { createAnthropic } from \"@ai-sdk/anthropic\";\nimport { createGoogleGenerativeAI } from \"@ai-sdk/google\";\nimport { createMistral } from \"@ai-sdk/mistral\";\nimport { createGroq } from \"@ai-sdk/groq\";\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { bedrock } from \"@ai-sdk/amazon-bedrock\";\nimport {\n    generateObject as aiGenerateObject,\n    generateText as aiGenerateText,\n    type CoreTool,\n    type GenerateObjectResult,\n    type StepResult as AIStepResult,\n} from \"ai\";\nimport { Buffer } from \"buffer\";\nimport { createOllama } from \"ollama-ai-provider\";\nimport OpenAI from \"openai\";\nimport { encodingForModel, type TiktokenModel } from \"js-tiktoken\";\n// import { AutoTokenizer } from \"@huggingface/transformers\";\nimport Together from \"together-ai\";\nimport type { ZodSchema } from \"zod\";\nimport { elizaLogger } from \"./index.ts\";\nimport {\n    models,\n    getModelSettings,\n    getImageModelSettings,\n    getEndpoint,\n} from \"./models.ts\";\nimport {\n    parseBooleanFromText,\n    parseJsonArrayFromText,\n    parseJSONObjectFromText,\n    parseShouldRespondFromText,\n    parseActionResponseFromText,\n} from \"./parsing.ts\";\nimport settings from \"./settings.ts\";\nimport {\n    type Content,\n    type IAgentRuntime,\n    type IImageDescriptionService,\n    type ITextGenerationService,\n    ModelClass,\n    ModelProviderName,\n    ServiceType,\n    type ActionResponse,\n    // type IVerifiableInferenceAdapter,\n    // type VerifiableInferenceOptions,\n    // type VerifiableInferenceResult,\n    //VerifiableInferenceProvider,\n    type TelemetrySettings,\n    TokenizerType,\n} from \"./types.ts\";\nimport { fal } from \"@fal-ai/client\";\n\nimport BigNumber from \"bignumber.js\";\nimport { createPublicClient, http } from \"viem\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\n\ntype Tool = CoreTool<any, any>;\ntype StepResult = AIStepResult<any>;\n\n// Simplify the types to avoid deep recursion\ntype GenerationResult = GenerateObjectResult<unknown>;\n\ninterface ProviderOptions {\n    runtime: IAgentRuntime;\n    provider: ModelProviderName;\n    model: string;\n    apiKey: string;\n    schema?: ZodSchema;\n    schemaName?: string;\n    schemaDescription?: string;\n    mode?: \"auto\" | \"json\" | \"tool\";\n    modelOptions: ModelSettings;\n    modelClass: ModelClass;\n    context: string;\n}\n\n/**\n * Trims the provided text context to a specified token limit using a tokenizer model and type.\n *\n * The function dynamically determines the truncation method based on the tokenizer settings\n * provided by the runtime. If no tokenizer settings are defined, it defaults to using the\n * TikToken truncation method with the \"gpt-4o\" model.\n *\n * @async\n * @function trimTokens\n * @param {string} context - The text to be tokenized and trimmed.\n * @param {number} maxTokens - The maximum number of tokens allowed after truncation.\n * @param {IAgentRuntime} runtime - The runtime interface providing tokenizer settings.\n *\n * @returns {Promise<string>} A promise that resolves to the trimmed text.\n *\n * @throws {Error} Throws an error if the runtime settings are invalid or missing required fields.\n *\n * @example\n * const trimmedText = await trimTokens(\"This is an example text\", 50, runtime);\n * console.log(trimmedText); // Output will be a truncated version of the input text.\n */\nexport async function trimTokens(\n    context: string,\n    maxTokens: number,\n    runtime: IAgentRuntime\n) {\n    if (!context) return \"\";\n    if (maxTokens <= 0) throw new Error(\"maxTokens must be positive\");\n\n    const tokenizerModel = runtime.getSetting(\"TOKENIZER_MODEL\");\n    const tokenizerType = runtime.getSetting(\"TOKENIZER_TYPE\");\n\n    if (!tokenizerModel || !tokenizerType) {\n        // Default to TikToken truncation using the \"gpt-4o\" model if tokenizer settings are not defined\n        return truncateTiktoken(\"gpt-4o\", context, maxTokens);\n    }\n\n    // Choose the truncation method based on tokenizer type\n    // if (tokenizerType === TokenizerType.Auto) {\n    //     return truncateAuto(tokenizerModel, context, maxTokens);\n    // }\n\n    if (tokenizerType === TokenizerType.TikToken) {\n        return truncateTiktoken(\n            tokenizerModel as TiktokenModel,\n            context,\n            maxTokens\n        );\n    }\n\n    elizaLogger.warn(`Unsupported tokenizer type: ${tokenizerType}`);\n    return truncateTiktoken(\"gpt-4o\", context, maxTokens);\n}\n\n// async function truncateAuto(\n//     modelPath: string,\n//     context: string,\n//     maxTokens: number\n// ) {\n//     try {\n//         const tokenizer = await AutoTokenizer.from_pretrained(modelPath);\n//         const tokens = tokenizer.encode(context);\n\n//         // If already within limits, return unchanged\n//         if (tokens.length <= maxTokens) {\n//             return context;\n//         }\n\n//         // Keep the most recent tokens by slicing from the end\n//         const truncatedTokens = tokens.slice(-maxTokens);\n\n//         // Decode back to text - js-tiktoken decode() returns a string directly\n//         return tokenizer.decode(truncatedTokens);\n//     } catch (error) {\n//         elizaLogger.error(\"Error in trimTokens:\", error);\n//         // Return truncated string if tokenization fails\n//         return context.slice(-maxTokens * 4); // Rough estimate of 4 chars per token\n//     }\n// }\n\nasync function truncateTiktoken(\n    model: TiktokenModel,\n    context: string,\n    maxTokens: number\n) {\n    try {\n        const encoding = encodingForModel(model);\n\n        // Encode the text into tokens\n        const tokens = encoding.encode(context);\n\n        // If already within limits, return unchanged\n        if (tokens.length <= maxTokens) {\n            return context;\n        }\n\n        // Keep the most recent tokens by slicing from the end\n        const truncatedTokens = tokens.slice(-maxTokens);\n\n        // Decode back to text - js-tiktoken decode() returns a string directly\n        return encoding.decode(truncatedTokens);\n    } catch (error) {\n        elizaLogger.error(\"Error in trimTokens:\", error);\n        // Return truncated string if tokenization fails\n        return context.slice(-maxTokens * 4); // Rough estimate of 4 chars per token\n    }\n}\n\n/**\n * Get OnChain EternalAI System Prompt\n * @returns System Prompt\n */\nasync function getOnChainEternalAISystemPrompt(\n    runtime: IAgentRuntime\n): Promise<string> | undefined {\n    const agentId = runtime.getSetting(\"ETERNALAI_AGENT_ID\");\n    const providerUrl = runtime.getSetting(\"ETERNALAI_RPC_URL\");\n    const contractAddress = runtime.getSetting(\n        \"ETERNALAI_AGENT_CONTRACT_ADDRESS\"\n    );\n    if (agentId && providerUrl && contractAddress) {\n        // get on-chain system-prompt\n        const contractABI = [\n            {\n                inputs: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"_agentId\",\n                        type: \"uint256\",\n                    },\n                ],\n                name: \"getAgentSystemPrompt\",\n                outputs: [\n                    { internalType: \"bytes[]\", name: \"\", type: \"bytes[]\" },\n                ],\n                stateMutability: \"view\",\n                type: \"function\",\n            },\n        ];\n\n        const publicClient = createPublicClient({\n            transport: http(providerUrl),\n        });\n\n        try {\n            const validAddress: `0x${string}` =\n                contractAddress as `0x${string}`;\n            const result = await publicClient.readContract({\n                address: validAddress,\n                abi: contractABI,\n                functionName: \"getAgentSystemPrompt\",\n                args: [new BigNumber(agentId)],\n            });\n            if (result) {\n                elizaLogger.info(\"on-chain system-prompt response\", result[0]);\n                const value = result[0].toString().replace(\"0x\", \"\");\n                const content = Buffer.from(value, \"hex\").toString(\"utf-8\");\n                elizaLogger.info(\"on-chain system-prompt\", content);\n                return await fetchEternalAISystemPrompt(runtime, content);\n            } else {\n                return undefined;\n            }\n        } catch (error) {\n            elizaLogger.error(error);\n            elizaLogger.error(\"err\", error);\n        }\n    }\n    return undefined;\n}\n\n/**\n * Fetch EternalAI System Prompt\n * @returns System Prompt\n */\nasync function fetchEternalAISystemPrompt(\n    runtime: IAgentRuntime,\n    content: string\n): Promise<string> | undefined {\n    const IPFS = \"ipfs://\";\n    const containsSubstring: boolean = content.includes(IPFS);\n    if (containsSubstring) {\n        const lightHouse = content.replace(\n            IPFS,\n            \"https://gateway.lighthouse.storage/ipfs/\"\n        );\n        elizaLogger.info(\"fetch lightHouse\", lightHouse);\n        const responseLH = await fetch(lightHouse, {\n            method: \"GET\",\n        });\n        elizaLogger.info(\"fetch lightHouse resp\", responseLH);\n        if (responseLH.ok) {\n            const data = await responseLH.text();\n            return data;\n        } else {\n            const gcs = content.replace(\n                IPFS,\n                \"https://cdn.eternalai.org/upload/\"\n            );\n            elizaLogger.info(\"fetch gcs\", gcs);\n            const responseGCS = await fetch(gcs, {\n                method: \"GET\",\n            });\n            elizaLogger.info(\"fetch lightHouse gcs\", responseGCS);\n            if (responseGCS.ok) {\n                const data = await responseGCS.text();\n                return data;\n            } else {\n                throw new Error(\"invalid on-chain system prompt\");\n            }\n        }\n    } else {\n        return content;\n    }\n}\n\n/**\n * Gets the Cloudflare Gateway base URL for a specific provider if enabled\n * @param runtime The runtime environment\n * @param provider The model provider name\n * @returns The Cloudflare Gateway base URL if enabled, undefined otherwise\n */\nfunction getCloudflareGatewayBaseURL(\n    runtime: IAgentRuntime,\n    provider: string\n): string | undefined {\n    const isCloudflareEnabled =\n        runtime.getSetting(\"CLOUDFLARE_GW_ENABLED\") === \"true\";\n    const cloudflareAccountId = runtime.getSetting(\"CLOUDFLARE_AI_ACCOUNT_ID\");\n    const cloudflareGatewayId = runtime.getSetting(\"CLOUDFLARE_AI_GATEWAY_ID\");\n\n    elizaLogger.debug(\"Cloudflare Gateway Configuration:\", {\n        isEnabled: isCloudflareEnabled,\n        hasAccountId: !!cloudflareAccountId,\n        hasGatewayId: !!cloudflareGatewayId,\n        provider: provider,\n    });\n\n    if (!isCloudflareEnabled) {\n        elizaLogger.debug(\"Cloudflare Gateway is not enabled\");\n        return undefined;\n    }\n\n    if (!cloudflareAccountId) {\n        elizaLogger.warn(\n            \"Cloudflare Gateway is enabled but CLOUDFLARE_AI_ACCOUNT_ID is not set\"\n        );\n        return undefined;\n    }\n\n    if (!cloudflareGatewayId) {\n        elizaLogger.warn(\n            \"Cloudflare Gateway is enabled but CLOUDFLARE_AI_GATEWAY_ID is not set\"\n        );\n        return undefined;\n    }\n\n    const baseURL = `https://gateway.ai.cloudflare.com/v1/${cloudflareAccountId}/${cloudflareGatewayId}/${provider.toLowerCase()}`;\n    elizaLogger.info(\"Using Cloudflare Gateway:\", {\n        provider,\n        baseURL,\n        accountId: cloudflareAccountId,\n        gatewayId: cloudflareGatewayId,\n    });\n\n    return baseURL;\n}\n\n/**\n * Send a message to the model for a text generateText - receive a string back and parse how you'd like\n * @param opts - The options for the generateText request.\n * @param opts.context The context of the message to be completed.\n * @param opts.stop A list of strings to stop the generateText at.\n * @param opts.model The model to use for generateText.\n * @param opts.frequency_penalty The frequency penalty to apply to the generateText.\n * @param opts.presence_penalty The presence penalty to apply to the generateText.\n * @param opts.temperature The temperature to apply to the generateText.\n * @param opts.max_context_length The maximum length of the context to apply to the generateText.\n * @returns The completed message.\n */\n\nexport async function generateText({\n    runtime,\n    context,\n    modelClass,\n    tools = {},\n    onStepFinish,\n    maxSteps = 1,\n    stop,\n    customSystemPrompt,\n}: // verifiableInference = process.env.VERIFIABLE_INFERENCE_ENABLED === \"true\",\n// verifiableInferenceOptions,\n{\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n    tools?: Record<string, Tool>;\n    onStepFinish?: (event: StepResult) => Promise<void> | void;\n    maxSteps?: number;\n    stop?: string[];\n    customSystemPrompt?: string;\n    // verifiableInference?: boolean;\n    // verifiableInferenceAdapter?: IVerifiableInferenceAdapter;\n    // verifiableInferenceOptions?: VerifiableInferenceOptions;\n}): Promise<string> {\n    if (!context) {\n        console.error(\"generateText context is empty\");\n        return \"\";\n    }\n\n    elizaLogger.log(\"Generating text...\");\n\n    elizaLogger.info(\"Generating text with options:\", {\n        modelProvider: runtime.modelProvider,\n        model: modelClass,\n        // verifiableInference,\n    });\n    elizaLogger.log(\"Using provider:\", runtime.modelProvider);\n    // If verifiable inference is requested and adapter is provided, use it\n    // if (verifiableInference && runtime.verifiableInferenceAdapter) {\n    //     elizaLogger.log(\n    //         \"Using verifiable inference adapter:\",\n    //         runtime.verifiableInferenceAdapter\n    //     );\n    //     try {\n    //         const result: VerifiableInferenceResult =\n    //             await runtime.verifiableInferenceAdapter.generateText(\n    //                 context,\n    //                 modelClass,\n    //                 verifiableInferenceOptions\n    //             );\n    //         elizaLogger.log(\"Verifiable inference result:\", result);\n    //         // Verify the proof\n    //         const isValid =\n    //             await runtime.verifiableInferenceAdapter.verifyProof(result);\n    //         if (!isValid) {\n    //             throw new Error(\"Failed to verify inference proof\");\n    //         }\n\n    //         return result.text;\n    //     } catch (error) {\n    //         elizaLogger.error(\"Error in verifiable inference:\", error);\n    //         throw error;\n    //     }\n    // }\n\n    const provider = runtime.modelProvider;\n    elizaLogger.debug(\"Provider settings:\", {\n        provider,\n        hasRuntime: !!runtime,\n        runtimeSettings: {\n            CLOUDFLARE_GW_ENABLED: runtime.getSetting(\"CLOUDFLARE_GW_ENABLED\"),\n            CLOUDFLARE_AI_ACCOUNT_ID: runtime.getSetting(\n                \"CLOUDFLARE_AI_ACCOUNT_ID\"\n            ),\n            CLOUDFLARE_AI_GATEWAY_ID: runtime.getSetting(\n                \"CLOUDFLARE_AI_GATEWAY_ID\"\n            ),\n        },\n    });\n\n    const endpoint =\n        runtime.character.modelEndpointOverride || getEndpoint(provider);\n    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);\n    let model = modelSettings.name;\n\n    // allow character.json settings => secrets to override models\n    // FIXME: add MODEL_MEDIUM support\n    switch (provider) {\n        // if runtime.getSetting(\"LLAMACLOUD_MODEL_LARGE\") is true and modelProvider is LLAMACLOUD, then use the large model\n        case ModelProviderName.LLAMACLOUD:\n            {\n                switch (modelClass) {\n                    case ModelClass.LARGE:\n                        {\n                            model =\n                                runtime.getSetting(\"LLAMACLOUD_MODEL_LARGE\") ||\n                                model;\n                        }\n                        break;\n                    case ModelClass.SMALL:\n                        {\n                            model =\n                                runtime.getSetting(\"LLAMACLOUD_MODEL_SMALL\") ||\n                                model;\n                        }\n                        break;\n                }\n            }\n            break;\n        case ModelProviderName.TOGETHER:\n            {\n                switch (modelClass) {\n                    case ModelClass.LARGE:\n                        {\n                            model =\n                                runtime.getSetting(\"TOGETHER_MODEL_LARGE\") ||\n                                model;\n                        }\n                        break;\n                    case ModelClass.SMALL:\n                        {\n                            model =\n                                runtime.getSetting(\"TOGETHER_MODEL_SMALL\") ||\n                                model;\n                        }\n                        break;\n                }\n            }\n            break;\n        case ModelProviderName.OPENROUTER:\n            {\n                switch (modelClass) {\n                    case ModelClass.LARGE:\n                        {\n                            model =\n                                runtime.getSetting(\"LARGE_OPENROUTER_MODEL\") ||\n                                model;\n                        }\n                        break;\n                    case ModelClass.SMALL:\n                        {\n                            model =\n                                runtime.getSetting(\"SMALL_OPENROUTER_MODEL\") ||\n                                model;\n                        }\n                        break;\n                }\n            }\n            break;\n    }\n\n    elizaLogger.info(\"Selected model:\", model);\n\n    const modelConfiguration = runtime.character?.settings?.modelConfig;\n    const temperature =\n        modelConfiguration?.temperature || modelSettings.temperature;\n    const frequency_penalty =\n        modelConfiguration?.frequency_penalty ||\n        modelSettings.frequency_penalty;\n    const presence_penalty =\n        modelConfiguration?.presence_penalty || modelSettings.presence_penalty;\n    const max_context_length =\n        modelConfiguration?.maxInputTokens || modelSettings.maxInputTokens;\n    const max_response_length =\n        modelConfiguration?.maxOutputTokens || modelSettings.maxOutputTokens;\n    const experimental_telemetry =\n        modelConfiguration?.experimental_telemetry ||\n        modelSettings.experimental_telemetry;\n\n    const apiKey = runtime.token;\n\n    try {\n        elizaLogger.debug(\n            `Trimming context to max length of ${max_context_length} tokens.`\n        );\n\n        context = await trimTokens(context, max_context_length, runtime);\n\n        let response: string;\n\n        const _stop = stop || modelSettings.stop;\n        elizaLogger.debug(\n            `Using provider: ${provider}, model: ${model}, temperature: ${temperature}, max response length: ${max_response_length}`\n        );\n\n        switch (provider) {\n            // OPENAI & LLAMACLOUD shared same structure.\n            case ModelProviderName.OPENAI:\n            case ModelProviderName.ALI_BAILIAN:\n            case ModelProviderName.VOLENGINE:\n            case ModelProviderName.LLAMACLOUD:\n            case ModelProviderName.NANOGPT:\n            case ModelProviderName.HYPERBOLIC:\n            case ModelProviderName.TOGETHER:\n            case ModelProviderName.NINETEEN_AI:\n            case ModelProviderName.AKASH_CHAT_API:\n            case ModelProviderName.LMSTUDIO:\n            case ModelProviderName.NEARAI: {\n                elizaLogger.debug(\n                    \"Initializing OpenAI model with Cloudflare check\"\n                );\n                const baseURL =\n                    getCloudflareGatewayBaseURL(runtime, \"openai\") || endpoint;\n\n                //elizaLogger.debug(\"OpenAI baseURL result:\", { baseURL });\n                const openai = createOpenAI({\n                    apiKey,\n                    baseURL,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: openaiResponse } = await aiGenerateText({\n                    model: openai.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = openaiResponse;\n                console.log(\"Received response from OpenAI model.\");\n                break;\n            }\n\n            case ModelProviderName.ETERNALAI: {\n                elizaLogger.debug(\"Initializing EternalAI model.\");\n                const openai = createOpenAI({\n                    apiKey,\n                    baseURL: endpoint,\n                    fetch: async (\n                        input: RequestInfo | URL,\n                        init?: RequestInit\n                    ): Promise<Response> => {\n                        const url =\n                            typeof input === \"string\"\n                                ? input\n                                : input.toString();\n                        const chain_id =\n                            runtime.getSetting(\"ETERNALAI_CHAIN_ID\") || \"45762\";\n\n                        const options: RequestInit = { ...init };\n                        if (options?.body) {\n                            const body = JSON.parse(options.body as string);\n                            body.chain_id = chain_id;\n                            options.body = JSON.stringify(body);\n                        }\n\n                        const fetching = await runtime.fetch(url, options);\n\n                        if (\n                            parseBooleanFromText(\n                                runtime.getSetting(\"ETERNALAI_LOG\")\n                            )\n                        ) {\n                            elizaLogger.info(\n                                \"Request data: \",\n                                JSON.stringify(options, null, 2)\n                            );\n                            const clonedResponse = fetching.clone();\n                            try {\n                                clonedResponse.json().then((data) => {\n                                    elizaLogger.info(\n                                        \"Response data: \",\n                                        JSON.stringify(data, null, 2)\n                                    );\n                                });\n                            } catch (e) {\n                                elizaLogger.debug(e);\n                            }\n                        }\n                        return fetching;\n                    },\n                });\n\n                let system_prompt =\n                    runtime.character.system ??\n                    settings.SYSTEM_PROMPT ??\n                    undefined;\n                try {\n                    const on_chain_system_prompt =\n                        await getOnChainEternalAISystemPrompt(runtime);\n                    if (!on_chain_system_prompt) {\n                        elizaLogger.error(\n                            new Error(\"invalid on_chain_system_prompt\")\n                        );\n                    } else {\n                        system_prompt = on_chain_system_prompt;\n                        elizaLogger.info(\n                            \"new on-chain system prompt\",\n                            system_prompt\n                        );\n                    }\n                } catch (e) {\n                    elizaLogger.error(e);\n                }\n\n                const { text: openaiResponse } = await aiGenerateText({\n                    model: openai.languageModel(model),\n                    prompt: context,\n                    system: system_prompt,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                });\n\n                response = openaiResponse;\n                elizaLogger.debug(\"Received response from EternalAI model.\");\n                break;\n            }\n\n            case ModelProviderName.GOOGLE: {\n                const google = createGoogleGenerativeAI({\n                    apiKey,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: googleResponse } = await aiGenerateText({\n                    model: google(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = googleResponse;\n                elizaLogger.debug(\"Received response from Google model.\");\n                break;\n            }\n\n            case ModelProviderName.MISTRAL: {\n                const mistral = createMistral();\n\n                const { text: mistralResponse } = await aiGenerateText({\n                    model: mistral(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                });\n\n                response = mistralResponse;\n                elizaLogger.debug(\"Received response from Mistral model.\");\n                break;\n            }\n\n            case ModelProviderName.ANTHROPIC: {\n                elizaLogger.debug(\n                    \"Initializing Anthropic model with Cloudflare check\"\n                );\n                const baseURL =\n                    getCloudflareGatewayBaseURL(runtime, \"anthropic\") ||\n                    \"https://api.anthropic.com/v1\";\n                elizaLogger.debug(\"Anthropic baseURL result:\", { baseURL });\n\n                const anthropic = createAnthropic({\n                    apiKey,\n                    baseURL,\n                    fetch: runtime.fetch,\n                });\n                const { text: anthropicResponse } = await aiGenerateText({\n                    model: anthropic.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = anthropicResponse;\n                elizaLogger.debug(\"Received response from Anthropic model.\");\n                break;\n            }\n\n            case ModelProviderName.CLAUDE_VERTEX: {\n                elizaLogger.debug(\"Initializing Claude Vertex model.\");\n\n                const anthropic = createAnthropic({\n                    apiKey,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: anthropicResponse } = await aiGenerateText({\n                    model: anthropic.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = anthropicResponse;\n                elizaLogger.debug(\n                    \"Received response from Claude Vertex model.\"\n                );\n                break;\n            }\n\n            case ModelProviderName.GROK: {\n                elizaLogger.debug(\"Initializing Grok model.\");\n                const grok = createOpenAI({\n                    apiKey,\n                    baseURL: endpoint,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: grokResponse } = await aiGenerateText({\n                    model: grok.languageModel(model, {\n                        parallelToolCalls: false,\n                    }),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = grokResponse;\n                elizaLogger.debug(\"Received response from Grok model.\");\n                break;\n            }\n\n            case ModelProviderName.GROQ: {\n                elizaLogger.debug(\n                    \"Initializing Groq model with Cloudflare check\"\n                );\n                const baseURL = getCloudflareGatewayBaseURL(runtime, \"groq\");\n                elizaLogger.debug(\"Groq baseURL result:\", { baseURL });\n                const groq = createGroq({\n                    apiKey,\n                    fetch: runtime.fetch,\n                    baseURL,\n                });\n\n                const { text: groqResponse } = await aiGenerateText({\n                    model: groq.languageModel(model),\n                    prompt: context,\n                    temperature,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry,\n                });\n\n                response = groqResponse;\n                elizaLogger.debug(\"Received response from Groq model.\");\n                break;\n            }\n\n            case ModelProviderName.LLAMALOCAL: {\n                elizaLogger.debug(\n                    \"Using local Llama model for text completion.\"\n                );\n                const textGenerationService =\n                    runtime.getService<ITextGenerationService>(\n                        ServiceType.TEXT_GENERATION\n                    );\n\n                if (!textGenerationService) {\n                    throw new Error(\"Text generation service not found\");\n                }\n\n                response = await textGenerationService.queueTextCompletion(\n                    context,\n                    temperature,\n                    _stop,\n                    frequency_penalty,\n                    presence_penalty,\n                    max_response_length\n                );\n                elizaLogger.debug(\"Received response from local Llama model.\");\n                break;\n            }\n\n            case ModelProviderName.REDPILL: {\n                elizaLogger.debug(\"Initializing RedPill model.\");\n                const serverUrl = getEndpoint(provider);\n                const openai = createOpenAI({\n                    apiKey,\n                    baseURL: serverUrl,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: redpillResponse } = await aiGenerateText({\n                    model: openai.languageModel(model),\n                    prompt: context,\n                    temperature: temperature,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = redpillResponse;\n                elizaLogger.debug(\"Received response from redpill model.\");\n                break;\n            }\n\n            case ModelProviderName.OPENROUTER: {\n                elizaLogger.debug(\"Initializing OpenRouter model.\");\n                const serverUrl = getEndpoint(provider);\n                const openrouter = createOpenAI({\n                    apiKey,\n                    baseURL: serverUrl,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: openrouterResponse } = await aiGenerateText({\n                    model: openrouter.languageModel(model),\n                    prompt: context,\n                    temperature: temperature,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = openrouterResponse;\n                elizaLogger.debug(\"Received response from OpenRouter model.\");\n                break;\n            }\n\n            case ModelProviderName.OLLAMA:\n                {\n                    elizaLogger.debug(\"Initializing Ollama model.\");\n\n                    const ollamaProvider = createOllama({\n                        baseURL: getEndpoint(provider) + \"/api\",\n                        fetch: runtime.fetch,\n                    });\n                    const ollama = ollamaProvider(model);\n\n                    elizaLogger.debug(\"****** MODEL\\n\", model);\n\n                    const { text: ollamaResponse } = await aiGenerateText({\n                        model: ollama,\n                        prompt: context,\n                        tools: tools,\n                        onStepFinish: onStepFinish,\n                        temperature: temperature,\n                        maxSteps: maxSteps,\n                        maxTokens: max_response_length,\n                        frequencyPenalty: frequency_penalty,\n                        presencePenalty: presence_penalty,\n                        experimental_telemetry: experimental_telemetry,\n                    });\n\n                    response = ollamaResponse.replace(\n                        /<think>[\\s\\S]*?<\\/think>\\s*\\n*/g,\n                        \"\"\n                    );\n                }\n                elizaLogger.debug(\"Received response from Ollama model.\");\n                break;\n\n            case ModelProviderName.HEURIST: {\n                elizaLogger.debug(\"Initializing Heurist model.\");\n                const heurist = createOpenAI({\n                    apiKey: apiKey,\n                    baseURL: endpoint,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: heuristResponse } = await aiGenerateText({\n                    model: heurist.languageModel(model),\n                    prompt: context,\n                    system:\n                        customSystemPrompt ??\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    maxSteps: maxSteps,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = heuristResponse;\n                elizaLogger.debug(\"Received response from Heurist model.\");\n                break;\n            }\n            case ModelProviderName.GAIANET: {\n                elizaLogger.debug(\"Initializing GAIANET model.\");\n\n                var baseURL = getEndpoint(provider);\n                if (!baseURL) {\n                    switch (modelClass) {\n                        case ModelClass.SMALL:\n                            baseURL =\n                                settings.SMALL_GAIANET_SERVER_URL ||\n                                \"https://llama3b.gaia.domains/v1\";\n                            break;\n                        case ModelClass.MEDIUM:\n                            baseURL =\n                                settings.MEDIUM_GAIANET_SERVER_URL ||\n                                \"https://llama8b.gaia.domains/v1\";\n                            break;\n                        case ModelClass.LARGE:\n                            baseURL =\n                                settings.LARGE_GAIANET_SERVER_URL ||\n                                \"https://qwen72b.gaia.domains/v1\";\n                            break;\n                    }\n                }\n\n                elizaLogger.debug(\"Using GAIANET model with baseURL:\", baseURL);\n\n                const openai = createOpenAI({\n                    apiKey,\n                    baseURL: endpoint,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: openaiResponse } = await aiGenerateText({\n                    model: openai.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = openaiResponse;\n                elizaLogger.debug(\"Received response from GAIANET model.\");\n                break;\n            }\n\n            case ModelProviderName.ATOMA: {\n                elizaLogger.debug(\"Initializing Atoma model.\");\n                const atoma = createOpenAI({\n                    apiKey,\n                    baseURL: endpoint,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: atomaResponse } = await aiGenerateText({\n                    model: atoma.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = atomaResponse;\n                elizaLogger.debug(\"Received response from Atoma model.\");\n                break;\n            }\n\n            case ModelProviderName.GALADRIEL: {\n                elizaLogger.debug(\"Initializing Galadriel model.\");\n                const headers = {};\n                const fineTuneApiKey = runtime.getSetting(\n                    \"GALADRIEL_FINE_TUNE_API_KEY\"\n                );\n                if (fineTuneApiKey) {\n                    headers[\"Fine-Tune-Authentication\"] = fineTuneApiKey;\n                }\n                const galadriel = createOpenAI({\n                    headers,\n                    apiKey: apiKey,\n                    baseURL: endpoint,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: galadrielResponse } = await aiGenerateText({\n                    model: galadriel.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = galadrielResponse;\n                elizaLogger.debug(\"Received response from Galadriel model.\");\n                break;\n            }\n\n            case ModelProviderName.INFERA: {\n                elizaLogger.debug(\"Initializing Infera model.\");\n\n                const apiKey = settings.INFERA_API_KEY || runtime.token;\n\n                const infera = createOpenAI({\n                    apiKey,\n                    baseURL: endpoint,\n                    headers: {\n                        api_key: apiKey,\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n\n                const { text: inferaResponse } = await aiGenerateText({\n                    model: infera.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                });\n                response = inferaResponse;\n                elizaLogger.debug(\"Received response from Infera model.\");\n                break;\n            }\n\n            case ModelProviderName.VENICE: {\n                elizaLogger.debug(\"Initializing Venice model.\");\n                const venice = createOpenAI({\n                    apiKey: apiKey,\n                    baseURL: endpoint,\n                });\n\n                const { text: veniceResponse } = await aiGenerateText({\n                    model: venice.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    temperature: temperature,\n                    maxSteps: maxSteps,\n                    maxTokens: max_response_length,\n                });\n\n                // console.warn(\"veniceResponse:\")\n                // console.warn(veniceResponse)\n                //rferrari: remove all text from <think> to </think>\\n\\n\n                response = veniceResponse.replace(\n                    /<think>[\\s\\S]*?<\\/think>\\s*\\n*/g,\n                    \"\"\n                );\n                // console.warn(response)\n\n                // response = veniceResponse;\n                elizaLogger.debug(\"Received response from Venice model.\");\n                break;\n            }\n\n            case ModelProviderName.NVIDIA: {\n                elizaLogger.debug(\"Initializing NVIDIA model.\");\n                const nvidia = createOpenAI({\n                    apiKey: apiKey,\n                    baseURL: endpoint,\n                });\n\n                const { text: nvidiaResponse } = await aiGenerateText({\n                    model: nvidia.languageModel(model),\n                    prompt: context,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    temperature: temperature,\n                    maxSteps: maxSteps,\n                    maxTokens: max_response_length,\n                });\n\n                response = nvidiaResponse;\n                elizaLogger.debug(\"Received response from NVIDIA model.\");\n                break;\n            }\n\n            case ModelProviderName.DEEPSEEK: {\n                elizaLogger.debug(\"Initializing Deepseek model.\");\n                const serverUrl = models[provider].endpoint;\n                const deepseek = createOpenAI({\n                    apiKey,\n                    baseURL: serverUrl,\n                    fetch: runtime.fetch,\n                });\n\n                const { text: deepseekResponse } = await aiGenerateText({\n                    model: deepseek.languageModel(model),\n                    prompt: context,\n                    temperature: temperature,\n                    system:\n                        runtime.character.system ??\n                        settings.SYSTEM_PROMPT ??\n                        undefined,\n                    tools: tools,\n                    onStepFinish: onStepFinish,\n                    maxSteps: maxSteps,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                });\n\n                response = deepseekResponse;\n                elizaLogger.debug(\"Received response from Deepseek model.\");\n                break;\n            }\n\n            case ModelProviderName.LIVEPEER: {\n                elizaLogger.debug(\"Initializing Livepeer model.\");\n\n                if (!endpoint) {\n                    throw new Error(\"Livepeer Gateway URL is not defined\");\n                }\n\n                const requestBody = {\n                    model: model,\n                    messages: [\n                        {\n                            role: \"system\",\n                            content:\n                                runtime.character.system ??\n                                settings.SYSTEM_PROMPT ??\n                                \"You are a helpful assistant\",\n                        },\n                        {\n                            role: \"user\",\n                            content: context,\n                        },\n                    ],\n                    max_tokens: max_response_length,\n                    stream: false,\n                };\n\n                const fetchResponse = await runtime.fetch(endpoint + \"/llm\", {\n                    method: \"POST\",\n                    headers: {\n                        accept: \"text/event-stream\",\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Bearer eliza-app-llm\",\n                    },\n                    body: JSON.stringify(requestBody),\n                });\n\n                if (!fetchResponse.ok) {\n                    const errorText = await fetchResponse.text();\n                    throw new Error(\n                        `Livepeer request failed (${fetchResponse.status}): ${errorText}`\n                    );\n                }\n\n                const json = await fetchResponse.json();\n\n                if (!json?.choices?.[0]?.message?.content) {\n                    throw new Error(\"Invalid response format from Livepeer\");\n                }\n\n                response = json.choices[0].message.content.replace(\n                    /<\\|start_header_id\\|>assistant<\\|end_header_id\\|>\\n\\n/,\n                    \"\"\n                );\n                elizaLogger.debug(\n                    \"Successfully received response from Livepeer model\"\n                );\n                break;\n            }\n\n            case ModelProviderName.SECRETAI:\n                {\n                    elizaLogger.debug(\"Initializing SecretAI model.\");\n\n                    const secretAiProvider = createOllama({\n                        baseURL: getEndpoint(provider) + \"/api\",\n                        fetch: runtime.fetch,\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${apiKey}`,\n                        },\n                    });\n                    const secretAi = secretAiProvider(model);\n\n                    const { text: secretAiResponse } = await aiGenerateText({\n                        model: secretAi,\n                        prompt: context,\n                        tools: tools,\n                        onStepFinish: onStepFinish,\n                        temperature: temperature,\n                        maxSteps: maxSteps,\n                        maxTokens: max_response_length,\n                    });\n\n                    response = secretAiResponse;\n                }\n                break;\n\n            case ModelProviderName.BEDROCK: {\n                elizaLogger.debug(\"Initializing Bedrock model.\");\n\n                const { text: bedrockResponse } = await aiGenerateText({\n                    model: bedrock(model),\n                    maxSteps: maxSteps,\n                    temperature: temperature,\n                    maxTokens: max_response_length,\n                    frequencyPenalty: frequency_penalty,\n                    presencePenalty: presence_penalty,\n                    experimental_telemetry: experimental_telemetry,\n                    prompt: context,\n                });\n\n                response = bedrockResponse;\n                elizaLogger.debug(\"Received response from Bedrock model.\");\n                break;\n            }\n\n            default: {\n                const errorMessage = `Unsupported provider: ${provider}`;\n                elizaLogger.error(errorMessage);\n                throw new Error(errorMessage);\n            }\n        }\n\n        return response;\n    } catch (error) {\n        elizaLogger.error(\"Error in generateText:\", error);\n        throw error;\n    }\n}\n\n/**\n * Sends a message to the model to determine if it should respond to the given context.\n * @param opts - The options for the generateText request\n * @param opts.context The context to evaluate for response\n * @param opts.stop A list of strings to stop the generateText at\n * @param opts.model The model to use for generateText\n * @param opts.frequency_penalty The frequency penalty to apply (0.0 to 2.0)\n * @param opts.presence_penalty The presence penalty to apply (0.0 to 2.0)\n * @param opts.temperature The temperature to control randomness (0.0 to 2.0)\n * @param opts.serverUrl The URL of the API server\n * @param opts.max_context_length Maximum allowed context length in tokens\n * @param opts.max_response_length Maximum allowed response length in tokens\n * @returns Promise resolving to \"RESPOND\", \"IGNORE\", \"STOP\" or null\n */\nexport async function generateShouldRespond({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<\"RESPOND\" | \"IGNORE\" | \"STOP\" | null> {\n    let retryDelay = 1000;\n    while (true) {\n        try {\n            elizaLogger.debug(\n                \"Attempting to generate text with context:\",\n                context\n            );\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n\n            elizaLogger.debug(\"Received response from generateText:\", response);\n            const parsedResponse = parseShouldRespondFromText(response.trim());\n            if (parsedResponse) {\n                elizaLogger.debug(\"Parsed response:\", parsedResponse);\n                return parsedResponse;\n            } else {\n                elizaLogger.debug(\"generateShouldRespond no response\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateShouldRespond:\", error);\n            if (\n                error instanceof TypeError &&\n                error.message.includes(\"queueTextCompletion\")\n            ) {\n                elizaLogger.error(\n                    \"TypeError: Cannot read properties of null (reading 'queueTextCompletion')\"\n                );\n            }\n        }\n\n        elizaLogger.log(`Retrying in ${retryDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n\n/**\n * Splits content into chunks of specified size with optional overlapping bleed sections\n * @param content - The text content to split into chunks\n * @param chunkSize - The maximum size of each chunk in tokens\n * @param bleed - Number of characters to overlap between chunks (default: 100)\n * @returns Promise resolving to array of text chunks with bleed sections\n */\nexport async function splitChunks(\n    content: string,\n    chunkSize = 1500,\n    bleed = 100\n): Promise<string[]> {\n    elizaLogger.debug(`[splitChunks] Starting text split`);\n\n    // Validate parameters\n    if (chunkSize <= 0) {\n        elizaLogger.warn(\n            `Invalid chunkSize (${chunkSize}), using default 1500`\n        );\n        chunkSize = 1500;\n    }\n\n    if (bleed >= chunkSize) {\n        elizaLogger.warn(\n            `Bleed (${bleed}) >= chunkSize (${chunkSize}), adjusting bleed to 1/4 of chunkSize`\n        );\n        bleed = Math.floor(chunkSize / 4);\n    }\n\n    if (bleed < 0) {\n        elizaLogger.warn(`Invalid bleed (${bleed}), using default 100`);\n        bleed = 100;\n    }\n\n    const chunks = splitText(content, chunkSize, bleed);\n\n    elizaLogger.debug(`[splitChunks] Split complete:`, {\n        numberOfChunks: chunks.length,\n        averageChunkSize:\n            chunks.reduce((acc, chunk) => acc + chunk.length, 0) /\n            chunks.length,\n    });\n\n    return chunks;\n}\n\nexport function splitText(\n    content: string,\n    chunkSize: number,\n    bleed: number\n): string[] {\n    const chunks: string[] = [];\n    let start = 0;\n\n    while (start < content.length) {\n        const end = Math.min(start + chunkSize, content.length);\n        // Ensure we're not creating empty or invalid chunks\n        if (end > start) {\n            chunks.push(content.substring(start, end));\n        }\n\n        // Ensure forward progress while preventing infinite loops\n        start = Math.max(end - bleed, start + 1);\n    }\n\n    return chunks;\n}\n\n/**\n * Sends a message to the model and parses the response as a boolean value\n * @param opts - The options for the generateText request\n * @param opts.context The context to evaluate for the boolean response\n * @param opts.stop A list of strings to stop the generateText at\n * @param opts.model The model to use for generateText\n * @param opts.frequency_penalty The frequency penalty to apply (0.0 to 2.0)\n * @param opts.presence_penalty The presence penalty to apply (0.0 to 2.0)\n * @param opts.temperature The temperature to control randomness (0.0 to 2.0)\n * @param opts.serverUrl The URL of the API server\n * @param opts.max_context_length Maximum allowed context length in tokens\n * @param opts.max_response_length Maximum allowed response length in tokens\n * @returns Promise resolving to a boolean value parsed from the model's response\n */\nexport async function generateTrueOrFalse({\n    runtime,\n    context = \"\",\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<boolean> {\n    let retryDelay = 1000;\n    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);\n    const stop = Array.from(\n        new Set([...(modelSettings.stop || []), [\"\\n\"]])\n    ) as string[];\n\n    while (true) {\n        try {\n            const response = await generateText({\n                stop,\n                runtime,\n                context,\n                modelClass,\n            });\n\n            const parsedResponse = parseBooleanFromText(response.trim());\n            if (parsedResponse !== null) {\n                return parsedResponse;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateTrueOrFalse:\", error);\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n\n/**\n * Send a message to the model and parse the response as a string array\n * @param opts - The options for the generateText request\n * @param opts.context The context/prompt to send to the model\n * @param opts.stop Array of strings that will stop the model's generation if encountered\n * @param opts.model The language model to use\n * @param opts.frequency_penalty The frequency penalty to apply (0.0 to 2.0)\n * @param opts.presence_penalty The presence penalty to apply (0.0 to 2.0)\n * @param opts.temperature The temperature to control randomness (0.0 to 2.0)\n * @param opts.serverUrl The URL of the API server\n * @param opts.token The API token for authentication\n * @param opts.max_context_length Maximum allowed context length in tokens\n * @param opts.max_response_length Maximum allowed response length in tokens\n * @returns Promise resolving to an array of strings parsed from the model's response\n */\nexport async function generateTextArray({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<string[]> {\n    if (!context) {\n        elizaLogger.error(\"generateTextArray context is empty\");\n        return [];\n    }\n    let retryDelay = 1000;\n\n    while (true) {\n        try {\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n\n            const parsedResponse = parseJsonArrayFromText(response);\n            if (parsedResponse) {\n                return parsedResponse;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateTextArray:\", error);\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n\nexport async function generateObjectDeprecated({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<any> {\n    if (!context) {\n        elizaLogger.error(\"generateObjectDeprecated context is empty\");\n        return null;\n    }\n    let retryDelay = 1000;\n\n    while (true) {\n        try {\n            // this is slightly different than generateObjectArray, in that we parse object, not object array\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n            const parsedResponse = parseJSONObjectFromText(response);\n            if (parsedResponse) {\n                return parsedResponse;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateObject:\", error);\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n\nexport async function generateObjectArray({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<any[]> {\n    if (!context) {\n        elizaLogger.error(\"generateObjectArray context is empty\");\n        return [];\n    }\n    let retryDelay = 1000;\n\n    while (true) {\n        try {\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n\n            const parsedResponse = parseJsonArrayFromText(response);\n            if (parsedResponse) {\n                return parsedResponse;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateTextArray:\", error);\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n\n/**\n * Send a message to the model for generateText.\n * @param opts - The options for the generateText request.\n * @param opts.context The context of the message to be completed.\n * @param opts.stop A list of strings to stop the generateText at.\n * @param opts.model The model to use for generateText.\n * @param opts.frequency_penalty The frequency penalty to apply to the generateText.\n * @param opts.presence_penalty The presence penalty to apply to the generateText.\n * @param opts.temperature The temperature to apply to the generateText.\n * @param opts.max_context_length The maximum length of the context to apply to the generateText.\n * @returns The completed message.\n */\nexport async function generateMessageResponse({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<Content> {\n    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);\n    const max_context_length = modelSettings.maxInputTokens;\n\n    context = await trimTokens(context, max_context_length, runtime);\n    elizaLogger.debug(\"Context:\", context);\n    let retryLength = 1000; // exponential backoff\n    while (true) {\n        try {\n            elizaLogger.log(\"Generating message response..\");\n\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n\n            // try parsing the response as JSON, if null then try again\n            const parsedContent = parseJSONObjectFromText(response) as Content;\n            if (!parsedContent) {\n                elizaLogger.debug(\"parsedContent is null, retrying\");\n                continue;\n            }\n\n            return parsedContent;\n        } catch (error) {\n            elizaLogger.error(\"ERROR:\", error);\n            // wait for 2 seconds\n            retryLength *= 2;\n            await new Promise((resolve) => setTimeout(resolve, retryLength));\n            elizaLogger.debug(\"Retrying...\");\n        }\n    }\n}\n\nexport const generateImage = async (\n    data: {\n        prompt: string;\n        width: number;\n        height: number;\n        count?: number;\n        negativePrompt?: string;\n        numIterations?: number;\n        guidanceScale?: number;\n        seed?: number;\n        modelId?: string;\n        jobId?: string;\n        stylePreset?: string;\n        hideWatermark?: boolean;\n        safeMode?: boolean;\n        cfgScale?: number;\n    },\n    runtime: IAgentRuntime\n): Promise<{\n    success: boolean;\n    data?: string[];\n    error?: any;\n}> => {\n    const modelSettings = getImageModelSettings(runtime.imageModelProvider);\n    if (!modelSettings) {\n        elizaLogger.warn(\n            \"No model settings found for the image model provider.\"\n        );\n        return { success: false, error: \"No model settings available\" };\n    }\n    const model = modelSettings.name;\n    elizaLogger.info(\"Generating image with options:\", {\n        imageModelProvider: model,\n    });\n\n    const apiKey =\n        runtime.imageModelProvider === runtime.modelProvider\n            ? runtime.token\n            : (() => {\n                  // First try to match the specific provider\n                  switch (runtime.imageModelProvider) {\n                      case ModelProviderName.HEURIST:\n                          return runtime.getSetting(\"HEURIST_API_KEY\");\n                      case ModelProviderName.TOGETHER:\n                          return runtime.getSetting(\"TOGETHER_API_KEY\");\n                      case ModelProviderName.FAL:\n                          return runtime.getSetting(\"FAL_API_KEY\");\n                      case ModelProviderName.OPENAI:\n                          return runtime.getSetting(\"OPENAI_API_KEY\");\n                      case ModelProviderName.VENICE:\n                          return runtime.getSetting(\"VENICE_API_KEY\");\n                      case ModelProviderName.LIVEPEER:\n                          return runtime.getSetting(\"LIVEPEER_GATEWAY_URL\");\n                      case ModelProviderName.SECRETAI:\n                          return runtime.getSetting(\"SECRET_AI_API_KEY\");\n                      case ModelProviderName.NEARAI:\n                          try {\n                              // Read auth config from ~/.nearai/config.json if it exists\n                              const config = JSON.parse(\n                                  fs.readFileSync(\n                                      path.join(\n                                          os.homedir(),\n                                          \".nearai/config.json\"\n                                      ),\n                                      \"utf8\"\n                                  )\n                              );\n                              return JSON.stringify(config?.auth);\n                          } catch (e) {\n                              elizaLogger.warn(\n                                  `Error loading NEAR AI config. The environment variable NEARAI_API_KEY will be used. ${e}`\n                              );\n                          }\n                          return runtime.getSetting(\"NEARAI_API_KEY\");\n                      default:\n                          // If no specific match, try the fallback chain\n                          return (\n                              runtime.getSetting(\"HEURIST_API_KEY\") ??\n                              runtime.getSetting(\"NINETEEN_AI_API_KEY\") ??\n                              runtime.getSetting(\"TOGETHER_API_KEY\") ??\n                              runtime.getSetting(\"FAL_API_KEY\") ??\n                              runtime.getSetting(\"OPENAI_API_KEY\") ??\n                              runtime.getSetting(\"VENICE_API_KEY\") ??\n                              runtime.getSetting(\"LIVEPEER_GATEWAY_URL\")\n                          );\n                  }\n              })();\n    try {\n        if (runtime.imageModelProvider === ModelProviderName.HEURIST) {\n            const response = await fetch(\n                \"http://sequencer.heurist.xyz/submit_job\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        Authorization: `Bearer ${apiKey}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        job_id: data.jobId || crypto.randomUUID(),\n                        model_input: {\n                            SD: {\n                                prompt: data.prompt,\n                                neg_prompt: data.negativePrompt,\n                                num_iterations: data.numIterations || 20,\n                                width: data.width || 512,\n                                height: data.height || 512,\n                                guidance_scale: data.guidanceScale || 3,\n                                seed: data.seed || -1,\n                            },\n                        },\n                        model_id: model,\n                        deadline: 60,\n                        priority: 1,\n                    }),\n                }\n            );\n\n            if (!response.ok) {\n                throw new Error(\n                    `Heurist image generation failed: ${response.statusText}`\n                );\n            }\n\n            const imageURL = await response.json();\n            return { success: true, data: [imageURL] };\n        } else if (\n            runtime.imageModelProvider === ModelProviderName.TOGETHER ||\n            // for backwards compat\n            runtime.imageModelProvider === ModelProviderName.LLAMACLOUD\n        ) {\n            const together = new Together({ apiKey: apiKey as string });\n            const response = await together.images.create({\n                model: model,\n                prompt: data.prompt,\n                width: data.width,\n                height: data.height,\n                steps: modelSettings?.steps ?? 4,\n                n: data.count,\n            });\n\n            // Add type assertion to handle the response properly\n            const togetherResponse =\n                response as unknown as TogetherAIImageResponse;\n\n            if (\n                !togetherResponse.data ||\n                !Array.isArray(togetherResponse.data)\n            ) {\n                throw new Error(\"Invalid response format from Together AI\");\n            }\n\n            // Rest of the code remains the same...\n            const base64s = await Promise.all(\n                togetherResponse.data.map(async (image) => {\n                    if (!image.url) {\n                        elizaLogger.error(\"Missing URL in image data:\", image);\n                        throw new Error(\"Missing URL in Together AI response\");\n                    }\n\n                    // Fetch the image from the URL\n                    const imageResponse = await fetch(image.url);\n                    if (!imageResponse.ok) {\n                        throw new Error(\n                            `Failed to fetch image: ${imageResponse.statusText}`\n                        );\n                    }\n\n                    // Convert to blob and then to base64\n                    const blob = await imageResponse.blob();\n                    const arrayBuffer = await blob.arrayBuffer();\n                    const base64 = Buffer.from(arrayBuffer).toString(\"base64\");\n\n                    // Return with proper MIME type\n                    return `data:image/jpeg;base64,${base64}`;\n                })\n            );\n\n            if (base64s.length === 0) {\n                throw new Error(\"No images generated by Together AI\");\n            }\n\n            elizaLogger.debug(`Generated ${base64s.length} images`);\n            return { success: true, data: base64s };\n        } else if (runtime.imageModelProvider === ModelProviderName.FAL) {\n            fal.config({\n                credentials: apiKey as string,\n            });\n\n            // Prepare the input parameters according to their schema\n            const input = {\n                prompt: data.prompt,\n                image_size: \"square\" as const,\n                num_inference_steps: modelSettings?.steps ?? 50,\n                guidance_scale: data.guidanceScale || 3.5,\n                num_images: data.count,\n                enable_safety_checker:\n                    runtime.getSetting(\"FAL_AI_ENABLE_SAFETY_CHECKER\") ===\n                    \"true\",\n                safety_tolerance: Number(\n                    runtime.getSetting(\"FAL_AI_SAFETY_TOLERANCE\") || \"2\"\n                ),\n                output_format: \"png\" as const,\n                seed: data.seed ?? 6252023,\n                ...(runtime.getSetting(\"FAL_AI_LORA_PATH\")\n                    ? {\n                          loras: [\n                              {\n                                  path: runtime.getSetting(\"FAL_AI_LORA_PATH\"),\n                                  scale: 1,\n                              },\n                          ],\n                      }\n                    : {}),\n            };\n\n            // Subscribe to the model\n            const result = await fal.subscribe(model, {\n                input,\n                logs: true,\n                onQueueUpdate: (update) => {\n                    if (update.status === \"IN_PROGRESS\") {\n                        elizaLogger.info(update.logs.map((log) => log.message));\n                    }\n                },\n            });\n            // Convert the returned image URLs to base64 to match existing functionality\n            const base64Promises = result.data.images.map(async (image) => {\n                const response = await fetch(image.url);\n                const blob = await response.blob();\n                const buffer = await blob.arrayBuffer();\n                const base64 = Buffer.from(buffer).toString(\"base64\");\n                return `data:${image.content_type};base64,${base64}`;\n            });\n\n            const base64s = await Promise.all(base64Promises);\n            return { success: true, data: base64s };\n        } else if (runtime.imageModelProvider === ModelProviderName.VENICE) {\n            const response = await fetch(\n                \"https://api.venice.ai/api/v1/image/generate\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        Authorization: `Bearer ${apiKey}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        model: model,\n                        prompt: data.prompt,\n                        cfg_scale: data.guidanceScale,\n                        negative_prompt: data.negativePrompt,\n                        width: data.width,\n                        height: data.height,\n                        steps: data.numIterations,\n                        safe_mode: data.safeMode,\n                        seed: data.seed,\n                        style_preset: data.stylePreset,\n                        hide_watermark: data.hideWatermark,\n                    }),\n                }\n            );\n\n            const result = await response.json();\n\n            if (!result.images || !Array.isArray(result.images)) {\n                throw new Error(\"Invalid response format from Venice AI\");\n            }\n\n            const base64s = result.images.map((base64String) => {\n                if (!base64String) {\n                    throw new Error(\n                        \"Empty base64 string in Venice AI response\"\n                    );\n                }\n                return `data:image/png;base64,${base64String}`;\n            });\n\n            return { success: true, data: base64s };\n        } else if (\n            runtime.imageModelProvider === ModelProviderName.NINETEEN_AI\n        ) {\n            const response = await fetch(\n                \"https://api.nineteen.ai/v1/text-to-image\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        Authorization: `Bearer ${apiKey}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        model: model,\n                        prompt: data.prompt,\n                        negative_prompt: data.negativePrompt,\n                        width: data.width,\n                        height: data.height,\n                        steps: data.numIterations,\n                        cfg_scale: data.guidanceScale || 3,\n                    }),\n                }\n            );\n\n            const result = await response.json();\n\n            if (!result.images || !Array.isArray(result.images)) {\n                throw new Error(\"Invalid response format from Nineteen AI\");\n            }\n\n            const base64s = result.images.map((base64String) => {\n                if (!base64String) {\n                    throw new Error(\n                        \"Empty base64 string in Nineteen AI response\"\n                    );\n                }\n                return `data:image/png;base64,${base64String}`;\n            });\n\n            return { success: true, data: base64s };\n        } else if (runtime.imageModelProvider === ModelProviderName.LIVEPEER) {\n            if (!apiKey) {\n                throw new Error(\"Livepeer Gateway is not defined\");\n            }\n            try {\n                const baseUrl = new URL(apiKey);\n                if (!baseUrl.protocol.startsWith(\"http\")) {\n                    throw new Error(\"Invalid Livepeer Gateway URL protocol\");\n                }\n\n                const response = await fetch(\n                    `${baseUrl.toString()}text-to-image`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: \"Bearer eliza-app-img\",\n                        },\n                        body: JSON.stringify({\n                            model_id:\n                                data.modelId || \"ByteDance/SDXL-Lightning\",\n                            prompt: data.prompt,\n                            width: data.width || 1024,\n                            height: data.height || 1024,\n                        }),\n                    }\n                );\n                const result = await response.json();\n                if (!result.images?.length) {\n                    throw new Error(\"No images generated\");\n                }\n                const base64Images = await Promise.all(\n                    result.images.map(async (image) => {\n                        console.log(\"imageUrl console log\", image.url);\n                        let imageUrl;\n                        if (image.url.includes(\"http\")) {\n                            imageUrl = image.url;\n                        } else {\n                            imageUrl = `${apiKey}${image.url}`;\n                        }\n                        const imageResponse = await fetch(imageUrl);\n                        if (!imageResponse.ok) {\n                            throw new Error(\n                                `Failed to fetch image: ${imageResponse.statusText}`\n                            );\n                        }\n                        const blob = await imageResponse.blob();\n                        const arrayBuffer = await blob.arrayBuffer();\n                        const base64 =\n                            Buffer.from(arrayBuffer).toString(\"base64\");\n                        return `data:image/jpeg;base64,${base64}`;\n                    })\n                );\n                return {\n                    success: true,\n                    data: base64Images,\n                };\n            } catch (error) {\n                console.error(error);\n                return { success: false, error: error };\n            }\n        } else {\n            let targetSize = `${data.width}x${data.height}`;\n            if (\n                targetSize !== \"1024x1024\" &&\n                targetSize !== \"1792x1024\" &&\n                targetSize !== \"1024x1792\"\n            ) {\n                targetSize = \"1024x1024\";\n            }\n            const openaiApiKey = runtime.getSetting(\"OPENAI_API_KEY\") as string;\n            if (!openaiApiKey) {\n                throw new Error(\"OPENAI_API_KEY is not set\");\n            }\n            const openai = new OpenAI({\n                apiKey: openaiApiKey as string,\n            });\n            const response = await openai.images.generate({\n                model,\n                prompt: data.prompt,\n                size: targetSize as \"1024x1024\" | \"1792x1024\" | \"1024x1792\",\n                n: data.count,\n                response_format: \"b64_json\",\n            });\n            const base64s = response.data.map(\n                (image) => `data:image/png;base64,${image.b64_json}`\n            );\n            return { success: true, data: base64s };\n        }\n    } catch (error) {\n        console.error(error);\n        return { success: false, error: error };\n    }\n};\n\nexport const generateCaption = async (\n    data: { imageUrl: string },\n    runtime: IAgentRuntime\n): Promise<{\n    title: string;\n    description: string;\n}> => {\n    const { imageUrl } = data;\n    const imageDescriptionService =\n        runtime.getService<IImageDescriptionService>(\n            ServiceType.IMAGE_DESCRIPTION\n        );\n\n    if (!imageDescriptionService) {\n        throw new Error(\"Image description service not found\");\n    }\n\n    const resp = await imageDescriptionService.describeImage(imageUrl);\n    return {\n        title: resp.title.trim(),\n        description: resp.description.trim(),\n    };\n};\n\n/**\n * Configuration options for generating objects with a model.\n */\nexport interface GenerationOptions {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n    schema?: ZodSchema;\n    schemaName?: string;\n    schemaDescription?: string;\n    stop?: string[];\n    mode?: \"auto\" | \"json\" | \"tool\";\n    experimental_providerMetadata?: Record<string, unknown>;\n    // verifiableInference?: boolean;\n    // verifiableInferenceAdapter?: IVerifiableInferenceAdapter;\n    // verifiableInferenceOptions?: VerifiableInferenceOptions;\n}\n\n/**\n * Base settings for model generation.\n */\ninterface ModelSettings {\n    prompt: string;\n    temperature: number;\n    maxTokens: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    stop?: string[];\n    experimental_telemetry?: TelemetrySettings;\n}\n\n/**\n * Generates structured objects from a prompt using specified AI models and configuration options.\n *\n * @param {GenerationOptions} options - Configuration options for generating objects.\n * @returns {Promise<any[]>} - A promise that resolves to an array of generated objects.\n * @throws {Error} - Throws an error if the provider is unsupported or if generation fails.\n */\nexport const generateObject = async ({\n    runtime,\n    context,\n    modelClass,\n    schema,\n    schemaName,\n    schemaDescription,\n    stop,\n    mode = \"json\",\n}: // verifiableInference = false,\n// verifiableInferenceAdapter,\n// verifiableInferenceOptions,\nGenerationOptions): Promise<GenerateObjectResult<unknown>> => {\n    if (!context) {\n        const errorMessage = \"generateObject context is empty\";\n        console.error(errorMessage);\n        throw new Error(errorMessage);\n    }\n\n    const provider = runtime.modelProvider;\n    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);\n    const model = modelSettings.name;\n    const temperature = modelSettings.temperature;\n    const frequency_penalty = modelSettings.frequency_penalty;\n    const presence_penalty = modelSettings.presence_penalty;\n    const max_context_length = modelSettings.maxInputTokens;\n    const max_response_length = modelSettings.maxOutputTokens;\n    const experimental_telemetry = modelSettings.experimental_telemetry;\n    const apiKey = runtime.token;\n\n    try {\n        context = await trimTokens(context, max_context_length, runtime);\n\n        const modelOptions: ModelSettings = {\n            prompt: context,\n            temperature,\n            maxTokens: max_response_length,\n            frequencyPenalty: frequency_penalty,\n            presencePenalty: presence_penalty,\n            stop: stop || modelSettings.stop,\n            experimental_telemetry: experimental_telemetry,\n        };\n\n        const response = await handleProvider({\n            provider,\n            model,\n            apiKey,\n            schema,\n            schemaName,\n            schemaDescription,\n            mode,\n            modelOptions,\n            runtime,\n            context,\n            modelClass,\n            // verifiableInference,\n            // verifiableInferenceAdapter,\n            // verifiableInferenceOptions,\n        });\n\n        return response;\n    } catch (error) {\n        console.error(\"Error in generateObject:\", error);\n        throw error;\n    }\n};\n\n/**\n * Handles AI generation based on the specified provider.\n *\n * @param {ProviderOptions} options - Configuration options specific to the provider.\n * @returns {Promise<any[]>} - A promise that resolves to an array of generated objects.\n */\nexport async function handleProvider(\n    options: ProviderOptions\n): Promise<GenerationResult> {\n    const {\n        provider,\n        runtime,\n        context,\n        modelClass,\n        //verifiableInference,\n        //verifiableInferenceAdapter,\n        //verifiableInferenceOptions,\n    } = options;\n    switch (provider) {\n        case ModelProviderName.OPENAI:\n        case ModelProviderName.ETERNALAI:\n        case ModelProviderName.ALI_BAILIAN:\n        case ModelProviderName.VOLENGINE:\n        case ModelProviderName.LLAMACLOUD:\n        case ModelProviderName.TOGETHER:\n        case ModelProviderName.NANOGPT:\n        case ModelProviderName.AKASH_CHAT_API:\n        case ModelProviderName.LMSTUDIO:\n            return await handleOpenAI(options);\n        case ModelProviderName.ANTHROPIC:\n        case ModelProviderName.CLAUDE_VERTEX:\n            return await handleAnthropic(options);\n        case ModelProviderName.GROK:\n            return await handleGrok(options);\n        case ModelProviderName.GROQ:\n            return await handleGroq(options);\n        case ModelProviderName.LLAMALOCAL:\n            return await generateObjectDeprecated({\n                runtime,\n                context,\n                modelClass,\n            });\n        case ModelProviderName.GOOGLE:\n            return await handleGoogle(options);\n        case ModelProviderName.MISTRAL:\n            return await handleMistral(options);\n        case ModelProviderName.REDPILL:\n            return await handleRedPill(options);\n        case ModelProviderName.OPENROUTER:\n            return await handleOpenRouter(options);\n        case ModelProviderName.OLLAMA:\n            return await handleOllama(options);\n        case ModelProviderName.DEEPSEEK:\n            return await handleDeepSeek(options);\n        case ModelProviderName.LIVEPEER:\n            return await handleLivepeer(options);\n        case ModelProviderName.SECRETAI:\n            return await handleSecretAi(options);\n        case ModelProviderName.NEARAI:\n            return await handleNearAi(options);\n        case ModelProviderName.BEDROCK:\n            return await handleBedrock(options);\n        default: {\n            const errorMessage = `Unsupported provider: ${provider}`;\n            elizaLogger.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n}\n/**\n * Handles object generation for OpenAI.\n *\n * @param {ProviderOptions} options - Options specific to OpenAI.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleOpenAI({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    provider,\n    runtime,\n}: ProviderOptions): Promise<GenerateObjectResult<unknown>> {\n    const endpoint = runtime.character.modelEndpointOverride || getEndpoint(provider);\n    const baseURL = getCloudflareGatewayBaseURL(runtime, \"openai\") || endpoint;\n    const openai = createOpenAI({ \n        apiKey, \n        baseURL,\n        fetch: runtime.fetch \n    });\n    return aiGenerateObject({\n        model: openai.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Anthropic models.\n *\n * @param {ProviderOptions} options - Options specific to Anthropic.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleAnthropic({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"auto\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    elizaLogger.debug(\"Handling Anthropic request with Cloudflare check\");\n    if (mode === \"json\") {\n        elizaLogger.warn(\"Anthropic mode is set to json, changing to auto\");\n        mode = \"auto\";\n    }\n    const baseURL = getCloudflareGatewayBaseURL(runtime, \"anthropic\");\n    elizaLogger.debug(\"Anthropic handleAnthropic baseURL:\", { baseURL });\n\n    const anthropic = createAnthropic({ \n        apiKey, \n        baseURL,\n        fetch: runtime.fetch \n    });\n    return await aiGenerateObject({\n        model: anthropic.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Grok models.\n *\n * @param {ProviderOptions} options - Options specific to Grok.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleGrok({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const grok = createOpenAI({ \n        apiKey, \n        baseURL: models.grok.endpoint,\n        fetch: runtime.fetch \n    });\n    return aiGenerateObject({\n        model: grok.languageModel(model, { parallelToolCalls: false }),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Groq models.\n *\n * @param {ProviderOptions} options - Options specific to Groq.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleGroq({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    elizaLogger.debug(\"Handling Groq request with Cloudflare check\");\n    const baseURL = getCloudflareGatewayBaseURL(runtime, \"groq\");\n    elizaLogger.debug(\"Groq handleGroq baseURL:\", { baseURL });\n\n    const groq = createGroq({ \n        apiKey, \n        baseURL,\n        fetch: runtime.fetch \n    });\n    return await aiGenerateObject({\n        model: groq.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Google models.\n *\n * @param {ProviderOptions} options - Options specific to Google.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleGoogle({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerateObjectResult<unknown>> {\n    const google = createGoogleGenerativeAI({\n        apiKey,\n        fetch: runtime.fetch \n    });\n    return aiGenerateObject({\n        model: google(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Mistral models.\n *\n * @param {ProviderOptions} options - Options specific to Mistral.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleMistral({\n    model,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode,\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const mistral = createMistral({ fetch: runtime.fetch });\n    return aiGenerateObject({\n        model: mistral(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Redpill models.\n *\n * @param {ProviderOptions} options - Options specific to Redpill.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleRedPill({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const redPill = createOpenAI({ \n        apiKey, \n        baseURL: models.redpill.endpoint,\n        fetch: runtime.fetch \n    });\n    return aiGenerateObject({\n        model: redPill.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for OpenRouter models.\n *\n * @param {ProviderOptions} options - Options specific to OpenRouter.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleOpenRouter({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const openRouter = createOpenAI({\n        apiKey,\n        baseURL: models.openrouter.endpoint,\n        fetch: runtime.fetch\n    });\n    return aiGenerateObject({\n        model: openRouter.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Ollama models.\n *\n * @param {ProviderOptions} options - Options specific to Ollama.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleOllama({\n    model,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    provider,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const ollamaProvider = createOllama({\n        baseURL: getEndpoint(provider) + \"/api\",\n        fetch: runtime.fetch\n    });\n    const ollama = ollamaProvider(model);\n    return aiGenerateObject({\n        model: ollama,\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for DeepSeek models.\n *\n * @param {ProviderOptions} options - Options specific to DeepSeek.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleDeepSeek({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode,\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const openai = createOpenAI({ \n        apiKey, \n        baseURL: models.deepseek.endpoint,\n        fetch: runtime.fetch \n    });\n    return aiGenerateObject({\n        model: openai.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Amazon Bedrock models.\n *\n * @param {ProviderOptions} options - Options specific to Amazon Bedrock.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleBedrock({\n    model,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode,\n    modelOptions,\n    provider,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const bedrockClient = bedrock(model);\n    return aiGenerateObject({\n        model: bedrockClient,\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\nasync function handleLivepeer({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode,\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    console.log(\"Livepeer provider api key:\", apiKey);\n    if (!apiKey) {\n        throw new Error(\n            \"Livepeer provider requires LIVEPEER_GATEWAY_URL to be configured\"\n        );\n    }\n\n    const livepeerClient = createOpenAI({\n        apiKey,\n        baseURL: apiKey,\n        fetch: runtime.fetch\n    });\n    return aiGenerateObject({\n        model: livepeerClient.languageModel(model),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for Secret AI models.\n *\n * @param {ProviderOptions} options - Options specific to Secret AI.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleSecretAi({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    provider,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const secretAiProvider = createOllama({\n        baseURL: getEndpoint(provider) + \"/api\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${apiKey}`,\n        },\n        fetch: runtime.fetch\n    });\n    const secretAi = secretAiProvider(model);\n    return aiGenerateObject({\n        model: secretAi,\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n/**\n * Handles object generation for NEAR AI models.\n *\n * @param {ProviderOptions} options - Options specific to NEAR AI.\n * @returns {Promise<GenerateObjectResult<unknown>>} - A promise that resolves to generated objects.\n */\nasync function handleNearAi({\n    model,\n    apiKey,\n    schema,\n    schemaName,\n    schemaDescription,\n    mode = \"json\",\n    modelOptions,\n    runtime,\n}: ProviderOptions): Promise<GenerationResult> {\n    const nearai = createOpenAI({ \n        apiKey, \n        baseURL: models.nearai.endpoint,\n        fetch: runtime.fetch \n    });\n    const settings = schema ? { structuredOutputs: true } : undefined;\n    return aiGenerateObject({\n        model: nearai.languageModel(model, settings),\n        schema,\n        schemaName,\n        schemaDescription,\n        mode,\n        ...modelOptions,\n    });\n}\n\n// Add type definition for Together AI response\ninterface TogetherAIImageResponse {\n    data: Array<{\n        url: string;\n        content_type?: string;\n        image_type?: string;\n    }>;\n}\n\n// doesn't belong here\nexport async function generateTweetActions({\n    runtime,\n    context,\n    modelClass,\n}: {\n    runtime: IAgentRuntime;\n    context: string;\n    modelClass: ModelClass;\n}): Promise<ActionResponse | null> {\n    let retryDelay = 1000;\n    while (true) {\n        try {\n            const response = await generateText({\n                runtime,\n                context,\n                modelClass,\n            });\n            elizaLogger.debug(\n                \"Received response from generateText for tweet actions:\",\n                response\n            );\n            const { actions } = parseActionResponseFromText(response.trim());\n            if (actions) {\n                elizaLogger.debug(\"Parsed tweet actions:\", actions);\n                return actions;\n            } else {\n                elizaLogger.debug(\"generateTweetActions no valid response\");\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in generateTweetActions:\", error);\n            if (\n                error instanceof TypeError &&\n                error.message.includes(\"queueTextCompletion\")\n            ) {\n                elizaLogger.error(\n                    \"TypeError: Cannot read properties of null (reading 'queueTextCompletion')\"\n                );\n            }\n        }\n        elizaLogger.log(`Retrying in ${retryDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        retryDelay *= 2;\n    }\n}\n","import type {\n    IAgentRuntime,\n    Goal,\n    Objective,\n    UUID,\n} from \"./types.ts\";\n\nexport const getGoals = async ({\n    runtime,\n    roomId,\n    userId,\n    onlyInProgress = true,\n    count = 5,\n}: {\n    runtime: IAgentRuntime;\n    roomId: UUID;\n    userId?: UUID;\n    onlyInProgress?: boolean;\n    count?: number;\n}) => {\n    return runtime.databaseAdapter.getGoals({\n        agentId: runtime.agentId,\n        roomId,\n        userId,\n        onlyInProgress,\n        count,\n    });\n};\n\nexport const formatGoalsAsString = ({ goals }: { goals: Goal[] }) => {\n    const goalStrings = goals.map((goal: Goal) => {\n        const header = `Goal: ${goal.name}\\nid: ${goal.id}`;\n        const objectives =\n            \"Objectives:\\n\" +\n            goal.objectives\n                .map((objective: Objective) => {\n                    return `- ${objective.completed ? \"[x]\" : \"[ ]\"} ${objective.description} ${objective.completed ? \" (DONE)\" : \" (IN PROGRESS)\"}`;\n                })\n                .join(\"\\n\");\n        return `${header}\\n${objectives}`;\n    });\n    return goalStrings.join(\"\\n\");\n};\n\nexport const updateGoal = async ({\n    runtime,\n    goal,\n}: {\n    runtime: IAgentRuntime;\n    goal: Goal;\n}) => {\n    return runtime.databaseAdapter.updateGoal(goal);\n};\n\nexport const createGoal = async ({\n    runtime,\n    goal,\n}: {\n    runtime: IAgentRuntime;\n    goal: Goal;\n}) => {\n    return runtime.databaseAdapter.createGoal(goal);\n};\n","import { embed, getEmbeddingZeroVector } from \"./embedding.ts\";\nimport elizaLogger from \"./logger.ts\";\nimport type {\n    IAgentRuntime,\n    IMemoryManager,\n    Memory,\n    UUID,\n} from \"./types.ts\";\n\nconst defaultMatchThreshold = 0.1;\nconst defaultMatchCount = 10;\n\n/**\n * Manage memories in the database.\n */\nexport class MemoryManager implements IMemoryManager {\n    /**\n     * The AgentRuntime instance associated with this manager.\n     */\n    runtime: IAgentRuntime;\n\n    /**\n     * The name of the database table this manager operates on.\n     */\n    tableName: string;\n\n    /**\n     * Constructs a new MemoryManager instance.\n     * @param opts Options for the manager.\n     * @param opts.tableName The name of the table this manager will operate on.\n     * @param opts.runtime The AgentRuntime instance associated with this manager.\n     */\n    constructor(opts: { tableName: string; runtime: IAgentRuntime }) {\n        this.runtime = opts.runtime;\n        this.tableName = opts.tableName;\n    }\n\n    /**\n     * Adds an embedding vector to a memory object. If the memory already has an embedding, it is returned as is.\n     * @param memory The memory object to add an embedding to.\n     * @returns A Promise resolving to the memory object, potentially updated with an embedding vector.\n     */\n    /**\n     * Adds an embedding vector to a memory object if one doesn't already exist.\n     * The embedding is generated from the memory's text content using the runtime's\n     * embedding model. If the memory has no text content, an error is thrown.\n     *\n     * @param memory The memory object to add an embedding to\n     * @returns The memory object with an embedding vector added\n     * @throws Error if the memory content is empty\n     */\n    async addEmbeddingToMemory(memory: Memory): Promise<Memory> {\n        // Return early if embedding already exists\n        if (memory.embedding) {\n            return memory;\n        }\n\n        const memoryText = memory.content.text;\n\n        // Validate memory has text content\n        if (!memoryText) {\n            throw new Error(\n                \"Cannot generate embedding: Memory content is empty\"\n            );\n        }\n\n        try {\n            // Generate embedding from text content\n            memory.embedding = await embed(this.runtime, memoryText);\n        } catch (error) {\n            elizaLogger.error(\"Failed to generate embedding:\", error);\n            // Fallback to zero vector if embedding fails\n            memory.embedding = getEmbeddingZeroVector().slice();\n        }\n\n        return memory;\n    }\n\n    /**\n     * Retrieves a list of memories by user IDs, with optional deduplication.\n     * @param opts Options including user IDs, count, and uniqueness.\n     * @param opts.roomId The room ID to retrieve memories for.\n     * @param opts.count The number of memories to retrieve.\n     * @param opts.unique Whether to retrieve unique memories only.\n     * @returns A Promise resolving to an array of Memory objects.\n     */\n    async getMemories({\n        roomId,\n        count = 10,\n        unique = true,\n        start,\n        end,\n    }: {\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n        start?: number;\n        end?: number;\n    }): Promise<Memory[]> {\n        return await this.runtime.databaseAdapter.getMemories({\n            roomId,\n            count,\n            unique,\n            tableName: this.tableName,\n            agentId: this.runtime.agentId,\n            start,\n            end,\n        });\n    }\n\n    async getCachedEmbeddings(content: string): Promise<\n        {\n            embedding: number[];\n            levenshtein_score: number;\n        }[]\n    > {\n        return await this.runtime.databaseAdapter.getCachedEmbeddings({\n            query_table_name: this.tableName,\n            query_threshold: 2,\n            query_input: content,\n            query_field_name: \"content\",\n            query_field_sub_name: \"text\",\n            query_match_count: 10,\n        });\n    }\n\n    /**\n     * Searches for memories similar to a given embedding vector.\n     * @param embedding The embedding vector to search with.\n     * @param opts Options including match threshold, count, user IDs, and uniqueness.\n     * @param opts.match_threshold The similarity threshold for matching memories.\n     * @param opts.count The maximum number of memories to retrieve.\n     * @param opts.roomId The room ID to retrieve memories for.\n     * @param opts.unique Whether to retrieve unique memories only.\n     * @returns A Promise resolving to an array of Memory objects that match the embedding.\n     */\n    async searchMemoriesByEmbedding(\n        embedding: number[],\n        opts: {\n            match_threshold?: number;\n            count?: number;\n            roomId: UUID;\n            unique?: boolean;\n        }\n    ): Promise<Memory[]> {\n        const {\n            match_threshold = defaultMatchThreshold,\n            count = defaultMatchCount,\n            roomId,\n            unique,\n        } = opts;\n\n        const result = await this.runtime.databaseAdapter.searchMemories({\n            tableName: this.tableName,\n            roomId,\n            agentId: this.runtime.agentId,\n            embedding: embedding,\n            match_threshold: match_threshold,\n            match_count: count,\n            unique: !!unique,\n        });\n\n        return result;\n    }\n\n    /**\n     * Creates a new memory in the database, with an option to check for similarity before insertion.\n     * @param memory The memory object to create.\n     * @param unique Whether to check for similarity before insertion.\n     * @returns A Promise that resolves when the operation completes.\n     */\n    async createMemory(memory: Memory, unique = false): Promise<void> {\n        // TODO: check memory.agentId == this.runtime.agentId\n\n        const existingMessage =\n            await this.runtime.databaseAdapter.getMemoryById(memory.id);\n\n        if (existingMessage) {\n            elizaLogger.debug(\"Memory already exists, skipping\");\n            return;\n        }\n\n        elizaLogger.log(\"Creating Memory\", memory.id, memory.content.text);\n\n        await this.runtime.databaseAdapter.createMemory(\n            memory,\n            this.tableName,\n            unique\n        );\n    }\n\n    async getMemoriesByRoomIds(params: { roomIds: UUID[], limit?: number; }): Promise<Memory[]> {\n        return await this.runtime.databaseAdapter.getMemoriesByRoomIds({\n            tableName: this.tableName,\n            agentId: this.runtime.agentId,\n            roomIds: params.roomIds,\n            limit: params.limit\n        });\n    }\n\n    async getMemoryById(id: UUID): Promise<Memory | null> {\n        const result = await this.runtime.databaseAdapter.getMemoryById(id);\n        if (result && result.agentId !== this.runtime.agentId) return null;\n        return result;\n    }\n\n    /**\n     * Removes a memory from the database by its ID.\n     * @param memoryId The ID of the memory to remove.\n     * @returns A Promise that resolves when the operation completes.\n     */\n    async removeMemory(memoryId: UUID): Promise<void> {\n        await this.runtime.databaseAdapter.removeMemory(\n            memoryId,\n            this.tableName\n        );\n    }\n\n    /**\n     * Removes all memories associated with a set of user IDs.\n     * @param roomId The room ID to remove memories for.\n     * @returns A Promise that resolves when the operation completes.\n     */\n    async removeAllMemories(roomId: UUID): Promise<void> {\n        await this.runtime.databaseAdapter.removeAllMemories(\n            roomId,\n            this.tableName\n        );\n    }\n\n    /**\n     * Counts the number of memories associated with a set of user IDs, with an option for uniqueness.\n     * @param roomId The room ID to count memories for.\n     * @param unique Whether to count unique memories only.\n     * @returns A Promise resolving to the count of memories.\n     */\n    async countMemories(roomId: UUID, unique = true): Promise<number> {\n        return await this.runtime.databaseAdapter.countMemories(\n            roomId,\n            unique,\n            this.tableName\n        );\n    }\n}\n","import type {\n    IAgentRuntime,\n    Actor,\n    Content,\n    Memory,\n    UUID,\n} from \"./types.ts\";\n\n/**\n * Get details for a list of actors.\n */\nexport async function getActorDetails({\n    runtime,\n    roomId,\n}: {\n    runtime: IAgentRuntime;\n    roomId: UUID;\n}) {\n    const participantIds =\n        await runtime.databaseAdapter.getParticipantsForRoom(roomId);\n    const actors = await Promise.all(\n        participantIds.map(async (userId) => {\n            const account =\n                await runtime.databaseAdapter.getAccountById(userId);\n            if (account) {\n                return {\n                    id: account.id,\n                    name: account.name,\n                    username: account.username,\n                    details: account.details,\n                };\n            }\n            return null;\n        })\n    );\n\n    return actors.filter((actor): actor is Actor => actor !== null);\n}\n\n/**\n * Format actors into a string\n * @param actors - list of actors\n * @returns string\n */\nexport function formatActors({ actors }: { actors: Actor[] }) {\n    const actorStrings = actors.map((actor: Actor) => {\n        const header = `${actor.name}${actor.details?.tagline ? \": \" + actor.details?.tagline : \"\"}${actor.details?.summary ? \"\\n\" + actor.details?.summary : \"\"}`;\n        return header;\n    });\n    const finalActorStrings = actorStrings.join(\"\\n\");\n    return finalActorStrings;\n}\n\n/**\n * Format messages into a string\n * @param messages - list of messages\n * @param actors - list of actors\n * @returns string\n */\nexport const formatMessages = ({\n    messages,\n    actors,\n}: {\n    messages: Memory[];\n    actors: Actor[];\n}) => {\n    const messageStrings = messages\n        .reverse()\n        .filter((message: Memory) => message.userId)\n        .map((message: Memory) => {\n            const messageContent = (message.content as Content).text;\n            const messageAction = (message.content as Content).action;\n            const formattedName =\n                actors.find((actor: Actor) => actor.id === message.userId)\n                    ?.name || \"Unknown User\";\n\n            const attachments = (message.content as Content).attachments;\n\n            const attachmentString =\n                attachments && attachments.length > 0\n                    ? ` (Attachments: ${attachments.map((media) => `[${media.id} - ${media.title} (${media.url})]`).join(\", \")})`\n                    : \"\";\n\n            const timestamp = formatTimestamp(message.createdAt);\n\n            const shortId = message.userId.slice(-5);\n\n            return `(${timestamp}) [${shortId}] ${formattedName}: ${messageContent}${attachmentString}${messageAction && messageAction !== \"null\" ? ` (${messageAction})` : \"\"}`;\n        })\n        .join(\"\\n\");\n    return messageStrings;\n};\n\nexport const formatTimestamp = (messageDate: number) => {\n    const now = new Date();\n    const diff = now.getTime() - messageDate;\n\n    const absDiff = Math.abs(diff);\n    const seconds = Math.floor(absDiff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (absDiff < 60000) {\n        return \"just now\";\n    } else if (minutes < 60) {\n        return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\n    } else if (hours < 24) {\n        return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\n    } else {\n        return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\n    }\n};\n","import { formatTimestamp } from \"./messages.ts\";\nimport type { Actor, Memory } from \"./types.ts\";\n\nexport const formatPosts = ({\n    messages,\n    actors,\n    conversationHeader = true,\n}: {\n    messages: Memory[];\n    actors: Actor[];\n    conversationHeader?: boolean;\n}) => {\n    // Group messages by roomId\n    const groupedMessages: { [roomId: string]: Memory[] } = {};\n    messages.forEach((message) => {\n        if (message.roomId) {\n            if (!groupedMessages[message.roomId]) {\n                groupedMessages[message.roomId] = [];\n            }\n            groupedMessages[message.roomId].push(message);\n        }\n    });\n\n    // Sort messages within each roomId by createdAt (oldest to newest)\n    Object.values(groupedMessages).forEach((roomMessages) => {\n        roomMessages.sort((a, b) => a.createdAt - b.createdAt);\n    });\n\n    // Sort rooms by the newest message's createdAt\n    const sortedRooms = Object.entries(groupedMessages).sort(\n        ([, messagesA], [, messagesB]) =>\n            messagesB[messagesB.length - 1].createdAt -\n            messagesA[messagesA.length - 1].createdAt\n    );\n\n    const formattedPosts = sortedRooms.map(([roomId, roomMessages]) => {\n        const messageStrings = roomMessages\n            .filter((message: Memory) => message.userId)\n            .map((message: Memory) => {\n                const actor = actors.find(\n                    (actor: Actor) => actor.id === message.userId\n                );\n                const userName = actor?.name || \"Unknown User\";\n                const displayName = actor?.username || \"unknown\";\n\n                return `Name: ${userName} (@${displayName})\nID: ${message.id}${message.content.inReplyTo ? `\\nIn reply to: ${message.content.inReplyTo}` : \"\"}\nDate: ${formatTimestamp(message.createdAt)}\nText:\n${message.content.text}`;\n            });\n\n        const header = conversationHeader\n            ? `Conversation: ${roomId.slice(-5)}\\n`\n            : \"\";\n        return `${header}${messageStrings.join(\"\\n\\n\")}`;\n    });\n\n    return formattedPosts.join(\"\\n\\n\");\n};\n","import type { IAgentRuntime, State, Memory } from \"./types.ts\";\n\n/**\n * Formats provider outputs into a string which can be injected into the context.\n * @param runtime The AgentRuntime object.\n * @param message The incoming message object.\n * @param state The current state object.\n * @returns A string that concatenates the outputs of each provider.\n */\nexport async function getProviders(\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State\n) {\n    const providerResults = (\n        await Promise.all(\n            runtime.providers.map(async (provider) => {\n                return await provider.get(runtime, message, state);\n            })\n        )\n    ).filter((result) => result != null && result !== \"\");\n\n    return providerResults.join(\"\\n\");\n}\n","import type { IAgentRuntime, Relationship, UUID } from \"./types.ts\";\n\nexport async function createRelationship({\n    runtime,\n    userA,\n    userB,\n}: {\n    runtime: IAgentRuntime;\n    userA: UUID;\n    userB: UUID;\n}): Promise<boolean> {\n    return runtime.databaseAdapter.createRelationship({\n        userA,\n        userB,\n    });\n}\n\nexport async function getRelationship({\n    runtime,\n    userA,\n    userB,\n}: {\n    runtime: IAgentRuntime;\n    userA: UUID;\n    userB: UUID;\n}) {\n    return runtime.databaseAdapter.getRelationship({\n        userA,\n        userB,\n    });\n}\n\nexport async function getRelationships({\n    runtime,\n    userId,\n}: {\n    runtime: IAgentRuntime;\n    userId: UUID;\n}) {\n    return runtime.databaseAdapter.getRelationships({ userId });\n}\n\nexport async function formatRelationships({\n    runtime,\n    userId,\n}: {\n    runtime: IAgentRuntime;\n    userId: UUID;\n}) {\n    const relationships = await getRelationships({ runtime, userId });\n\n    const formattedRelationships = relationships.map(\n        (relationship: Relationship) => {\n            const { userA, userB } = relationship;\n\n            if (userA === userId) {\n                return userB;\n            }\n\n            return userA;\n        }\n    );\n\n    return formattedRelationships;\n}\n","import { readFile } from \"fs/promises\";\nimport { join } from \"path\";\nimport { names, uniqueNamesGenerator } from \"unique-names-generator\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n    composeActionExamples,\n    formatActionNames,\n    formatActions,\n} from \"./actions.ts\";\nimport { addHeader, composeContext } from \"./context.ts\";\nimport {\n    evaluationTemplate,\n    formatEvaluatorExamples,\n    formatEvaluatorNames,\n    formatEvaluators,\n} from \"./evaluators.ts\";\nimport { generateText } from \"./generation.ts\";\nimport { formatGoalsAsString, getGoals } from \"./goals.ts\";\nimport { elizaLogger } from \"./index.ts\";\nimport knowledge from \"./knowledge.ts\";\nimport { MemoryManager } from \"./memory.ts\";\nimport { formatActors, formatMessages, getActorDetails } from \"./messages.ts\";\nimport { parseJsonArrayFromText } from \"./parsing.ts\";\nimport { formatPosts } from \"./posts.ts\";\nimport { getProviders } from \"./providers.ts\";\nimport { RAGKnowledgeManager } from \"./ragknowledge.ts\";\nimport settings from \"./settings.ts\";\nimport {\n    type Character,\n    type Goal,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type ICacheManager,\n    type IDatabaseAdapter,\n    type IMemoryManager,\n    type IRAGKnowledgeManager,\n    // type IVerifiableInferenceAdapter,\n    type KnowledgeItem,\n    // RAGKnowledgeItem,\n    //Media,\n    ModelClass,\n    ModelProviderName,\n    type Plugin,\n    type Provider,\n    type Adapter,\n    type Service,\n    type ServiceType,\n    type State,\n    type UUID,\n    type Action,\n    type Actor,\n    type Evaluator,\n    type Memory,\n    type DirectoryItem,\n    type ClientInstance,\n} from \"./types.ts\";\nimport { stringToUuid } from \"./uuid.ts\";\nimport { glob } from \"glob\";\nimport { existsSync } from \"fs\";\n/**\n * Represents the runtime environment for an agent, handling message processing,\n * action registration, and interaction with external services like OpenAI and Supabase.\n */\n\nfunction isDirectoryItem(item: any): item is DirectoryItem {\n    return (\n        typeof item === \"object\" &&\n        item !== null &&\n        \"directory\" in item &&\n        typeof item.directory === \"string\"\n    );\n}\n\nexport class AgentRuntime implements IAgentRuntime {\n    /**\n     * Default count for recent messages to be kept in memory.\n     * @private\n     */\n    readonly #conversationLength = 32 as number;\n    /**\n     * The ID of the agent\n     */\n    agentId: UUID;\n    /**\n     * The base URL of the server where the agent's requests are processed.\n     */\n    serverUrl = \"http://localhost:7998\";\n\n    /**\n     * The database adapter used for interacting with the database.\n     */\n    databaseAdapter: IDatabaseAdapter;\n\n    /**\n     * Authentication token used for securing requests.\n     */\n    token: string | null;\n\n    /**\n     * Custom actions that the agent can perform.\n     */\n    actions: Action[] = [];\n\n    /**\n     * Evaluators used to assess and guide the agent's responses.\n     */\n    evaluators: Evaluator[] = [];\n\n    /**\n     * Context providers used to provide context for message generation.\n     */\n    providers: Provider[] = [];\n\n    /**\n     * Database adapters used to interact with the database.\n     */\n    adapters: Adapter[] = [];\n\n    plugins: Plugin[] = [];\n\n    /**\n     * The model to use for generateText.\n     */\n    modelProvider: ModelProviderName;\n\n    /**\n     * The model to use for generateImage.\n     */\n    imageModelProvider: ModelProviderName;\n\n    /**\n     * The model to use for describing images.\n     */\n    imageVisionModelProvider: ModelProviderName;\n\n    /**\n     * Fetch function to use\n     * Some environments may not have access to the global fetch function and need a custom fetch override.\n     */\n    fetch = fetch;\n\n    /**\n     * The character to use for the agent\n     */\n    character: Character;\n\n    /**\n     * Store messages that are sent and received by the agent.\n     */\n    messageManager: IMemoryManager;\n\n    /**\n     * Store and recall descriptions of users based on conversations.\n     */\n    descriptionManager: IMemoryManager;\n\n    /**\n     * Manage the creation and recall of static information (documents, historical game lore, etc)\n     */\n    loreManager: IMemoryManager;\n\n    /**\n     * Hold large documents that can be referenced\n     */\n    documentsManager: IMemoryManager;\n\n    /**\n     * Searchable document fragments\n     */\n    knowledgeManager: IMemoryManager;\n\n    ragKnowledgeManager: IRAGKnowledgeManager;\n\n    private readonly knowledgeRoot: string;\n\n    services: Map<ServiceType, Service> = new Map();\n    memoryManagers: Map<string, IMemoryManager> = new Map();\n    cacheManager: ICacheManager;\n    clients: ClientInstance[] = [];\n\n    // verifiableInferenceAdapter?: IVerifiableInferenceAdapter;\n\n    registerMemoryManager(manager: IMemoryManager): void {\n        if (!manager.tableName) {\n            throw new Error(\"Memory manager must have a tableName\");\n        }\n\n        if (this.memoryManagers.has(manager.tableName)) {\n            elizaLogger.warn(\n                `Memory manager ${manager.tableName} is already registered. Skipping registration.`,\n            );\n            return;\n        }\n\n        this.memoryManagers.set(manager.tableName, manager);\n    }\n\n    getMemoryManager(tableName: string): IMemoryManager | null {\n        return this.memoryManagers.get(tableName) || null;\n    }\n\n    getService<T extends Service>(service: ServiceType): T | null {\n        const serviceInstance = this.services.get(service);\n        if (!serviceInstance) {\n            elizaLogger.error(`Service ${service} not found`);\n            return null;\n        }\n        return serviceInstance as T;\n    }\n\n    async registerService(service: Service): Promise<void> {\n        const serviceType = service.serviceType;\n        elizaLogger.log(`${this.character.name}(${this.agentId}) - Registering service:`, serviceType);\n\n        if (this.services.has(serviceType)) {\n            elizaLogger.warn(\n                `${this.character.name}(${this.agentId}) - Service ${serviceType} is already registered. Skipping registration.`\n            );\n            return;\n        }\n\n        // Add the service to the services map\n        this.services.set(serviceType, service);\n        elizaLogger.success(`${this.character.name}(${this.agentId}) - Service ${serviceType} registered successfully`);\n    }\n\n    /**\n     * Creates an instance of AgentRuntime.\n     * @param opts - The options for configuring the AgentRuntime.\n     * @param opts.conversationLength - The number of messages to hold in the recent message cache.\n     * @param opts.token - The JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker.\n     * @param opts.serverUrl - The URL of the worker.\n     * @param opts.actions - Optional custom actions.\n     * @param opts.evaluators - Optional custom evaluators.\n     * @param opts.services - Optional custom services.\n     * @param opts.memoryManagers - Optional custom memory managers.\n     * @param opts.providers - Optional context providers.\n     * @param opts.model - The model to use for generateText.\n     * @param opts.embeddingModel - The model to use for embedding.\n     * @param opts.agentId - Optional ID of the agent.\n     * @param opts.databaseAdapter - The database adapter used for interacting with the database.\n     * @param opts.fetch - Custom fetch function to use for making requests.\n     */\n\n    constructor(opts: {\n        conversationLength?: number; // number of messages to hold in the recent message cache\n        agentId?: UUID; // ID of the agent\n        character?: Character; // The character to use for the agent\n        token: string; // JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker\n        serverUrl?: string; // The URL of the worker\n        actions?: Action[]; // Optional custom actions\n        evaluators?: Evaluator[]; // Optional custom evaluators\n        plugins?: Plugin[];\n        providers?: Provider[];\n        modelProvider: ModelProviderName;\n\n        services?: Service[]; // Map of service name to service instance\n        managers?: IMemoryManager[]; // Map of table name to memory manager\n        databaseAdapter?: IDatabaseAdapter; // The database adapter used for interacting with the database\n        fetch?: typeof fetch | unknown;\n        speechModelPath?: string;\n        cacheManager?: ICacheManager;\n        logging?: boolean;\n        // verifiableInferenceAdapter?: IVerifiableInferenceAdapter;\n    }) {\n        // use the character id if it exists, otherwise use the agentId if it is passed in, otherwise use the character name\n        this.agentId =\n            opts.character?.id ??\n            opts?.agentId ??\n            stringToUuid(opts.character?.name ?? uuidv4());\n        this.character = opts.character;\n\n        if(!this.character) {\n            throw new Error(\"Character input is required\");\n        }\n\n        elizaLogger.info(`${this.character.name}(${this.agentId}) - Initializing AgentRuntime with options:`, {\n            character: opts.character?.name,\n            modelProvider: opts.modelProvider,\n            characterModelProvider: opts.character?.modelProvider,\n        });\n\n        elizaLogger.debug(\n            `[AgentRuntime] Process working directory: ${process.cwd()}`,\n        );\n\n        // Define the root path once\n        this.knowledgeRoot = join(\n            process.cwd(),\n            \"..\",\n            \"characters\",\n            \"knowledge\",\n        );\n\n        elizaLogger.debug(\n            `[AgentRuntime] Process knowledgeRoot: ${this.knowledgeRoot}`,\n        );\n\n        this.#conversationLength =\n            opts.conversationLength ?? this.#conversationLength;\n\n        this.databaseAdapter = opts.databaseAdapter;\n\n        elizaLogger.success(`Agent ID: ${this.agentId}`);\n\n        this.fetch = (opts.fetch as typeof fetch) ?? this.fetch;\n\n        this.cacheManager = opts.cacheManager;\n\n        this.messageManager = new MemoryManager({\n            runtime: this,\n            tableName: \"messages\",\n        });\n\n        this.descriptionManager = new MemoryManager({\n            runtime: this,\n            tableName: \"descriptions\",\n        });\n\n        this.loreManager = new MemoryManager({\n            runtime: this,\n            tableName: \"lore\",\n        });\n\n        this.documentsManager = new MemoryManager({\n            runtime: this,\n            tableName: \"documents\",\n        });\n\n        this.knowledgeManager = new MemoryManager({\n            runtime: this,\n            tableName: \"fragments\",\n        });\n\n        this.ragKnowledgeManager = new RAGKnowledgeManager({\n            runtime: this,\n            tableName: \"knowledge\",\n            knowledgeRoot: this.knowledgeRoot,\n        });\n\n        (opts.managers ?? []).forEach((manager: IMemoryManager) => {\n            this.registerMemoryManager(manager);\n        });\n\n        (opts.services ?? []).forEach((service: Service) => {\n            this.registerService(service);\n        });\n\n        this.serverUrl = opts.serverUrl ?? this.serverUrl;\n\n        elizaLogger.info(`${this.character.name}(${this.agentId}) - Setting Model Provider:`, {\n            characterModelProvider: this.character.modelProvider,\n            optsModelProvider: opts.modelProvider,\n            currentModelProvider: this.modelProvider,\n            finalSelection:\n                this.character.modelProvider ??\n                opts.modelProvider ??\n                this.modelProvider,\n        });\n\n        this.modelProvider =\n            this.character.modelProvider ??\n            opts.modelProvider ??\n            this.modelProvider;\n\n        this.imageModelProvider =\n            this.character.imageModelProvider ?? this.modelProvider;\n        \n        this.imageVisionModelProvider =\n            this.character.imageVisionModelProvider ?? this.modelProvider;\n            \n        elizaLogger.info(\n          `${this.character.name}(${this.agentId}) - Selected model provider:`,\n          this.modelProvider\n        );\n\n        elizaLogger.info(\n          `${this.character.name}(${this.agentId}) - Selected image model provider:`,\n          this.imageModelProvider\n        );\n\n        elizaLogger.info(\n            `${this.character.name}(${this.agentId}) - Selected image vision model provider:`,\n            this.imageVisionModelProvider\n        );\n\n        // Validate model provider\n        if (!Object.values(ModelProviderName).includes(this.modelProvider)) {\n            elizaLogger.error(\"Invalid model provider:\", this.modelProvider);\n            elizaLogger.error(\n                \"Available providers:\",\n                Object.values(ModelProviderName),\n            );\n            throw new Error(`Invalid model provider: ${this.modelProvider}`);\n        }\n\n        if (!this.serverUrl) {\n            elizaLogger.warn(\"No serverUrl provided, defaulting to localhost\");\n        }\n\n        this.token = opts.token;\n\n        this.plugins = [\n            ...(opts.character?.plugins ?? []),\n            ...(opts.plugins ?? []),\n        ];\n\n        this.plugins.forEach((plugin) => {\n            plugin.actions?.forEach((action) => {\n                this.registerAction(action);\n            });\n\n            plugin.evaluators?.forEach((evaluator) => {\n                this.registerEvaluator(evaluator);\n            });\n\n            plugin.services?.forEach((service) => {\n                this.registerService(service);\n            });\n\n            plugin.providers?.forEach((provider) => {\n                this.registerContextProvider(provider);\n            });\n\n            plugin.adapters?.forEach((adapter) => {\n                this.registerAdapter(adapter);\n            });\n        });\n\n        (opts.actions ?? []).forEach((action) => {\n            this.registerAction(action);\n        });\n\n        (opts.providers ?? []).forEach((provider) => {\n            this.registerContextProvider(provider);\n        });\n\n        (opts.evaluators ?? []).forEach((evaluator: Evaluator) => {\n            this.registerEvaluator(evaluator);\n        });\n\n        // this.verifiableInferenceAdapter = opts.verifiableInferenceAdapter;\n    }\n\n    private async initializeDatabase() {\n        // By convention, we create a user and room using the agent id.\n        // Memories related to it are considered global context for the agent.\n        this.ensureRoomExists(this.agentId);\n        this.ensureUserExists(\n            this.agentId,\n            this.character.username || this.character.name,\n            this.character.name,\n        ).then(() => {\n            // postgres needs the user to exist before you can add a participant\n            this.ensureParticipantExists(this.agentId, this.agentId);\n        });\n    }\n\n    async initialize() {\n        this.initializeDatabase();\n\n        for (const [serviceType, service] of this.services.entries()) {\n            try {\n                await service.initialize(this);\n                this.services.set(serviceType, service);\n                elizaLogger.success(\n                    `${this.character.name}(${this.agentId}) - Service ${serviceType} initialized successfully`\n                );\n            } catch (error) {\n                elizaLogger.error(\n                    `${this.character.name}(${this.agentId}) - Failed to initialize service ${serviceType}:`,\n                    error\n                );\n                throw error;\n            }\n        }\n\n        // should already be initiailized\n        /*\n        for (const plugin of this.plugins) {\n            if (plugin.services)\n                await Promise.all(\n                    plugin.services?.map((service) => service.initialize(this)),\n                );\n        }\n        */\n\n        if (\n            this.character &&\n            this.character.knowledge &&\n            this.character.knowledge.length > 0\n        ) {\n            elizaLogger.info(\n                `[RAG Check] RAG Knowledge enabled: ${this.character.settings.ragKnowledge ? true : false}`,\n            );\n            elizaLogger.info(\n                `[RAG Check] Knowledge items:`,\n                this.character.knowledge,\n            );\n\n            if (this.character.settings.ragKnowledge) {\n                // Type guards with logging for each knowledge type\n                const [directoryKnowledge, pathKnowledge, stringKnowledge] =\n                    this.character.knowledge.reduce(\n                        (acc, item) => {\n                            if (typeof item === \"object\") {\n                                if (isDirectoryItem(item)) {\n                                    elizaLogger.debug(\n                                        `[RAG Filter] Found directory item: ${JSON.stringify(item)}`,\n                                    );\n                                    acc[0].push(item);\n                                } else if (\"path\" in item) {\n                                    elizaLogger.debug(\n                                        `[RAG Filter] Found path item: ${JSON.stringify(item)}`,\n                                    );\n                                    acc[1].push(item);\n                                }\n                            } else if (typeof item === \"string\") {\n                                elizaLogger.debug(\n                                    `[RAG Filter] Found string item: ${item.slice(0, 100)}...`,\n                                );\n                                acc[2].push(item);\n                            }\n                            return acc;\n                        },\n                        [[], [], []] as [\n                            Array<{ directory: string; shared?: boolean }>,\n                            Array<{ path: string; shared?: boolean }>,\n                            Array<string>,\n                        ],\n                    );\n\n                elizaLogger.info(\n                    `[RAG Summary] Found ${directoryKnowledge.length} directories, ${pathKnowledge.length} paths, and ${stringKnowledge.length} strings`,\n                );\n\n                // Process each type of knowledge\n                if (directoryKnowledge.length > 0) {\n                    elizaLogger.info(\n                        `[RAG Process] Processing directory knowledge sources:`,\n                    );\n                    for (const dir of directoryKnowledge) {\n                        elizaLogger.info(\n                            `  - Directory: ${dir.directory} (shared: ${!!dir.shared})`,\n                        );\n                        await this.processCharacterRAGDirectory(dir);\n                    }\n                }\n\n                if (pathKnowledge.length > 0) {\n                    elizaLogger.info(\n                        `[RAG Process] Processing individual file knowledge sources`,\n                    );\n                    await this.processCharacterRAGKnowledge(pathKnowledge);\n                }\n\n                if (stringKnowledge.length > 0) {\n                    elizaLogger.info(\n                        `[RAG Process] Processing direct string knowledge`,\n                    );\n                    await this.processCharacterRAGKnowledge(stringKnowledge);\n                }\n            } else {\n                // Non-RAG mode: only process string knowledge\n                const stringKnowledge = this.character.knowledge.filter(\n                    (item): item is string => typeof item === \"string\",\n                );\n                await this.processCharacterKnowledge(stringKnowledge);\n            }\n\n            // After all new knowledge is processed, clean up any deleted files\n            elizaLogger.info(\n                `[RAG Cleanup] Starting cleanup of deleted knowledge files`,\n            );\n            await this.ragKnowledgeManager.cleanupDeletedKnowledgeFiles();\n            elizaLogger.info(`[RAG Cleanup] Cleanup complete`);\n        }\n    }\n\n    async stop() {\n        elizaLogger.debug(\"runtime::stop - character\", this.character.name);\n        // stop services, they don't have a stop function\n        // just initialize\n\n        // plugins\n        // have actions, providers, evaluators (no start/stop)\n        // services (just initialized), clients\n\n        // client have a start\n        for (const c of this.clients) {\n            elizaLogger.log(\n                \"runtime::stop - requesting\",\n                c,\n                \"client stop for\",\n                this.character.name,\n            );\n            c.stop(this);\n        }\n        // we don't need to unregister with directClient\n        // don't need to worry about knowledge\n    }\n\n    /**\n     * Processes character knowledge by creating document memories and fragment memories.\n     * This function takes an array of knowledge items, creates a document memory for each item if it doesn't exist,\n     * then chunks the content into fragments, embeds each fragment, and creates fragment memories.\n     * @param knowledge An array of knowledge items containing id, path, and content.\n     */\n    private async processCharacterKnowledge(items: string[]) {\n        for (const item of items) {\n            const knowledgeId = stringToUuid(item);\n            const existingDocument =\n                await this.documentsManager.getMemoryById(knowledgeId);\n            if (existingDocument) {\n                continue;\n            }\n\n            elizaLogger.info(\n                \"Processing knowledge for \",\n                this.character.name,\n                \" - \",\n                item.slice(0, 100),\n            );\n\n            await knowledge.set(this, {\n                id: knowledgeId,\n                content: {\n                    text: item,\n                },\n            });\n        }\n    }\n\n    /**\n     * Processes character knowledge by creating document memories and fragment memories.\n     * This function takes an array of knowledge items, creates a document knowledge for each item if it doesn't exist,\n     * then chunks the content into fragments, embeds each fragment, and creates fragment knowledge.\n     * An array of knowledge items or objects containing id, path, and content.\n     */\n    private async processCharacterRAGKnowledge(\n        items: (string | { path: string; shared?: boolean })[],\n    ) {\n        let hasError = false;\n\n        for (const item of items) {\n            if (!item) continue;\n\n            try {\n                // Check if item is marked as shared\n                let isShared = false;\n                let contentItem = item;\n\n                // Only treat as shared if explicitly marked\n                if (typeof item === \"object\" && \"path\" in item) {\n                    isShared = item.shared === true;\n                    contentItem = item.path;\n                } else {\n                    contentItem = item;\n                }\n\n                // const knowledgeId = stringToUuid(contentItem);\n                const knowledgeId = this.ragKnowledgeManager.generateScopedId(\n                    contentItem,\n                    isShared,\n                );\n                const fileExtension = contentItem\n                    .split(\".\")\n                    .pop()\n                    ?.toLowerCase();\n\n                // Check if it's a file or direct knowledge\n                if (\n                    fileExtension &&\n                    [\"md\", \"txt\", \"pdf\"].includes(fileExtension)\n                ) {\n                    try {\n                        const filePath = join(this.knowledgeRoot, contentItem);\n                        // Get existing knowledge first with more detailed logging\n                        elizaLogger.debug(\"[RAG Query]\", {\n                            knowledgeId,\n                            agentId: this.agentId,\n                            relativePath: contentItem,\n                            fullPath: filePath,\n                            isShared,\n                            knowledgeRoot: this.knowledgeRoot,\n                        });\n\n                        // Get existing knowledge first\n                        const existingKnowledge =\n                            await this.ragKnowledgeManager.getKnowledge({\n                                id: knowledgeId,\n                                agentId: this.agentId, // Keep agentId as it's used in OR query\n                            });\n\n                        elizaLogger.debug(\"[RAG Query Result]\", {\n                            relativePath: contentItem,\n                            fullPath: filePath,\n                            knowledgeId,\n                            isShared,\n                            exists: existingKnowledge.length > 0,\n                            knowledgeCount: existingKnowledge.length,\n                            firstResult: existingKnowledge[0]\n                                ? {\n                                      id: existingKnowledge[0].id,\n                                      agentId: existingKnowledge[0].agentId,\n                                      contentLength:\n                                          existingKnowledge[0].content.text\n                                              .length,\n                                  }\n                                : null,\n                            results: existingKnowledge.map((k) => ({\n                                id: k.id,\n                                agentId: k.agentId,\n                                isBaseKnowledge: !k.id.includes(\"chunk\"),\n                            })),\n                        });\n\n                        // Read file content\n                        const content: string = await readFile(\n                            filePath,\n                            \"utf8\",\n                        );\n                        if (!content) {\n                            hasError = true;\n                            continue;\n                        }\n\n                        if (existingKnowledge.length > 0) {\n                            const existingContent =\n                                existingKnowledge[0].content.text;\n\n                            elizaLogger.debug(\"[RAG Compare]\", {\n                                path: contentItem,\n                                knowledgeId,\n                                isShared,\n                                existingContentLength: existingContent.length,\n                                newContentLength: content.length,\n                                contentSample: content.slice(0, 100),\n                                existingContentSample: existingContent.slice(\n                                    0,\n                                    100,\n                                ),\n                                matches: existingContent === content,\n                            });\n\n                            if (existingContent === content) {\n                                elizaLogger.info(\n                                    `${isShared ? \"Shared knowledge\" : \"Knowledge\"} ${contentItem} unchanged, skipping`,\n                                );\n                                continue;\n                            }\n\n                            // Content changed, remove old knowledge before adding new\n                            elizaLogger.info(\n                                `${isShared ? \"Shared knowledge\" : \"Knowledge\"} ${contentItem} changed, updating...`,\n                            );\n                            await this.ragKnowledgeManager.removeKnowledge(\n                                knowledgeId,\n                            );\n                            await this.ragKnowledgeManager.removeKnowledge(\n                                `${knowledgeId}-chunk-*` as UUID,\n                            );\n                        }\n\n                        elizaLogger.info(\n                            `Processing ${fileExtension.toUpperCase()} file content for`,\n                            this.character.name,\n                            \"-\",\n                            contentItem,\n                        );\n\n                        await this.ragKnowledgeManager.processFile({\n                            path: contentItem,\n                            content: content,\n                            type: fileExtension as \"pdf\" | \"md\" | \"txt\",\n                            isShared: isShared,\n                        });\n                    } catch (error: any) {\n                        hasError = true;\n                        elizaLogger.error(\n                            `Failed to read knowledge file ${contentItem}. Error details:`,\n                            error?.message || error || \"Unknown error\",\n                        );\n                        continue;\n                    }\n                } else {\n                    // Handle direct knowledge string\n                    elizaLogger.info(\n                        \"Processing direct knowledge for\",\n                        this.character.name,\n                        \"-\",\n                        contentItem.slice(0, 100),\n                    );\n\n                    const existingKnowledge =\n                        await this.ragKnowledgeManager.getKnowledge({\n                            id: knowledgeId,\n                            agentId: this.agentId,\n                        });\n\n                    if (existingKnowledge.length > 0) {\n                        elizaLogger.info(\n                            `Direct knowledge ${knowledgeId} already exists, skipping`,\n                        );\n                        continue;\n                    }\n\n                    await this.ragKnowledgeManager.createKnowledge({\n                        id: knowledgeId,\n                        agentId: this.agentId,\n                        content: {\n                            text: contentItem,\n                            metadata: {\n                                type: \"direct\",\n                            },\n                        },\n                    });\n                }\n            } catch (error: any) {\n                hasError = true;\n                elizaLogger.error(\n                    `Error processing knowledge item ${item}:`,\n                    error?.message || error || \"Unknown error\",\n                );\n                continue;\n            }\n        }\n\n        if (hasError) {\n            elizaLogger.warn(\n                \"Some knowledge items failed to process, but continuing with available knowledge\",\n            );\n        }\n    }\n\n    /**\n     * Processes directory-based RAG knowledge by recursively loading and processing files.\n     * @param dirConfig The directory configuration containing path and shared flag\n     */\n    private async processCharacterRAGDirectory(dirConfig: {\n        directory: string;\n        shared?: boolean;\n    }) {\n        if (!dirConfig.directory) {\n            elizaLogger.error(\"[RAG Directory] No directory specified\");\n            return;\n        }\n\n        // Sanitize directory path to prevent traversal attacks\n        const sanitizedDir = dirConfig.directory.replace(/\\.\\./g, \"\");\n        const dirPath = join(this.knowledgeRoot, sanitizedDir);\n\n        try {\n            // Check if directory exists\n            const dirExists = existsSync(dirPath);\n            if (!dirExists) {\n                elizaLogger.error(\n                    `[RAG Directory] Directory does not exist: ${sanitizedDir}`,\n                );\n                return;\n            }\n\n            elizaLogger.debug(`[RAG Directory] Searching in: ${dirPath}`);\n            // Use glob to find all matching files in directory\n            const files = await glob(\"**/*.{md,txt,pdf}\", {\n                cwd: dirPath,\n                nodir: true,\n                absolute: false,\n            });\n\n            if (files.length === 0) {\n                elizaLogger.warn(\n                    `No matching files found in directory: ${dirConfig.directory}`,\n                );\n                return;\n            }\n\n            elizaLogger.info(\n                `[RAG Directory] Found ${files.length} files in ${dirConfig.directory}`,\n            );\n\n            // Process files in batches to avoid memory issues\n            const BATCH_SIZE = 5;\n            for (let i = 0; i < files.length; i += BATCH_SIZE) {\n                const batch = files.slice(i, i + BATCH_SIZE);\n\n                await Promise.all(\n                    batch.map(async (file) => {\n                        try {\n                            const relativePath = join(sanitizedDir, file);\n\n                            elizaLogger.debug(\n                                `[RAG Directory] Processing file ${i + 1}/${files.length}:`,\n                                {\n                                    file,\n                                    relativePath,\n                                    shared: dirConfig.shared,\n                                },\n                            );\n\n                            await this.processCharacterRAGKnowledge([\n                                {\n                                    path: relativePath,\n                                    shared: dirConfig.shared,\n                                },\n                            ]);\n                        } catch (error) {\n                            elizaLogger.error(\n                                `[RAG Directory] Failed to process file: ${file}`,\n                                error instanceof Error\n                                    ? {\n                                          name: error.name,\n                                          message: error.message,\n                                          stack: error.stack,\n                                      }\n                                    : error,\n                            );\n                        }\n                    }),\n                );\n\n                elizaLogger.debug(\n                    `[RAG Directory] Completed batch ${Math.min(i + BATCH_SIZE, files.length)}/${files.length} files`,\n                );\n            }\n\n            elizaLogger.success(\n                `[RAG Directory] Successfully processed directory: ${sanitizedDir}`,\n            );\n        } catch (error) {\n            elizaLogger.error(\n                `[RAG Directory] Failed to process directory: ${sanitizedDir}`,\n                error instanceof Error\n                    ? {\n                          name: error.name,\n                          message: error.message,\n                          stack: error.stack,\n                      }\n                    : error,\n            );\n            throw error; // Re-throw to let caller handle it\n        }\n    }\n\n    getSetting(key: string) {\n        // check if the key is in the character.settings.secrets object\n        if (this.character.settings?.secrets?.[key]) {\n            return this.character.settings.secrets[key];\n        }\n        // if not, check if it's in the settings object\n        if (this.character.settings?.[key]) {\n            return this.character.settings[key];\n        }\n\n        // if not, check if it's in the settings object\n        if (settings[key]) {\n            return settings[key];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the number of messages that are kept in the conversation buffer.\n     * @returns The number of recent messages to be kept in memory.\n     */\n    getConversationLength() {\n        return this.#conversationLength;\n    }\n\n    /**\n     * Register an action for the agent to perform.\n     * @param action The action to register.\n     */\n    registerAction(action: Action) {\n        elizaLogger.success(`${this.character.name}(${this.agentId}) - Registering action: ${action.name}`);\n        this.actions.push(action);\n    }\n\n    /**\n     * Register an evaluator to assess and guide the agent's responses.\n     * @param evaluator The evaluator to register.\n     */\n    registerEvaluator(evaluator: Evaluator) {\n        this.evaluators.push(evaluator);\n    }\n\n    /**\n     * Register a context provider to provide context for message generation.\n     * @param provider The context provider to register.\n     */\n    registerContextProvider(provider: Provider) {\n        this.providers.push(provider);\n    }\n\n    /**\n     * Register an adapter for the agent to use.\n     * @param adapter The adapter to register.\n     */\n    registerAdapter(adapter: Adapter) {\n        this.adapters.push(adapter);\n    }\n\n    /**\n     * Process the actions of a message.\n     * @param message The message to process.\n     * @param content The content of the message to process actions from.\n     */\n    async processActions(\n        message: Memory,\n        responses: Memory[],\n        state?: State,\n        callback?: HandlerCallback,\n    ): Promise<void> {\n        for (const response of responses) {\n            if (!response.content?.action) {\n                elizaLogger.warn(\"No action found in the response content.\");\n                continue;\n            }\n\n            const normalizedAction = response.content.action\n                .toLowerCase()\n                .replace(\"_\", \"\");\n\n            elizaLogger.success(`Normalized action: ${normalizedAction}`);\n\n            let action = this.actions.find(\n                (a: { name: string }) =>\n                    a.name\n                        .toLowerCase()\n                        .replace(\"_\", \"\")\n                        .includes(normalizedAction) ||\n                    normalizedAction.includes(\n                        a.name.toLowerCase().replace(\"_\", \"\"),\n                    ),\n            );\n\n            if (!action) {\n                elizaLogger.info(\"Attempting to find action in similes.\");\n                for (const _action of this.actions) {\n                    const simileAction = _action.similes.find(\n                        (simile) =>\n                            simile\n                                .toLowerCase()\n                                .replace(\"_\", \"\")\n                                .includes(normalizedAction) ||\n                            normalizedAction.includes(\n                                simile.toLowerCase().replace(\"_\", \"\"),\n                            ),\n                    );\n                    if (simileAction) {\n                        action = _action;\n                        elizaLogger.success(\n                            `Action found in similes: ${action.name}`,\n                        );\n                        break;\n                    }\n                }\n            }\n\n            if (!action) {\n                elizaLogger.error(\n                    \"No action found for\",\n                    response.content.action,\n                );\n                continue;\n            }\n\n            if (!action.handler) {\n                elizaLogger.error(`Action ${action.name} has no handler.`);\n                continue;\n            }\n\n            try {\n                elizaLogger.info(\n                    `Executing handler for action: ${action.name}`,\n                );\n                await action.handler(this, message, state, {}, callback);\n            } catch (error) {\n                elizaLogger.error(error);\n            }\n        }\n    }\n\n    /**\n     * Evaluate the message and state using the registered evaluators.\n     * @param message The message to evaluate.\n     * @param state The state of the agent.\n     * @param didRespond Whether the agent responded to the message.~\n     * @param callback The handler callback\n     * @returns The results of the evaluation.\n     */\n    async evaluate(\n        message: Memory,\n        state: State,\n        didRespond?: boolean,\n        callback?: HandlerCallback,\n    ) {\n        const evaluatorPromises = this.evaluators.map(\n            async (evaluator: Evaluator) => {\n                elizaLogger.log(\"Evaluating\", evaluator.name);\n                if (!evaluator.handler) {\n                    return null;\n                }\n                if (!didRespond && !evaluator.alwaysRun) {\n                    return null;\n                }\n                const result = await evaluator.validate(this, message, state);\n                if (result) {\n                    return evaluator;\n                }\n                return null;\n            },\n        );\n\n        const resolvedEvaluators = await Promise.all(evaluatorPromises);\n        const evaluatorsData = resolvedEvaluators.filter(\n            (evaluator): evaluator is Evaluator => evaluator !== null,\n        );\n\n        // if there are no evaluators this frame, return\n        if (!evaluatorsData || evaluatorsData.length === 0) {\n            return [];\n        }\n\n        const context = composeContext({\n            state: {\n                ...state,\n                evaluators: formatEvaluators(evaluatorsData),\n                evaluatorNames: formatEvaluatorNames(evaluatorsData),\n            },\n            template:\n                this.character.templates?.evaluationTemplate ||\n                evaluationTemplate,\n        });\n\n        const result = await generateText({\n            runtime: this,\n            context,\n            modelClass: ModelClass.SMALL,\n            // verifiableInferenceAdapter: this.verifiableInferenceAdapter,\n        });\n\n        const evaluators = parseJsonArrayFromText(\n            result,\n        ) as unknown as string[];\n\n        for (const evaluator of this.evaluators) {\n            if (!evaluators?.includes(evaluator.name)) continue;\n\n            if (evaluator.handler)\n                await evaluator.handler(this, message, state, {}, callback);\n        }\n\n        return evaluators;\n    }\n\n    /**\n     * Ensure the existence of a participant in the room. If the participant does not exist, they are added to the room.\n     * @param userId - The user ID to ensure the existence of.\n     * @throws An error if the participant cannot be added.\n     */\n    async ensureParticipantExists(userId: UUID, roomId: UUID) {\n        const participants =\n            await this.databaseAdapter.getParticipantsForAccount(userId);\n\n        if (participants?.length === 0) {\n            await this.databaseAdapter.addParticipant(userId, roomId);\n        }\n    }\n\n    /**\n     * Ensure the existence of a user in the database. If the user does not exist, they are added to the database.\n     * @param userId - The user ID to ensure the existence of.\n     * @param userName - The user name to ensure the existence of.\n     * @returns\n     */\n\n    async ensureUserExists(\n        userId: UUID,\n        userName: string | null,\n        name: string | null,\n        email?: string | null,\n        source?: string | null,\n    ) {\n        const account = await this.databaseAdapter.getAccountById(userId);\n        if (!account) {\n            await this.databaseAdapter.createAccount({\n                id: userId,\n                name: name || this.character.name || \"Unknown User\",\n                username: userName || this.character.username || \"Unknown\",\n                // TODO: We might not need these account pieces\n                email: email || this.character.email || userId,\n                // When invoke ensureUserExists and saving account.details\n                // Performing a complete JSON.stringify on character will cause a TypeError: Converting circular structure to JSON error in some more complex plugins.\n                details: this.character ? Object.assign({}, this.character, {\n                    source,\n                    plugins: this.character?.plugins?.map((plugin) => plugin.name),\n                }) : { summary: \"\" },\n            });\n            elizaLogger.success(`User ${userName} created successfully.`);\n        }\n    }\n\n    async ensureParticipantInRoom(userId: UUID, roomId: UUID) {\n        const participants =\n            await this.databaseAdapter.getParticipantsForRoom(roomId);\n        if (!participants.includes(userId)) {\n            await this.databaseAdapter.addParticipant(userId, roomId);\n            if (userId === this.agentId) {\n                elizaLogger.log(\n                    `Agent ${this.character.name} linked to room ${roomId} successfully.`,\n                );\n            } else {\n                elizaLogger.log(\n                    `User ${userId} linked to room ${roomId} successfully.`,\n                );\n            }\n        }\n    }\n\n    async ensureConnection(\n        userId: UUID,\n        roomId: UUID,\n        userName?: string,\n        userScreenName?: string,\n        source?: string,\n    ) {\n        await Promise.all([\n            this.ensureUserExists(\n                this.agentId,\n                this.character.username ?? \"Agent\",\n                this.character.name ?? \"Agent\",\n                source,\n            ),\n            this.ensureUserExists(\n                userId,\n                userName ?? \"User\" + userId,\n                userScreenName ?? \"User\" + userId,\n                source,\n            ),\n            this.ensureRoomExists(roomId),\n        ]);\n\n        await Promise.all([\n            this.ensureParticipantInRoom(userId, roomId),\n            this.ensureParticipantInRoom(this.agentId, roomId),\n        ]);\n    }\n\n    /**\n     * Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user\n     * and agent are added as participants. The room ID is returned.\n     * @param userId - The user ID to create a room with.\n     * @returns The room ID of the room between the agent and the user.\n     * @throws An error if the room cannot be created.\n     */\n    async ensureRoomExists(roomId: UUID) {\n        const room = await this.databaseAdapter.getRoom(roomId);\n        if (!room) {\n            await this.databaseAdapter.createRoom(roomId);\n            elizaLogger.log(`Room ${roomId} created successfully.`);\n        }\n    }\n\n    /**\n     * Compose the state of the agent into an object that can be passed or used for response generation.\n     * @param message The message to compose the state from.\n     * @returns The state of the agent.\n     */\n    async composeState(\n        message: Memory,\n        additionalKeys: { [key: string]: unknown } = {},\n    ) {\n        const { userId, roomId } = message;\n\n        const conversationLength = this.getConversationLength();\n\n        const [actorsData, recentMessagesData, goalsData]: [\n            Actor[],\n            Memory[],\n            Goal[],\n        ] = await Promise.all([\n            getActorDetails({ runtime: this, roomId }),\n            this.messageManager.getMemories({\n                roomId,\n                count: conversationLength,\n                unique: false,\n            }),\n            getGoals({\n                runtime: this,\n                count: 10,\n                onlyInProgress: false,\n                roomId,\n            }),\n        ]);\n\n        const goals = formatGoalsAsString({ goals: goalsData });\n\n        const actors = formatActors({ actors: actorsData ?? [] });\n\n        const recentMessages = formatMessages({\n            messages: recentMessagesData,\n            actors: actorsData,\n        });\n\n        const recentPosts = formatPosts({\n            messages: recentMessagesData,\n            actors: actorsData,\n            conversationHeader: false,\n        });\n\n        // const lore = formatLore(loreData);\n\n        const senderName = actorsData?.find(\n            (actor: Actor) => actor.id === userId,\n        )?.name;\n\n        // TODO: We may wish to consolidate and just accept character.name here instead of the actor name\n        const agentName =\n            actorsData?.find((actor: Actor) => actor.id === this.agentId)\n                ?.name || this.character.name;\n\n        let allAttachments = message.content.attachments || [];\n\n        if (recentMessagesData && Array.isArray(recentMessagesData)) {\n            const lastMessageWithAttachment = recentMessagesData.find(\n                (msg) =>\n                    msg.content.attachments &&\n                    msg.content.attachments.length > 0,\n            );\n\n            if (lastMessageWithAttachment) {\n                const lastMessageTime =\n                    lastMessageWithAttachment?.createdAt ?? Date.now();\n                const oneHourBeforeLastMessage =\n                    lastMessageTime - 60 * 60 * 1000; // 1 hour before last message\n\n                allAttachments = recentMessagesData.reverse().flatMap((msg) => {\n                    const msgTime = msg.createdAt ?? Date.now();\n                    const isWithinTime = msgTime >= oneHourBeforeLastMessage;\n                    const attachments = msg.content.attachments || [];\n                    if (!isWithinTime) {\n                        attachments.forEach((attachment) => {\n                            attachment.text = \"[Hidden]\";\n                        });\n                    }\n                    return attachments;\n                });\n            }\n        }\n\n        const formattedAttachments = allAttachments\n            .map(\n                (attachment) =>\n                    `ID: ${attachment.id}\nName: ${attachment.title}\nURL: ${attachment.url}\nType: ${attachment.source}\nDescription: ${attachment.description}\nText: ${attachment.text}\n  `,\n            )\n            .join(\"\\n\");\n\n        // randomly get 3 bits of lore and join them into a paragraph, divided by \\n\n        let lore = \"\";\n        // Assuming this.lore is an array of lore bits\n        if (this.character.lore && this.character.lore.length > 0) {\n            const shuffledLore = [...this.character.lore].sort(\n                () => Math.random() - 0.5,\n            );\n            const selectedLore = shuffledLore.slice(0, 10);\n            lore = selectedLore.join(\"\\n\");\n        }\n\n        const formattedCharacterPostExamples = this.character.postExamples\n            .sort(() => 0.5 - Math.random())\n            .map((post) => {\n                const messageString = `${post}`;\n                return messageString;\n            })\n            .slice(0, 50)\n            .join(\"\\n\");\n\n        const formattedCharacterMessageExamples = this.character.messageExamples\n            .sort(() => 0.5 - Math.random())\n            .slice(0, 5)\n            .map((example) => {\n                const exampleNames = Array.from({ length: 5 }, () =>\n                    uniqueNamesGenerator({ dictionaries: [names] }),\n                );\n\n                return example\n                    .map((message) => {\n                        let messageString = `${message.user}: ${message.content.text}`;\n                        exampleNames.forEach((name, index) => {\n                            const placeholder = `{{user${index + 1}}}`;\n                            messageString = messageString.replaceAll(\n                                placeholder,\n                                name,\n                            );\n                        });\n                        return messageString;\n                    })\n                    .join(\"\\n\");\n            })\n            .join(\"\\n\\n\");\n\n        const getRecentInteractions = async (\n            userA: UUID,\n            userB: UUID,\n        ): Promise<Memory[]> => {\n            // Find all rooms where userA and userB are participants\n            const rooms = await this.databaseAdapter.getRoomsForParticipants([\n                userA,\n                userB,\n            ]);\n\n            // Check the existing memories in the database\n            return this.messageManager.getMemoriesByRoomIds({\n                // filter out the current room id from rooms\n                roomIds: rooms.filter((room) => room !== roomId),\n                limit: 20,\n            });\n        };\n\n        const recentInteractions =\n            userId !== this.agentId\n                ? await getRecentInteractions(userId, this.agentId)\n                : [];\n\n        const getRecentMessageInteractions = async (\n            recentInteractionsData: Memory[],\n        ): Promise<string> => {\n            // Format the recent messages\n            const formattedInteractions = await Promise.all(\n                recentInteractionsData.map(async (message) => {\n                    const isSelf = message.userId === this.agentId;\n                    let sender: string;\n                    if (isSelf) {\n                        sender = this.character.name;\n                    } else {\n                        const accountId =\n                            await this.databaseAdapter.getAccountById(\n                                message.userId,\n                            );\n                        sender = accountId?.username || \"unknown\";\n                    }\n                    return `${sender}: ${message.content.text}`;\n                }),\n            );\n\n            return formattedInteractions.join(\"\\n\");\n        };\n\n        const formattedMessageInteractions =\n            await getRecentMessageInteractions(recentInteractions);\n\n        const getRecentPostInteractions = async (\n            recentInteractionsData: Memory[],\n            actors: Actor[],\n        ): Promise<string> => {\n            const formattedInteractions = formatPosts({\n                messages: recentInteractionsData,\n                actors,\n                conversationHeader: true,\n            });\n\n            return formattedInteractions;\n        };\n\n        const formattedPostInteractions = await getRecentPostInteractions(\n            recentInteractions,\n            actorsData,\n        );\n\n        // if bio is a string, use it. if its an array, pick one at random\n        let bio = this.character.bio || \"\";\n        if (Array.isArray(bio)) {\n            // get three random bio strings and join them with \" \"\n            bio = bio\n                .sort(() => 0.5 - Math.random())\n                .slice(0, 3)\n                .join(\" \");\n        }\n\n        let knowledgeData = [];\n        let formattedKnowledge = \"\";\n\n        if (this.character.settings?.ragKnowledge) {\n            const recentContext = recentMessagesData\n                .sort((a, b) => b.createdAt - a.createdAt) // Sort by timestamp descending (newest first)\n                .slice(0, 3) // Get the 3 most recent messages\n                .reverse() // Reverse to get chronological order\n                .map((msg) => msg.content.text)\n                .join(\" \");\n\n            knowledgeData = await this.ragKnowledgeManager.getKnowledge({\n                query: message.content.text,\n                conversationContext: recentContext,\n                limit: 8,\n            });\n\n            formattedKnowledge = formatKnowledge(knowledgeData);\n        } else {\n            knowledgeData = await knowledge.get(this, message);\n\n            formattedKnowledge = formatKnowledge(knowledgeData);\n        }\n\n        const initialState = {\n            agentId: this.agentId,\n            agentName,\n            bio,\n            lore,\n            adjective:\n                this.character.adjectives &&\n                this.character.adjectives.length > 0\n                    ? this.character.adjectives[\n                          Math.floor(\n                              Math.random() * this.character.adjectives.length,\n                          )\n                      ]\n                    : \"\",\n            knowledge: formattedKnowledge,\n            knowledgeData: knowledgeData,\n            ragKnowledgeData: knowledgeData,\n            // Recent interactions between the sender and receiver, formatted as messages\n            recentMessageInteractions: formattedMessageInteractions,\n            // Recent interactions between the sender and receiver, formatted as posts\n            recentPostInteractions: formattedPostInteractions,\n            // Raw memory[] array of interactions\n            recentInteractionsData: recentInteractions,\n            // randomly pick one topic\n            topic:\n                this.character.topics && this.character.topics.length > 0\n                    ? this.character.topics[\n                          Math.floor(\n                              Math.random() * this.character.topics.length,\n                          )\n                      ]\n                    : null,\n            topics:\n                this.character.topics && this.character.topics.length > 0\n                    ? `${this.character.name} is interested in ` +\n                      this.character.topics\n                          .sort(() => 0.5 - Math.random())\n                          .slice(0, 5)\n                          .map((topic, index, array) => {\n                              if (index === array.length - 2) {\n                                  return topic + \" and \";\n                              }\n                              // if last topic, don't add a comma\n                              if (index === array.length - 1) {\n                                  return topic;\n                              }\n                              return topic + \", \";\n                          })\n                          .join(\"\")\n                    : \"\",\n            characterPostExamples:\n                formattedCharacterPostExamples &&\n                formattedCharacterPostExamples.replaceAll(\"\\n\", \"\").length > 0\n                    ? addHeader(\n                          `# Example Posts for ${this.character.name}`,\n                          formattedCharacterPostExamples,\n                      )\n                    : \"\",\n            characterMessageExamples:\n                formattedCharacterMessageExamples &&\n                formattedCharacterMessageExamples.replaceAll(\"\\n\", \"\").length >\n                    0\n                    ? addHeader(\n                          `# Example Conversations for ${this.character.name}`,\n                          formattedCharacterMessageExamples,\n                      )\n                    : \"\",\n            messageDirections:\n                this.character?.style?.all?.length > 0 ||\n                this.character?.style?.chat.length > 0\n                    ? addHeader(\n                          \"# Message Directions for \" + this.character.name,\n                          (() => {\n                              const all = this.character?.style?.all || [];\n                              const chat = this.character?.style?.chat || [];\n                              return [...all, ...chat].join(\"\\n\");\n                          })(),\n                      )\n                    : \"\",\n\n            postDirections:\n                this.character?.style?.all?.length > 0 ||\n                this.character?.style?.post.length > 0\n                    ? addHeader(\n                          \"# Post Directions for \" + this.character.name,\n                          (() => {\n                              const all = this.character?.style?.all || [];\n                              const post = this.character?.style?.post || [];\n                              return [...all, ...post].join(\"\\n\");\n                          })(),\n                      )\n                    : \"\",\n\n            //old logic left in for reference\n            //food for thought. how could we dynamically decide what parts of the character to add to the prompt other than random? rag? prompt the llm to decide?\n            /*\n            postDirections:\n                this.character?.style?.all?.length > 0 ||\n                this.character?.style?.post.length > 0\n                    ? addHeader(\n                            \"# Post Directions for \" + this.character.name,\n                            (() => {\n                                const all = this.character?.style?.all || [];\n                                const post = this.character?.style?.post || [];\n                                const shuffled = [...all, ...post].sort(\n                                    () => 0.5 - Math.random()\n                                );\n                                return shuffled\n                                    .slice(0, conversationLength / 2)\n                                    .join(\"\\n\");\n                            })()\n                        )\n                    : \"\",*/\n            // Agent runtime stuff\n            senderName,\n            actors:\n                actors && actors.length > 0\n                    ? addHeader(\"# Actors\", actors)\n                    : \"\",\n            actorsData,\n            roomId,\n            goals:\n                goals && goals.length > 0\n                    ? addHeader(\n                          \"# Goals\\n{{agentName}} should prioritize accomplishing the objectives that are in progress.\",\n                          goals,\n                      )\n                    : \"\",\n            goalsData,\n            recentMessages:\n                recentMessages && recentMessages.length > 0\n                    ? addHeader(\"# Conversation Messages\", recentMessages)\n                    : \"\",\n            recentPosts:\n                recentPosts && recentPosts.length > 0\n                    ? addHeader(\"# Posts in Thread\", recentPosts)\n                    : \"\",\n            recentMessagesData,\n            attachments:\n                formattedAttachments && formattedAttachments.length > 0\n                    ? addHeader(\"# Attachments\", formattedAttachments)\n                    : \"\",\n            ...additionalKeys,\n        } as State;\n\n        const actionPromises = this.actions.map(async (action: Action) => {\n            const result = await action.validate(this, message, initialState);\n            if (result) {\n                return action;\n            }\n            return null;\n        });\n\n        const evaluatorPromises = this.evaluators.map(async (evaluator) => {\n            const result = await evaluator.validate(\n                this,\n                message,\n                initialState,\n            );\n            if (result) {\n                return evaluator;\n            }\n            return null;\n        });\n\n        const [resolvedEvaluators, resolvedActions, providers] =\n            await Promise.all([\n                Promise.all(evaluatorPromises),\n                Promise.all(actionPromises),\n                getProviders(this, message, initialState),\n            ]);\n\n        const evaluatorsData = resolvedEvaluators.filter(\n            Boolean,\n        ) as Evaluator[];\n        const actionsData = resolvedActions.filter(Boolean) as Action[];\n\n        const actionState = {\n            actionNames:\n                \"Possible response actions: \" + formatActionNames(actionsData),\n            actions:\n                actionsData.length > 0\n                    ? addHeader(\n                          \"# Available Actions\",\n                          formatActions(actionsData),\n                      )\n                    : \"\",\n            actionExamples:\n                actionsData.length > 0\n                    ? addHeader(\n                          \"# Action Examples\",\n                          composeActionExamples(actionsData, 10),\n                      )\n                    : \"\",\n            evaluatorsData,\n            evaluators:\n                evaluatorsData.length > 0\n                    ? formatEvaluators(evaluatorsData)\n                    : \"\",\n            evaluatorNames:\n                evaluatorsData.length > 0\n                    ? formatEvaluatorNames(evaluatorsData)\n                    : \"\",\n            evaluatorExamples:\n                evaluatorsData.length > 0\n                    ? formatEvaluatorExamples(evaluatorsData)\n                    : \"\",\n            providers: addHeader(\n                `# Additional Information About ${this.character.name} and The World`,\n                providers,\n            ),\n        };\n\n        return { ...initialState, ...actionState } as State;\n    }\n\n    async updateRecentMessageState(state: State): Promise<State> {\n        const conversationLength = this.getConversationLength();\n        const recentMessagesData = await this.messageManager.getMemories({\n            roomId: state.roomId,\n            count: conversationLength,\n            unique: false,\n        });\n\n        const recentMessages = formatMessages({\n            actors: state.actorsData ?? [],\n            messages: recentMessagesData.map((memory: Memory) => {\n                const newMemory = { ...memory };\n                delete newMemory.embedding;\n                return newMemory;\n            }),\n        });\n\n        let allAttachments = [];\n\n        if (recentMessagesData && Array.isArray(recentMessagesData)) {\n            const lastMessageWithAttachment = recentMessagesData.find(\n                (msg) =>\n                    msg.content.attachments &&\n                    msg.content.attachments.length > 0,\n            );\n\n            if (lastMessageWithAttachment) {\n                const lastMessageTime =\n                    lastMessageWithAttachment?.createdAt ?? Date.now();\n                const oneHourBeforeLastMessage =\n                    lastMessageTime - 60 * 60 * 1000; // 1 hour before last message\n\n                allAttachments = recentMessagesData\n                    .filter((msg) => {\n                        const msgTime = msg.createdAt ?? Date.now();\n                        return msgTime >= oneHourBeforeLastMessage;\n                    })\n                    .flatMap((msg) => msg.content.attachments || []);\n            }\n        }\n\n        const formattedAttachments = allAttachments\n            .map(\n                (attachment) =>\n                    `ID: ${attachment.id}\nName: ${attachment.title}\nURL: ${attachment.url}\nType: ${attachment.source}\nDescription: ${attachment.description}\nText: ${attachment.text}\n    `,\n            )\n            .join(\"\\n\");\n\n        return {\n            ...state,\n            recentMessages: addHeader(\n                \"# Conversation Messages\",\n                recentMessages,\n            ),\n            recentMessagesData,\n            attachments: formattedAttachments,\n        } as State;\n    }\n}\n\nconst formatKnowledge = (knowledge: KnowledgeItem[]) => {\n    // Group related content in a more natural way\n    return knowledge.map(item => {\n        // Get the main content text\n        const text = item.content.text;\n        \n        // Clean up formatting but maintain natural text flow\n        const cleanedText = text\n            .trim()\n            .replace(/\\n{3,}/g, '\\n\\n'); // Replace excessive newlines\n            \n        return cleanedText;\n    }).join('\\n\\n'); // Separate distinct pieces with double newlines\n};\n","import { sha1 } from \"js-sha1\";\nimport type { UUID } from \"./types.ts\";\nimport { z } from \"zod\";\n\nexport const uuidSchema = z.string().uuid() as z.ZodType<UUID>;\n\nexport function validateUuid(value: unknown): UUID | null {\n    const result = uuidSchema.safeParse(value);\n    return result.success ? result.data : null;\n}\n\nexport function stringToUuid(target: string | number): UUID {\n    if (typeof target === \"number\") {\n        target = (target as number).toString();\n    }\n\n    if (typeof target !== \"string\") {\n        throw TypeError(\"Value must be string\");\n    }\n\n    const _uint8ToHex = (ubyte: number): string => {\n        const first = ubyte >> 4;\n        const second = ubyte - (first << 4);\n        const HEX_DIGITS = \"0123456789abcdef\".split(\"\");\n        return HEX_DIGITS[first] + HEX_DIGITS[second];\n    };\n\n    const _uint8ArrayToHex = (buf: Uint8Array): string => {\n        let out = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            out += _uint8ToHex(buf[i]);\n        }\n        return out;\n    };\n\n    const escapedStr = encodeURIComponent(target);\n    const buffer = new Uint8Array(escapedStr.length);\n    for (let i = 0; i < escapedStr.length; i++) {\n        buffer[i] = escapedStr[i].charCodeAt(0);\n    }\n\n    const hash = sha1(buffer);\n    const hashBuffer = new Uint8Array(hash.length / 2);\n    for (let i = 0; i < hash.length; i += 2) {\n        hashBuffer[i / 2] = Number.parseInt(hash.slice(i, i + 2), 16);\n    }\n\n    return (_uint8ArrayToHex(hashBuffer.slice(0, 4)) +\n        \"-\" +\n        _uint8ArrayToHex(hashBuffer.slice(4, 6)) +\n        \"-\" +\n        _uint8ToHex(hashBuffer[6] & 0x0f) +\n        _uint8ToHex(hashBuffer[7]) +\n        \"-\" +\n        _uint8ToHex((hashBuffer[8] & 0x3f) | 0x80) +\n        _uint8ToHex(hashBuffer[9]) +\n        \"-\" +\n        _uint8ArrayToHex(hashBuffer.slice(10, 16))) as UUID;\n}\n","import type { AgentRuntime } from \"./runtime.ts\";\nimport { embed, getEmbeddingZeroVector } from \"./embedding.ts\";\nimport type { KnowledgeItem, UUID, Memory } from \"./types.ts\";\nimport { stringToUuid } from \"./uuid.ts\";\nimport { splitChunks } from \"./generation.ts\";\nimport elizaLogger from \"./logger.ts\";\n\nasync function get(\n    runtime: AgentRuntime,\n    message: Memory\n): Promise<KnowledgeItem[]> {\n    // Add validation for message\n    if (!message?.content?.text) {\n        elizaLogger.warn(\"Invalid message for knowledge query:\", {\n            message,\n            content: message?.content,\n            text: message?.content?.text,\n        });\n        return [];\n    }\n\n    const processed = preprocess(message.content.text);\n    elizaLogger.debug(\"Knowledge query:\", {\n        original: message.content.text,\n        processed,\n        length: processed?.length,\n    });\n\n    // Validate processed text\n    if (!processed || processed.trim().length === 0) {\n        elizaLogger.warn(\"Empty processed text for knowledge query\");\n        return [];\n    }\n\n    const embedding = await embed(runtime, processed);\n    const fragments = await runtime.knowledgeManager.searchMemoriesByEmbedding(\n        embedding,\n        {\n            roomId: message.agentId,\n            count: 5,\n            match_threshold: 0.1,\n        }\n    );\n\n    const uniqueSources = [\n        ...new Set(\n            fragments.map((memory) => {\n                elizaLogger.log(\n                    `Matched fragment: ${memory.content.text} with similarity: ${memory.similarity}`\n                );\n                return memory.content.source;\n            })\n        ),\n    ];\n\n    const knowledgeDocuments = await Promise.all(\n        uniqueSources.map((source) =>\n            runtime.documentsManager.getMemoryById(source as UUID)\n        )\n    );\n\n    return knowledgeDocuments\n        .filter((memory) => memory !== null)\n        .map((memory) => ({ id: memory.id, content: memory.content }));\n}\n\nasync function set(\n    runtime: AgentRuntime,\n    item: KnowledgeItem,\n    chunkSize = 512,\n    bleed = 20\n) {\n    await runtime.documentsManager.createMemory({\n        id: item.id,\n        agentId: runtime.agentId,\n        roomId: runtime.agentId,\n        userId: runtime.agentId,\n        createdAt: Date.now(),\n        content: item.content,\n        embedding: getEmbeddingZeroVector(),\n    });\n\n    const preprocessed = preprocess(item.content.text);\n    \n    // If text is shorter than chunk size, don't split it\n    if (preprocessed.length <= chunkSize) {\n        const embedding = await embed(runtime, preprocessed);\n        await runtime.knowledgeManager.createMemory({\n            id: stringToUuid(item.id + preprocessed),\n            roomId: runtime.agentId,\n            agentId: runtime.agentId,\n            userId: runtime.agentId,\n            createdAt: Date.now(),\n            content: {\n                source: item.id,\n                text: preprocessed,\n            },\n            embedding,\n        });\n        return;\n    }\n\n    const fragments = await splitChunks(preprocessed, chunkSize, bleed);\n\n    for (const fragment of fragments) {\n        const embedding = await embed(runtime, fragment);\n        await runtime.knowledgeManager.createMemory({\n            // We namespace the knowledge base uuid to avoid id\n            // collision with the document above.\n            id: stringToUuid(item.id + fragment),\n            roomId: runtime.agentId,\n            agentId: runtime.agentId,\n            userId: runtime.agentId,\n            createdAt: Date.now(),\n            content: {\n                source: item.id,\n                text: fragment,\n            },\n            embedding,\n        });\n    }\n}\n\nexport function preprocess(content: string): string {\n    elizaLogger.debug(\"Preprocessing text:\", {\n        input: content,\n        length: content?.length,\n    });\n\n    if (!content || typeof content !== \"string\") {\n        elizaLogger.warn(\"Invalid input for preprocessing\");\n        return \"\";\n    }\n\n    return (\n        content\n            // Remove code blocks and their content\n            .replace(/```[\\s\\S]*?```/g, \"\")\n            // Remove inline code\n            .replace(/`.*?`/g, \"\")\n            // Convert headers to plain text with emphasis\n            .replace(/#{1,6}\\s*(.*)/g, \"$1\")\n            // Remove image links but keep alt text\n            .replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n            // Remove links but keep text\n            .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n            // Simplify URLs: remove protocol and simplify to domain+path\n            .replace(/(https?:\\/\\/)?(www\\.)?([^\\s]+\\.[^\\s]+)/g, \"$3\")\n            // Remove Discord mentions specifically\n            .replace(/<@[!&]?\\d+>/g, \"\")\n            // Remove HTML tags\n            .replace(/<[^>]*>/g, \"\")\n            // Remove horizontal rules\n            .replace(/^\\s*[-*_]{3,}\\s*$/gm, \"\")\n            // Remove comments\n            .replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\")\n            .replace(/\\/\\/.*/g, \"\")\n            // Normalize whitespace\n            .replace(/\\s+/g, \" \")\n            // Remove multiple newlines\n            .replace(/\\n{3,}/g, \"\\n\\n\")\n            // Remove special characters except those common in URLs\n            .replace(/[^a-zA-Z0-9\\s\\-_./:?=&]/g, \"\")\n            .trim()\n            .toLowerCase()\n    );\n}\n\nexport default {\n    get,\n    set,\n    preprocess,\n};\n","import { embed } from \"./embedding.ts\";\nimport { splitChunks } from \"./generation.ts\";\nimport elizaLogger from \"./logger.ts\";\nimport {\n    type IAgentRuntime,\n    type IRAGKnowledgeManager,\n    type RAGKnowledgeItem,\n    type UUID,\n    KnowledgeScope,\n} from \"./types.ts\";\nimport { stringToUuid } from \"./uuid.ts\";\nimport { existsSync } from \"fs\";\nimport { join } from \"path\";\n\n/**\n * Manage knowledge in the database.\n */\nexport class RAGKnowledgeManager implements IRAGKnowledgeManager {\n    /**\n     * The AgentRuntime instance associated with this manager.\n     */\n    runtime: IAgentRuntime;\n\n    /**\n     * The name of the database table this manager operates on.\n     */\n    tableName: string;\n\n    /**\n     * The root directory where RAG knowledge files are located (internal)\n     */\n    knowledgeRoot: string;\n\n    /**\n     * Constructs a new KnowledgeManager instance.\n     * @param opts Options for the manager.\n     * @param opts.tableName The name of the table this manager will operate on.\n     * @param opts.runtime The AgentRuntime instance associated with this manager.\n     */\n    constructor(opts: {\n        tableName: string;\n        runtime: IAgentRuntime;\n        knowledgeRoot: string;\n    }) {\n        this.runtime = opts.runtime;\n        this.tableName = opts.tableName;\n        this.knowledgeRoot = opts.knowledgeRoot;\n    }\n\n    private readonly defaultRAGMatchThreshold = 0.85;\n    private readonly defaultRAGMatchCount = 8;\n\n    /**\n     * Common English stop words to filter out from query analysis\n     */\n    private readonly stopWords = new Set([\n        \"a\",\n        \"an\",\n        \"and\",\n        \"are\",\n        \"as\",\n        \"at\",\n        \"be\",\n        \"by\",\n        \"does\",\n        \"for\",\n        \"from\",\n        \"had\",\n        \"has\",\n        \"have\",\n        \"he\",\n        \"her\",\n        \"his\",\n        \"how\",\n        \"hey\",\n        \"i\",\n        \"in\",\n        \"is\",\n        \"it\",\n        \"its\",\n        \"of\",\n        \"on\",\n        \"or\",\n        \"that\",\n        \"the\",\n        \"this\",\n        \"to\",\n        \"was\",\n        \"what\",\n        \"when\",\n        \"where\",\n        \"which\",\n        \"who\",\n        \"will\",\n        \"with\",\n        \"would\",\n        \"there\",\n        \"their\",\n        \"they\",\n        \"your\",\n        \"you\",\n    ]);\n\n    /**\n     * Filters out stop words and returns meaningful terms\n     */\n    private getQueryTerms(query: string): string[] {\n        return query\n            .toLowerCase()\n            .split(\" \")\n            .filter((term) => term.length > 2) // Filter very short words\n            .filter((term) => !this.stopWords.has(term)); // Filter stop words\n    }\n\n    /**\n     * Preprocesses text content for better RAG performance.\n     * @param content The text content to preprocess.\n     * @returns The preprocessed text.\n     */\n\n    private preprocess(content: string): string {\n        if (!content || typeof content !== \"string\") {\n            elizaLogger.warn(\"Invalid input for preprocessing\");\n            return \"\";\n        }\n\n        return (\n            content\n                .replace(/```[\\s\\S]*?```/g, \"\")\n                .replace(/`.*?`/g, \"\")\n                .replace(/#{1,6}\\s*(.*)/g, \"$1\")\n                .replace(/!\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n                .replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n                .replace(/(https?:\\/\\/)?(www\\.)?([^\\s]+\\.[^\\s]+)/g, \"$3\")\n                .replace(/<@[!&]?\\d+>/g, \"\")\n                .replace(/<[^>]*>/g, \"\")\n                .replace(/^\\s*[-*_]{3,}\\s*$/gm, \"\")\n                .replace(/\\/\\*[\\s\\S]*?\\*\\//g, \"\")\n                .replace(/\\/\\/.*/g, \"\")\n                .replace(/\\s+/g, \" \")\n                .replace(/\\n{3,}/g, \"\\n\\n\")\n                // .replace(/[^a-zA-Z0-9\\s\\-_./:?=&]/g, \"\") --this strips out CJK characters\n                .trim()\n                .toLowerCase()\n        );\n    }\n\n    private hasProximityMatch(text: string, terms: string[]): boolean {\n        if (!text || !terms.length) {\n            return false;\n        }\n    \n        const words = text.toLowerCase().split(\" \").filter(w => w.length > 0);\n        \n        // Find all positions for each term (not just first occurrence)\n        const allPositions = terms.flatMap(term => \n            words.reduce((positions, word, idx) => {\n                if (word.includes(term)) positions.push(idx);\n                return positions;\n            }, [] as number[])\n        ).sort((a, b) => a - b);\n    \n        if (allPositions.length < 2) return false;\n    \n        // Check proximity\n        for (let i = 0; i < allPositions.length - 1; i++) {\n            if (Math.abs(allPositions[i] - allPositions[i + 1]) <= 5) {\n                elizaLogger.debug(\"[Proximity Match]\", {\n                    terms,\n                    positions: allPositions,\n                    matchFound: `${allPositions[i]} - ${allPositions[i + 1]}`\n                });\n                return true;\n            }\n        }\n    \n        return false;\n    }\n\n    async getKnowledge(params: {\n        query?: string;\n        id?: UUID;\n        conversationContext?: string;\n        limit?: number;\n        agentId?: UUID;\n    }): Promise<RAGKnowledgeItem[]> {\n        const agentId = params.agentId || this.runtime.agentId;\n\n        // If id is provided, do direct lookup first\n        if (params.id) {\n            const directResults =\n                await this.runtime.databaseAdapter.getKnowledge({\n                    id: params.id,\n                    agentId: agentId,\n                });\n\n            if (directResults.length > 0) {\n                return directResults;\n            }\n        }\n\n        // If no id or no direct results, perform semantic search\n        if (params.query) {\n            try {\n                const processedQuery = this.preprocess(params.query);\n\n                // Build search text with optional context\n                let searchText = processedQuery;\n                if (params.conversationContext) {\n                    const relevantContext = this.preprocess(\n                        params.conversationContext\n                    );\n                    searchText = `${relevantContext} ${processedQuery}`;\n                }\n\n                const embeddingArray = await embed(this.runtime, searchText);\n\n                const embedding = new Float32Array(embeddingArray);\n\n                // Get results with single query\n                const results =\n                    await this.runtime.databaseAdapter.searchKnowledge({\n                        agentId: this.runtime.agentId,\n                        embedding: embedding,\n                        match_threshold: this.defaultRAGMatchThreshold,\n                        match_count:\n                            (params.limit || this.defaultRAGMatchCount) * 2,\n                        searchText: processedQuery,\n                    });\n\n                // Enhanced reranking with sophisticated scoring\n                const rerankedResults = results\n                    .map((result) => {\n                        let score = result.similarity;\n\n                        // Check for direct query term matches\n                        const queryTerms = this.getQueryTerms(processedQuery);\n\n                        const matchingTerms = queryTerms.filter((term) =>\n                            result.content.text.toLowerCase().includes(term)\n                        );\n\n                        if (matchingTerms.length > 0) {\n                            // Much stronger boost for matches\n                            score *=\n                                1 +\n                                (matchingTerms.length / queryTerms.length) * 2; // Double the boost\n\n                            if (\n                                this.hasProximityMatch(\n                                    result.content.text,\n                                    matchingTerms\n                                )\n                            ) {\n                                score *= 1.5; // Stronger proximity boost\n                            }\n                        } else {\n                            // More aggressive penalty\n                            if (!params.conversationContext) {\n                                score *= 0.3; // Stronger penalty\n                            }\n                        }\n\n                        return {\n                            ...result,\n                            score,\n                            matchedTerms: matchingTerms, // Add for debugging\n                        };\n                    })\n                    .sort((a, b) => b.score - a.score);\n\n                // Filter and return results\n                return rerankedResults\n                    .filter(\n                        (result) =>\n                            result.score >= this.defaultRAGMatchThreshold\n                    )\n                    .slice(0, params.limit || this.defaultRAGMatchCount);\n            } catch (error) {\n                console.log(`[RAG Search Error] ${error}`);\n                return [];\n            }\n        }\n\n        // If neither id nor query provided, return empty array\n        return [];\n    }\n\n    async createKnowledge(item: RAGKnowledgeItem): Promise<void> {\n        if (!item.content.text) {\n            elizaLogger.warn(\"Empty content in knowledge item\");\n            return;\n        }\n\n        try {\n            // Process main document\n            const processedContent = this.preprocess(item.content.text);\n            const mainEmbeddingArray = await embed(\n                this.runtime,\n                processedContent\n            );\n\n            const mainEmbedding = new Float32Array(mainEmbeddingArray);\n\n            // Create main document\n            await this.runtime.databaseAdapter.createKnowledge({\n                id: item.id,\n                agentId: this.runtime.agentId,\n                content: {\n                    text: item.content.text,\n                    metadata: {\n                        ...item.content.metadata,\n                        isMain: true,\n                    },\n                },\n                embedding: mainEmbedding,\n                createdAt: Date.now(),\n            });\n\n            // Generate and store chunks\n            const chunks = await splitChunks(processedContent, 512, 20);\n\n            for (const [index, chunk] of chunks.entries()) {\n                const chunkEmbeddingArray = await embed(this.runtime, chunk);\n                const chunkEmbedding = new Float32Array(chunkEmbeddingArray);\n                const chunkId = `${item.id}-chunk-${index}` as UUID;\n\n                await this.runtime.databaseAdapter.createKnowledge({\n                    id: chunkId,\n                    agentId: this.runtime.agentId,\n                    content: {\n                        text: chunk,\n                        metadata: {\n                            ...item.content.metadata,\n                            isChunk: true,\n                            originalId: item.id,\n                            chunkIndex: index,\n                        },\n                    },\n                    embedding: chunkEmbedding,\n                    createdAt: Date.now(),\n                });\n            }\n        } catch (error) {\n            elizaLogger.error(`Error processing knowledge ${item.id}:`, error);\n            throw error;\n        }\n    }\n\n    async searchKnowledge(params: {\n        agentId: UUID;\n        embedding: Float32Array | number[];\n        match_threshold?: number;\n        match_count?: number;\n        searchText?: string;\n    }): Promise<RAGKnowledgeItem[]> {\n        const {\n            match_threshold = this.defaultRAGMatchThreshold,\n            match_count = this.defaultRAGMatchCount,\n            embedding,\n            searchText,\n        } = params;\n\n        const float32Embedding = Array.isArray(embedding)\n            ? new Float32Array(embedding)\n            : embedding;\n\n        return await this.runtime.databaseAdapter.searchKnowledge({\n            agentId: params.agentId || this.runtime.agentId,\n            embedding: float32Embedding,\n            match_threshold,\n            match_count,\n            searchText,\n        });\n    }\n\n    async removeKnowledge(id: UUID): Promise<void> {\n        await this.runtime.databaseAdapter.removeKnowledge(id);\n    }\n\n    async clearKnowledge(shared?: boolean): Promise<void> {\n        await this.runtime.databaseAdapter.clearKnowledge(\n            this.runtime.agentId,\n            shared ? shared : false\n        );\n    }\n\n    /**\n     * Lists all knowledge entries for an agent without semantic search or reranking.\n     * Used primarily for administrative tasks like cleanup.\n     *\n     * @param agentId The agent ID to fetch knowledge entries for\n     * @returns Array of RAGKnowledgeItem entries\n     */\n    async listAllKnowledge(agentId: UUID): Promise<RAGKnowledgeItem[]> {\n        elizaLogger.debug(\n            `[Knowledge List] Fetching all entries for agent: ${agentId}`\n        );\n\n        try {\n            // Only pass the required agentId parameter\n            const results = await this.runtime.databaseAdapter.getKnowledge({\n                agentId: agentId,\n            });\n\n            elizaLogger.debug(\n                `[Knowledge List] Found ${results.length} entries`\n            );\n            return results;\n        } catch (error) {\n            elizaLogger.error(\n                \"[Knowledge List] Error fetching knowledge entries:\",\n                error\n            );\n            throw error;\n        }\n    }\n\n    async cleanupDeletedKnowledgeFiles() {\n        try {\n            elizaLogger.debug(\n                \"[Cleanup] Starting knowledge cleanup process, agent: \",\n                this.runtime.agentId\n            );\n\n            elizaLogger.debug(\n                `[Cleanup] Knowledge root path: ${this.knowledgeRoot}`\n            );\n\n            const existingKnowledge = await this.listAllKnowledge(\n                this.runtime.agentId\n            );\n            // Only process parent documents, ignore chunks\n            const parentDocuments = existingKnowledge.filter(\n                (item) =>\n                    !item.id.includes(\"chunk\") && item.content.metadata?.source // Must have a source path\n            );\n\n            elizaLogger.debug(\n                `[Cleanup] Found ${parentDocuments.length} parent documents to check`\n            );\n\n            for (const item of parentDocuments) {\n                const relativePath = item.content.metadata?.source;\n                const filePath = join(this.knowledgeRoot, relativePath);\n\n                elizaLogger.debug(\n                    `[Cleanup] Checking joined file path: ${filePath}`\n                );\n\n                if (!existsSync(filePath)) {\n                    elizaLogger.warn(\n                        `[Cleanup] File not found, starting removal process: ${filePath}`\n                    );\n\n                    const idToRemove = item.id;\n                    elizaLogger.debug(\n                        `[Cleanup] Using ID for removal: ${idToRemove}`\n                    );\n\n                    try {\n                        // Just remove the parent document - this will cascade to chunks\n                        await this.removeKnowledge(idToRemove);\n\n                        // // Clean up the cache\n                        // const baseCacheKeyWithWildcard = `${this.generateKnowledgeCacheKeyBase(\n                        //     idToRemove,\n                        //     item.content.metadata?.isShared || false\n                        // )}*`;\n                        // await this.cacheManager.deleteByPattern({\n                        //     keyPattern: baseCacheKeyWithWildcard,\n                        // });\n\n                        elizaLogger.success(\n                            `[Cleanup] Successfully removed knowledge for file: ${filePath}`\n                        );\n                    } catch (deleteError) {\n                        elizaLogger.error(\n                            `[Cleanup] Error during deletion process for ${filePath}:`,\n                            deleteError instanceof Error\n                                ? {\n                                      message: deleteError.message,\n                                      stack: deleteError.stack,\n                                      name: deleteError.name,\n                                  }\n                                : deleteError\n                        );\n                    }\n                }\n            }\n\n            elizaLogger.debug(\"[Cleanup] Finished knowledge cleanup process\");\n        } catch (error) {\n            elizaLogger.error(\n                \"[Cleanup] Error cleaning up deleted knowledge files:\",\n                error\n            );\n        }\n    }\n\n    public generateScopedId(path: string, isShared: boolean): UUID {\n        // Prefix the path with scope before generating UUID to ensure different IDs for shared vs private\n        const scope = isShared ? KnowledgeScope.SHARED : KnowledgeScope.PRIVATE;\n        const scopedPath = `${scope}-${path}`;\n        return stringToUuid(scopedPath);\n    }\n\n    async processFile(file: {\n        path: string;\n        content: string;\n        type: \"pdf\" | \"md\" | \"txt\";\n        isShared?: boolean;\n    }): Promise<void> {\n        const timeMarker = (label: string) => {\n            const time = (Date.now() - startTime) / 1000;\n            elizaLogger.info(`[Timing] ${label}: ${time.toFixed(2)}s`);\n        };\n\n        const startTime = Date.now();\n        const content = file.content;\n\n        try {\n            const fileSizeKB = new TextEncoder().encode(content).length / 1024;\n            elizaLogger.info(\n                `[File Progress] Starting ${file.path} (${fileSizeKB.toFixed(2)} KB)`\n            );\n\n            // Generate scoped ID for the file\n            const scopedId = this.generateScopedId(\n                file.path,\n                file.isShared || false\n            );\n\n            // Step 1: Preprocessing\n            //const preprocessStart = Date.now();\n            const processedContent = this.preprocess(content);\n            timeMarker(\"Preprocessing\");\n\n            // Step 2: Main document embedding\n            const mainEmbeddingArray = await embed(\n                this.runtime,\n                processedContent\n            );\n            const mainEmbedding = new Float32Array(mainEmbeddingArray);\n            timeMarker(\"Main embedding\");\n\n            // Step 3: Create main document\n            await this.runtime.databaseAdapter.createKnowledge({\n                id: scopedId,\n                agentId: this.runtime.agentId,\n                content: {\n                    text: content,\n                    metadata: {\n                        source: file.path,\n                        type: file.type,\n                        isShared: file.isShared || false,\n                    },\n                },\n                embedding: mainEmbedding,\n                createdAt: Date.now(),\n            });\n            timeMarker(\"Main document storage\");\n\n            // Step 4: Generate chunks\n            const chunks = await splitChunks(processedContent, 512, 20);\n            const totalChunks = chunks.length;\n            elizaLogger.info(`Generated ${totalChunks} chunks`);\n            timeMarker(\"Chunk generation\");\n\n            // Step 5: Process chunks with larger batches\n            const BATCH_SIZE = 10; // Increased batch size\n            let processedChunks = 0;\n\n            for (let i = 0; i < chunks.length; i += BATCH_SIZE) {\n                const batchStart = Date.now();\n                const batch = chunks.slice(\n                    i,\n                    Math.min(i + BATCH_SIZE, chunks.length)\n                );\n\n                // Process embeddings in parallel\n                const embeddings = await Promise.all(\n                    batch.map((chunk) => embed(this.runtime, chunk))\n                );\n\n                // Batch database operations\n                await Promise.all(\n                    embeddings.map(async (embeddingArray, index) => {\n                        const chunkId =\n                            `${scopedId}-chunk-${i + index}` as UUID;\n                        const chunkEmbedding = new Float32Array(embeddingArray);\n\n                        await this.runtime.databaseAdapter.createKnowledge({\n                            id: chunkId,\n                            agentId: this.runtime.agentId,\n                            content: {\n                                text: batch[index],\n                                metadata: {\n                                    source: file.path,\n                                    type: file.type,\n                                    isShared: file.isShared || false,\n                                    isChunk: true,\n                                    originalId: scopedId,\n                                    chunkIndex: i + index,\n                                    originalPath: file.path,\n                                },\n                            },\n                            embedding: chunkEmbedding,\n                            createdAt: Date.now(),\n                        });\n                    })\n                );\n\n                processedChunks += batch.length;\n                const batchTime = (Date.now() - batchStart) / 1000;\n                elizaLogger.info(\n                    `[Batch Progress] ${file.path}: Processed ${processedChunks}/${totalChunks} chunks (${batchTime.toFixed(2)}s for batch)`\n                );\n            }\n\n            const totalTime = (Date.now() - startTime) / 1000;\n            elizaLogger.info(\n                `[Complete] Processed ${file.path} in ${totalTime.toFixed(2)}s`\n            );\n        } catch (error) {\n            if (\n                file.isShared &&\n                error?.code === \"SQLITE_CONSTRAINT_PRIMARYKEY\"\n            ) {\n                elizaLogger.info(\n                    `Shared knowledge ${file.path} already exists in database, skipping creation`\n                );\n                return;\n            }\n            elizaLogger.error(`Error processing file ${file.path}:`, error);\n            throw error;\n        }\n    }\n}\n","import { z } from \"zod\";\nimport { ModelProviderName } from \"./types\";\nimport elizaLogger from \"./logger\";\n\n// TODO: TO COMPLETE\nexport const envSchema = z.object({\n    // API Keys with specific formats\n    OPENAI_API_KEY: z\n        .string()\n        .startsWith(\"sk-\", \"OpenAI API key must start with 'sk-'\"),\n    REDPILL_API_KEY: z.string().min(1, \"REDPILL API key is required\"),\n    GROK_API_KEY: z.string().min(1, \"GROK API key is required\"),\n    GROQ_API_KEY: z\n        .string()\n        .startsWith(\"gsk_\", \"GROQ API key must start with 'gsk_'\"),\n    OPENROUTER_API_KEY: z.string().min(1, \"OpenRouter API key is required\"),\n    GOOGLE_GENERATIVE_AI_API_KEY: z\n        .string()\n        .min(1, \"Gemini API key is required\"),\n    ELEVENLABS_XI_API_KEY: z.string().min(1, \"ElevenLabs API key is required\"),\n});\n\n// Type inference\nexport type EnvConfig = z.infer<typeof envSchema>;\n\n// Validation function\nexport function validateEnv(): EnvConfig {\n    try {\n        return envSchema.parse(process.env);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(`Environment validation failed:\\n${errorMessages}`);\n        }\n        throw error;\n    }\n}\n\n// Helper schemas for nested types\nconst MessageExampleSchema = z.object({\n    user: z.string(),\n    content: z\n        .object({\n            text: z.string(),\n            action: z.string().optional(),\n            source: z.string().optional(),\n            url: z.string().optional(),\n            inReplyTo: z.string().uuid().optional(),\n            attachments: z.array(z.any()).optional(),\n        })\n        .and(z.record(z.string(), z.unknown())), // For additional properties\n});\n\nconst PluginSchema = z.object({\n    name: z.string(),\n    description: z.string(),\n    actions: z.array(z.any()).optional(),\n    providers: z.array(z.any()).optional(),\n    evaluators: z.array(z.any()).optional(),\n    services: z.array(z.any()).optional(),\n    clients: z.array(z.any()).optional(),\n});\n\n// Main Character schema\nexport const CharacterSchema = z.object({\n    id: z.string().uuid().optional(),\n    name: z.string(),\n    system: z.string().optional(),\n    modelProvider: z.nativeEnum(ModelProviderName),\n    modelEndpointOverride: z.string().optional(),\n    templates: z.record(z.string()).optional(),\n    bio: z.union([z.string(), z.array(z.string())]),\n    lore: z.array(z.string()),\n    messageExamples: z.array(z.array(MessageExampleSchema)),\n    postExamples: z.array(z.string()),\n    topics: z.array(z.string()),\n    adjectives: z.array(z.string()),\n    knowledge: z\n        .array(\n            z.union([\n                z.string(), // Direct knowledge strings\n                z.object({\n                    // Individual file config\n                    path: z.string(),\n                    shared: z.boolean().optional(),\n                }),\n                z.object({\n                    // Directory config\n                    directory: z.string(),\n                    shared: z.boolean().optional(),\n                }),\n            ])\n        )\n        .optional(),\n    plugins: z.union([z.array(z.string()), z.array(PluginSchema)]),\n    settings: z\n        .object({\n            secrets: z.record(z.string()).optional(),\n            voice: z\n                .object({\n                    model: z.string().optional(),\n                    url: z.string().optional(),\n                })\n                .optional(),\n            model: z.string().optional(),\n            modelConfig: z.object({\n                maxInputTokens: z.number().optional(),\n                maxOutputTokens: z.number().optional(),\n                temperature: z.number().optional(),\n                frequency_penalty: z.number().optional(),\n                presence_penalty:z.number().optional()\n            })\n            .optional(),\n            embeddingModel: z.string().optional(),\n        })\n        .optional(),\n    clientConfig: z\n        .object({\n            discord: z\n                .object({\n                    shouldIgnoreBotMessages: z.boolean().optional(),\n                    shouldIgnoreDirectMessages: z.boolean().optional(),\n                })\n                .optional(),\n            telegram: z\n                .object({\n                    shouldIgnoreBotMessages: z.boolean().optional(),\n                    shouldIgnoreDirectMessages: z.boolean().optional(),\n                })\n                .optional(),\n        })\n        .optional(),\n    style: z.object({\n        all: z.array(z.string()),\n        chat: z.array(z.string()),\n        post: z.array(z.string()),\n    }),\n    twitterProfile: z\n        .object({\n            username: z.string(),\n            screenName: z.string(),\n            bio: z.string(),\n            nicknames: z.array(z.string()).optional(),\n        })\n        .optional(),\n    nft: z\n        .object({\n            prompt: z.string().optional(),\n        })\n        .optional(),\n    extends: z.array(z.string()).optional(),\n});\n\n// Type inference\nexport type CharacterConfig = z.infer<typeof CharacterSchema>;\n\n// Validation function\nexport function validateCharacterConfig(json: unknown): CharacterConfig {\n    try {\n        return CharacterSchema.parse(json);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const groupedErrors = error.errors.reduce(\n                (acc, err) => {\n                    const path = err.path.join(\".\");\n                    if (!acc[path]) {\n                        acc[path] = [];\n                    }\n                    acc[path].push(err.message);\n                    return acc;\n                },\n                {} as Record<string, string[]>\n            );\n\n            Object.entries(groupedErrors).forEach(([field, messages]) => {\n                elizaLogger.error(\n                    `Validation errors in ${field}: ${messages.join(\" - \")}`\n                );\n            });\n\n            throw new Error(\n                \"Character configuration validation failed. Check logs for details.\"\n            );\n        }\n        throw error;\n    }\n}\n","import path from \"path\";\nimport fs from \"fs/promises\";\nimport type {\n    CacheOptions,\n    ICacheManager,\n    IDatabaseCacheAdapter,\n    UUID,\n} from \"./types\";\n\nexport interface ICacheAdapter {\n    get(key: string): Promise<string | undefined>;\n    set(key: string, value: string): Promise<void>;\n    delete(key: string): Promise<void>;\n}\n\nexport class MemoryCacheAdapter implements ICacheAdapter {\n    data: Map<string, string>;\n\n    constructor(initalData?: Map<string, string>) {\n        this.data = initalData ?? new Map<string, string>();\n    }\n\n    async get(key: string): Promise<string | undefined> {\n        return this.data.get(key);\n    }\n\n    async set(key: string, value: string): Promise<void> {\n        this.data.set(key, value);\n    }\n\n    async delete(key: string): Promise<void> {\n        this.data.delete(key);\n    }\n}\n\nexport class FsCacheAdapter implements ICacheAdapter {\n    constructor(private dataDir: string) {}\n\n    async get(key: string): Promise<string | undefined> {\n        try {\n            return await fs.readFile(path.join(this.dataDir, key), \"utf8\");\n        } catch {\n            // console.error(error);\n            return undefined;\n        }\n    }\n\n    async set(key: string, value: string): Promise<void> {\n        try {\n            const filePath = path.join(this.dataDir, key);\n            // Ensure the directory exists\n            await fs.mkdir(path.dirname(filePath), { recursive: true });\n            await fs.writeFile(filePath, value, \"utf8\");\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    async delete(key: string): Promise<void> {\n        try {\n            const filePath = path.join(this.dataDir, key);\n            await fs.unlink(filePath);\n        } catch {\n            // console.error(error);\n        }\n    }\n}\n\nexport class DbCacheAdapter implements ICacheAdapter {\n    constructor(\n        private db: IDatabaseCacheAdapter,\n        private agentId: UUID\n    ) {}\n\n    async get(key: string): Promise<string | undefined> {\n        return this.db.getCache({ agentId: this.agentId, key });\n    }\n\n    async set(key: string, value: string): Promise<void> {\n        await this.db.setCache({ agentId: this.agentId, key, value });\n    }\n\n    async delete(key: string): Promise<void> {\n        await this.db.deleteCache({ agentId: this.agentId, key });\n    }\n}\n\nexport class CacheManager<CacheAdapter extends ICacheAdapter = ICacheAdapter>\n    implements ICacheManager\n{\n    adapter: CacheAdapter;\n\n    constructor(adapter: CacheAdapter) {\n        this.adapter = adapter;\n    }\n\n    async get<T = unknown>(key: string): Promise<T | undefined> {\n        const data = await this.adapter.get(key);\n\n        if (data) {\n            const { value, expires } = JSON.parse(data) as {\n                value: T;\n                expires: number;\n            };\n\n            if (!expires || expires > Date.now()) {\n                return value;\n            }\n\n            this.adapter.delete(key).catch(() => {});\n        }\n\n        return undefined;\n    }\n\n    async set<T>(key: string, value: T, opts?: CacheOptions): Promise<void> {\n        return this.adapter.set(\n            key,\n            JSON.stringify({ value, expires: opts?.expires ?? 0 })\n        );\n    }\n\n    async delete(key: string): Promise<void> {\n        return this.adapter.delete(key);\n    }\n}\n"],"mappings":"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","names":["names","uniqueNamesGenerator","config","path","path","settings","GoalStatus","ModelClass","ModelProviderName","CacheStore","IrysMessageType","IrysDataType","ServiceType","LoggingLevel","TokenizerType","TranscriptionProvider","ActionTimelineType","KnowledgeScope","CacheKeyPrefix","path","fileURLToPath","__filename","fileURLToPath","__dirname","path","fs","options","config","input","runtime","names","uniqueNamesGenerator","uniqueNamesGenerator","names","fs","path","baseURL","options","apiKey","config","settings","actor","join","names","uniqueNamesGenerator","path","existsSync","join","result","uniqueNamesGenerator","names","message","actors","z","z","path","path","fs"]}